%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: grocery delivery.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Ameru
%%CreationDate: 4/1/2020
%%BoundingBox: 0 0 2700 1500
%%HiResBoundingBox: 0 0 2700 1500
%%CropBox: 0 0 2700 1500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.1 x260 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2018newtemplate</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-04-01T18:31:03+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-04-01T18:31:03+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-04-01T18:31:03+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>144</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgNZ&#xA;17R9FtfrWqXcdpDvxLndiOyKKsx9lGAyA5uRp9LkzS4ccTIsHuvz28oRScIbe8uAD/eLGiqR4jm4&#xA;b7xlRzxd5D2X1JFkxHxP6k00T83fJWqzLB9Zexmc0RLxRGCf9dS8Y+lslHLEuJquwNThF1xD+jv+&#xA;1meWOmdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqX+&#xA;YNbtND0a61W7/ubVOXEdWYmiIPdmIGCUqFuRpdNLPkGOPOT5g8xeYtT8wapLqOoyF5XNI4wTwjSt&#xA;QiA9FGYEpEmy+oaPRw0+MQgNvv8AMpZgcptUZvsgnFBNPXfyq/Mi206wbR/MFw0cMRH6PuXBcKh2&#xA;MTFQSAp+yT+AAzIxZa2Lx/bnY5yT8TCNz9Q/T+t7Bb3FvcwpPbyLNBIOUcsbBlYeII2OZNvITgYm&#xA;iKIVMWLsVdirsVdirsVdirsVdirsVdirFfMHndNL1aO0jjWaKMVvDvyFegWncDc5pNd2wMOUQAsD&#xA;6v2O30fZZy4zImj0ZQ0sSxGVnURAcjISAtOta9KZuuIVfR1BFLLa6tbqP1LaZJ4605xsHWo7VUnB&#xA;GcZCwbVVySuxV2KoXU9V03SrKS+1K5jtLOGhknlYKoqaDc+J6Yq8J86f85I3wvpLXynbxCziJX9I&#xA;XKszS0/aSOqhV8OVSfbDSsTT/nIH8zFlDm9gda19M28XH5bAN+OGleheSf8AnI/T72aOy802y6fK&#xA;5CrqFvya3r/xYh5PGPcFveg3wUr2iKWKaJJYnWSKRQ8ciEMrKwqCCNiCMCrsVdirsVdirzL8+7qa&#xA;Py3Y26VEU13WUjoeEbFVP0mv0ZRnOz0/stAHPInmI/peFZivdE1uURDApAZjXwA6YaafGEh6Tsrg&#xA;ACg2GLBMtE8vavrd2LTTLdp5aVY7BVUdSzGgA3xiLNDm4+p1WPBHimaD1nyV5L89eWLqIi7tbnTZ&#xA;mH1ywEkmwO3OMsgHJevavTMmEJReT7R7R0upifTITHKVD5Hfk9Iy95t2KuxV2KuxV2KuxV2KuxV2&#xA;KofUbsWen3N2RUW8TycfHipNPpyrPl8OEpfzQS2YcfHMR7y8Sa7mvGlnlDevI7GQN1Ltv+Nc86lM&#xA;zkSeZe7jARAA5B675hg9PyhqML/EY7CYE+JWE7/eM7/URrTyB6QP3PBTlciWNfk7MW0G8hrXhdFg&#xA;PDlGv/NOa/sOX7qQ/pfoYs9zdq7FXYq+b/8AnJfWr2bzRYaPzIsbW1W4EddjLK7qWPyVAB9Pjkgr&#xA;xzCrsVdir6H/AOcbvOlxeWV35WvJC7WC/WdPLbkQM3GRPkjspH+t4DIlXtmBXYq7FXYqkfnLypZ+&#xA;Z9Ek024cxNyEttOBUxyqCFancUYgjwyE4cQpzuztdLS5ROO/QjvD54sPK5j8zXWiayGhntQ1YlNO&#xA;bClCGp9kqeY8RlWoMtPh8SIBlfyd1qO0/wA/m8KzHFXLrI+f6k/8s+W4dNvr+0u0q0zqLK4YArIi&#xA;KWoP8oBtx7GnQ5hdoZ/HhGUeg38v2NPZ0Dp5yj38vP8AanZ0KENtBCfA8VH8M09z7y7z8z5lkP5d&#xA;ajpA164sY7yB7wQkCBGHIcWBYDxp3pm27O02SEuKQNEc3Qdr6qGSIjE7gvSM27oHYq7FXYq7FXYq&#xA;7FXYq7FXYq7FWMfmHqJtdAa3j3nu2CIp2+FSGff8M03bmfgwcPWX4Ltex8PFm4ukWCeVrNr7XbCF&#xA;loPUEkinccYv3hBp48aZzXZuHxM8B538t3oNfl4MMj5V89noHm7WbOLRtWs2D+sbSZBQClXiNN6+&#xA;+dL2h2pihx4jfHVfMPGcJq3nv5eanrVreW1jYBWS5mLzxsNihUAlm6jiqkin45puzdTljkEIcid/&#xA;x5MXsmdkrsVdiryT85fywi8x6vZaz9d+qcIBaSIIuZbizurV5KB9s9sxtTqfCANXbl6TS+MSLqnm&#xA;M/5KXq/7z6rHJ4epEyfqZ8xh2oOsXMl2Sekkm8w/lvrOlR2EcKfXZrlnSR4ASittwU1ApVa9cyMG&#xA;sjkJ6Ad7jZ9DOAFbk9zHNY0bUdHvPql/F6U3EOoBDAqehBFQemZGHNHJHiibDjZsEscuGQos0/IS&#xA;8kt/zP0yNW4pdJcwydqj0HkA/wCCjGWFqfWORV2KuxV2KuxV57+a3k972K38yaan+5XSmVpgvWW3&#xA;VqsD4lNz8q+2TsGBgeRDLHIxmJDoWK3VyLrQtQZ6Rz2XqsrJtweNfVicVr+yVOc5p48M4VylX27E&#xA;fe9RqTcZ3zjf6x+h5Nd+Ytdu1KXF/PJG2zJzIU/NRQZ2GPR4obxiPk8pPVZZc5FlH5KQSSfmPpjo&#xA;KrCtw8h8FNu6f8ScZLUH0FqhzfTua1udirsVdirsVdirsVdiqSeYvN2k6EqrclpLlxWO3jFWI8ST&#xA;QAZj59THHz5uRh00snLklVr581GSP15vL93Fabn115OOP81OC7ZQNZLnwGvx5Nx0keXGLT7R/MGm&#xA;6spNq5EiirROKMB47Egj5ZkYdTDJyaM2nlj5vPfzC1e4uddFvEge2sx6Z3o3Nt3P6h9Gcl23qTPN&#xA;wjlDb49XpeyNPwYuI85fgJPpHmC60bW7eeBEdOLfWvU6elUVCkbhyacafTtXMbs/VeBk4/x/a0dt&#xA;z9EYjqb+X9qaya1JqelzXN8eUkyOjMFC1WhRagbVpmJqM8s2Tjlzefj9Kr5PstQVXj01eF7cCk10&#xA;dhDD2UHsW6nvmw0HiyJhh+s85fzR+P2MQK3LMPL2ozwzNpl67NKpIjdyWPIdVqfwzZ9ka6cchwZj&#xA;6ul/d+pM49QyLOla3Yq84/OjzlceXrDTYILZZ3vZJH9RyQqCAKCKDu3q+PbE6MZxRNU24dScMuIC&#xA;3n9t+aukNGPrNpcRSdxHwkX7yyH8MwJ9hZAfTKJHxH63aw7Zx1uCE/0i9j1aL9LpVbYhkslkoCoU&#xA;8ZJGAJFSwI+Q9zmu1OI4v3f8XX9A/HX3Odp8gy/vP4en6S8S87a4NZ8wz3MYKwRfuIA3XghO5/1m&#xA;JObrSYPCxiPV0Ot1Hi5DLoyf8gLKW4/M3T5k+zZw3M8n+qYWh/4lKMyC4r6uyKuxV2KuxV2KsS87&#xA;+fNO0C6sdHeCS61DV6pFHHRVRCQhkdj23NAAeh6ZHKP3cj0AbcAvJEDvDy3zTouqS2s6afN6T3Ch&#xA;J49gsyKSQK/ssKn59Dmj7P1UMUx4guI5HuP4/Y9Nr9LLNAnGal1He8wvNPvrJ+F1A8LdByBAPyPQ&#xA;/RnY4dRjyC4EF5HNp54zUwQ9r/5x+8pXFtBd+ZLuMxm6X6tYhgQWiqGkkFezMFAPscx9VO/SiA6v&#xA;Y8xGx2KuxVgfmbz5r+g63Kkul+po/wAIhmYMhc8RyKyDknXsRXNLq+0cuHIbj6Px1VXP5qaJJp31&#xA;i2ikkuwQrWbkIy1H2uXxAr8vwxydt4xDiAJl3Kmkvm6FtLsr+1jEgvG4FSd0cDdSB3rtjqu1+DDH&#xA;JAcXH9jKMbWNq3mWT7FmU/55t/xscwD2jr5csdf5p/Sz4Ysb1zX/AMz9MkN5LBbCyWhokZaOnYP8&#xA;TSKfpGV6vtHX4KnOIENuQ2+PUNVFLNC87aReavc3euoLHVLhQlnfhRJBCQvEMFblxNabmv0Y6Ptn&#xA;HkkfE9EzylzA+H9radQTAQGw+9OLf8zLu2F1ZahBDLqFrvDLG5SG4RN24mj8WZPiU9G9tgbMfb8o&#xA;cUMgBnHqDtL9pG46FptD3WrWUGo2vmLSj/odyPVaP7JV12niYdj4/PbbL5aqFjPj+k7/AKw7nSfv&#xA;sfAefL9TGJ7o3Msl07BmmZpHcbgljU5zE5mcjI8y9PCAiBEcggLd5r2V44Y1K8gC7VrT6MuljhAe&#xA;veXc872jmxyyWd9qpM7to7IQwmUszbLGBtRd60qdhk8PDkscNRHVpxShIUYgRHV6j5KNu2gQSQrG&#xA;rPX1TG3Ilh/N4N7ds67srHjjhHBX473W5uHiPCbCvqehi7v4LlG9Mgj1yNiQu4I9+2Ua7srxs0cg&#xA;NfzvhyrzYxnQTbNywdirzn89fL0mqeTvrsC8ptJlFww7mFhwkp8tm+QzI006lXewmNnzfmxameeS&#xA;tVvLvR30T0+NvExMlxU/3TmrRAeLGu9ele+c32xCOKfi36jyHn3/AA+96Hsgyyx8P+Ecz5d3x+55&#xA;Xdqy3UysKMHYEHxBOZkD6Q6jIPUfe9t/5xdson1DzBfEfvoIraBD/kzNIzfjCuEsX0DkVdirsVdi&#xA;riQoJJoBuSelMVfMP5r+e4tY88R3+izfuNLjW3tbpejsrMzuK9VJfj4ED3zJGEGBjIbFEchjISjz&#xA;Cpp35sgosWrWPPs80B6/883/AOas1ObsW/oPz/W7fD2yR9Q+Sr59kM3l/TPMuizSRC2lEiOtVZRJ&#xA;8NfmrDifnlXZcfCzSxy5n9Db2pPxsUcg5D9L2f8ALj8wNJ83aOrW8rfpG0RFv4JQqycqU9T4fhKu&#xA;QT8P4ZtZwMS6MFl2QS7FXYqtliiljaOVFkjcUdGAZSPAg4CARRV5z5z8g6JGyXGlt9SvHJPoDeIg&#xA;DrTqu/ht7ZyvbWDDhox2lLp5d7KMbSK0bUdNjNncikUsiyxOpqomQUqO+6mn3ZoxnPAYjvse/wDH&#xA;6GURReu6feJd2MF0NhKgY+xpuPoOegabMMuOM+8MCKSrV7WXWYJ4dN1OPiAqywqVcBgairIeSE+9&#xA;c1naOlnqomOLKK6jz943H2+5lGQDxbWEtri5kK0JJPJk2UkdwNqV+WcZ4G2/1d46vV4vZ+MsXq9O&#xA;TvSdRPbtwcHgT8D70r7HMaQ38w8rnwSxzMJfUE10m6kZJbV2rav+8KE7BxQVH+sOvyy/BlkImH8J&#xA;dp2ID4p7uFUvZEitmSEcVY028TmZpMYlMPRamfDAsj8saKkNpLdTyLHEW2kYhQEUbksdhvmXLRGc&#xA;ySeZeQl6pX3sh/LzTIrzVdU1p1V4Ynaxsv2hxG7tv/MCPvOdB2ZpYwBrly/Wy1J4YiHxKf6R5ROk&#xA;6zNe2V6Uspyeen8Phoeg5cv2T0+Hptlum7O8HKZwl6D/AA1+39DhMizZq7FXYqtkjjljaKRQ8bgq&#xA;6MKgqRQgg+OKvL738hfJ0RvL1JbooEkkhtDIojVuJIHILzKg/wCVX3y3Nq5iBrnTLBiickQeVhLL&#xA;DRILWJYY0SGFekaDOPySnklxTNl7WEoY48MBQeSfmd5Xl0rW3vok/wBA1BjIjAbJKd3Q/M/EPb5Z&#xA;v9BnE4cPWLy/aOnMJ8XSX3pn+RHms6F56t7WQ/6JrNLKUeEjt+5b/g/h+THM4uA+rcirsVdirsVe&#xA;M/nz+YE1qn+E9MkKyzIH1SVTuI23SH/Zj4m9qDucvww6sZF4MQR1GZLB2Kpgup302ltpjXEhtgCY&#xA;4Cx4Vry+z0+1vkRihxcVDi72Zyz4eGzw9yI8heap/LHmix1aNiIUcR3iDfnbuQJFp323HuBjONim&#xA;IL7GR0kRXRgyOAysNwQdwRmC2N4q7FXYqhtQsku7aSPinqlSIpJE5hGI60BU/ccxtVpYZokSAJ6W&#xA;LpINPM9TstVsbgWesRrR9ra6jr6UlN+v7L+2cLq9Bk08qkNu/o2RlexXQwXl/GlhJevFYx/CLdWK&#xA;Bi/JyW2IPToc2vYmn/NE4pzkIRF0Ou7j6vIYAEVz6p7bXmjeX/Ll5afWVgnlSZoXU1Z5PSNKf5Q4&#xA;7DOi1OmxaHAeGwDfPmTTRptWL9VEjueSfpq0dQlyg9TkeMy7HiNviC0/HOT0/Z2o1WCU8YBlE/F6&#xA;HSdr6k4jwy3v7P0eSIlsY7/0lSQKtaKyjkNzTxGarS6Kfq47jK+o3Y6bTeNjkZ/XxfV9996Vrp6R&#xA;a4lncOyj1PT5pQE8hVDuD12zMGMcXCXvp5b0wnEA7f2stfRrCSOMySOoFGALL+O2ZuHDHHuHmc+Q&#xA;5BRTGe5hlsls3CyWyU/dAVDcd/i7HffL+JxMemjA2ObI/IFvNJeSzw/ubaABZIxsHLg02G21M2XZ&#xA;sJGRl0Di9oSAiB1LPM3bp3Yq7FXYq07oiM7sFRQSzE0AA6knFXiGreernzn52jsdKuXi8t6TWaQo&#xA;xT61IporNShKcqcVPbfvleul4WE/zpbOX2fi8TKO6O6v5g816PocVbuXlORWO1jo0jfR+yPc5o9N&#xA;o8mY+kbd/R3uo1cMQ9R37nlXmfzxquu8oHCwaeTVbUANWnQsxFSfuzo9L2djxb85d7z+p188u3KP&#xA;cl3k6wln856ClstZG1C12HYCZSW+gbnL8uMAWHEiX2fmKzdirsVdir5D883kl55z1y5ckl76dVr1&#xA;CJIUQfQqgZmwGwaikZAPXJKptHTcfdhVYCQajqMVUWFGOKvpP8l/zKttY0m00C/Ii1SzhEMDsRSe&#xA;OIcVpX/dioBUd+vjmLlx1uziXqWUsnYq7FXYqxTzf5ZuL8T3q3zRwRw8ntiCVPpAtWoP8M0fanZs&#xA;8pMxOhXLpt+O5lCPFIDvYpayRsjxyyGJ3jKiUV2bs22arsqUtLnGTmA5Ws7LnkxGHeGJ6ubq4Uw8&#xA;pHZWJR3rXoRWh+eWdve0p1n7kY+DHGdg78Rqx+m10XsV4cBM5byEb/zR9t+X6EV5f8n6bLpq3N5E&#xA;ZriUkorllCgGgBCla1pXfOf1ntLqtKfAwEY4R5kRFyJ6+oH3bdzuh2dj0/7uJ4q6+a4aLdadBbt8&#xA;K/Fx4oS3FiSdqjcZj4O1jmmSSTPnZ6uqnhyYanfVINT9Z/Mxib4pYpVqyjakdPi/DNrCRnISqrov&#xA;d4pxjo/gftZYygOaCm+bIPOFrCh6F+XsQXR5pKbyTtv7Kq/xrm87MH7snzdN2ifWB5MozYuA7FXY&#xA;qlvmLzFpPl7SpdU1Wb0bWLbpVnY/ZRFHVm/z2yUYkmggl85/mB+c2ueZ0l0+zU6bormjQqazTL/x&#xA;a47H+RdvGuZePCI+9gZWwC3ubm2k9S3leGSlOcbFWofcUyyUBIURaIyMTYNLHd3cu7FnbdmY1JPu&#xA;ThArkgm2sKso/K+O4f8AMHQVgBLi7RjTrwWrSf8ACA1yvJ9JSOb65zAbXYq7FXYq+RPPVk9l5012&#xA;2cEFb6dlr14SOZEP0q4zNgdg1lI8kh2Kqcidx9OFVCUbV8MVR+i3M0L84XaOWJlkikQlWVh0II6E&#xA;Uwq+nPyx/MOHzRp31a7ZU1u0UfWE2Hqr09VB/wASA6H5jMPLj4T5MwbZvlTJ2KuxVh3mzX9XLTad&#xA;p0UKoax3E8zMWKkUZURRQbdyc1es1Z3gPc7TSaUbTkfcxNbO/wD2kj+YY/0zTcDtONv6nd/yr/wX&#xA;9mPAvGvS1u1O3w/JsqyaaM/qAl7xaeNU+rTOB6lGIPJeRrQjoRkceixQ5RiPgGEqPNAQaLceq8k4&#xA;Rix5ChJ3rXwy3wy2nIFZ9NuSxI47++T4S18Sm2m3/wCyE+ZY/wBMeFeJPfLGta3pJ+rXEUE2nFuX&#xA;wsyzIT1p8JVh7H78z9JqjiHCfpcPU6UZNxtL7HoisGUMOhFc3oLpC3irsVeFf85K3d19a0O0qRac&#xA;J5eNdmkqq1I/yV6fPMrTjmwm8TzJYOxVP4/IfmyW1S5j09mikUOvxxhqHcfAWDfhmEe0cANGW/xc&#xA;waDMRYjt8Ejnt57eZ4Z42imjNHjcFWB8CDmXGQkLG4cSUSDR5vd/+cfvIslrBJ5qv4+Mlyhh0xGG&#xA;4iJ+OXf+enFfavY5j559GUQ9nzGZuxV2KuxV84f85Bactl55ivlFI9StI3kb/iyImL/iCrmVhOzC&#xA;TzfLWLsVdiqlLH8JI+7CremNScjxU4QqeadqN9pt9DfWMzQXUDc4pU6g/wAQe474kWr2HQvz/tGV&#xA;Itc0543AAa5tCHUnx9NypUfJjmNLB3MhJn2jef8AydrAUWWqQGVukMrejJXwCScSfoyo45DoytkG&#xA;QSwTW/8AjrXX+v8AwzntV/eS97vtN/dhA5jt7sVdirsVdirsVdirsVejxf3Sf6o/VnUR5PNy5rsK&#xA;HYq8r/5yG0Nb3ylb6mtPX0ucEg9fRnoj0H+uEy7BMCVd6JRJFvnLM1qZj+XflL9K336Qu0rp9owo&#xA;rDaWQbhfkvVvuzVdp63w48MfqP2B2fZ2k8SXFL6R9r1/OWelYpJ5U07zp+YNpYRkelpsfq65KoND&#xA;GrrwhBH7bEkew+VM6PsvjhiJPI8nne1JQlkAHMc3vUUUcUaRRKEjjAVEUUAUCgAA7DMh167FXYq7&#xA;FXYq8T/5yWtA1voN1T7LXMLHx5CNl/4icyMB5sJPClkeLb7Uf4jMhiiEdXFVNRgVdirsVajVY5RI&#xA;o38O2+FUSLod1+7G1XC4iPcj54bVeJIz0YYqm2l+afMelADTtSubZB0jjkYJ/wABXj+GAxB5rb1z&#xA;QdRvNR0e0vr2QzXU8YaaUgAselaKAM5HWis0ve9Fpf7uPuR+YjkOxV2KuxV2KuxV2KuxVRH522rX&#xA;cNnaaVJIXkWHnJKEoSQteKq9fvztDpOGHETyFvLjJxT4R1LJbnzhctUW8Cxj+ZyWP4UGc/PtCX8I&#xA;d3Ds2I+o2lVxrOqT/wB5cvQ/sqeI+5aZiz1GSXMuZDTY48gEg8027Xfl3U4Qpkke2l4KN2ZwhKge&#xA;/IDDpp8OWJPeF1ELxyA7i8i0X8vfMeoToJ7ZrK1JHqTTjiwXvRD8RP0Z0GftPFAbHiPk6TB2dlmd&#xA;xwjzew6dp9rp1jDZWqcIIF4ovfxJPuTuc5bLllORlLmXpceMQiIjkGJee/PcemxvpumuH1FwVllU&#xA;1EIO3b9v9WbPs7s45Dxz+n7/ANjrtfrxAcMPq+79rLv+cdNKEXlnUNVfee/u/T5ncmOBRTf/AF5H&#xA;zd5zuA6CL1nKGTsVdirsVdiryT/nJCMHyxpclN1veIbw5ROafTxy7BzYyfPeZTBYVKtyjPFu/gcV&#xA;Vop1c8W+F/A/wxVVwK7FXYq7FXYqvjqNwSMyMGLi3LXOVJvp3mbzBZ+nFbahLFGtAiM3KNR/qtyA&#xA;H0Yc2gwTsygD97LHqssdhIvSvLeueZXdINWtEkgfdNTheP0uNKjlxNN/b7s5bW6XABeKVH+aQbd5&#xA;ps+U7TG384VTKVZWHJSGU9CNxmoIpzwW8CXYq7FXYqpzTemjlVMkiqWWFSObUHReRA398nGNnuHe&#xA;xkaYRq35j6hp8wim0YwlqkCWYciPkqmmb/T9iQyCxkv3D9rqs3aUoGjCvilGjan5EZoru9udQs7y&#xA;J1laNIopoyVIaiuGRt/dRnQZMczExoEEU6eEwJcXW7ZVqH5t+S4lP6O0y+unGw+sSRwJ86p6rfhm&#xA;pj2DHqXZHtefRkjXHqKpEKwkgFlDFqGm4qev3Zy2SYv08npMcCB6jZU8rbWndEUu7BUUVZiaAD3J&#xA;xAtSaeeecvzJSNXsNDk5SH4Zb5ei+Ii8T/lfdm80PZRPqyfL9bpdb2nXpx/P9TzRmZmLMSWJqSdy&#xA;Sc6EB0T6o/JS39H8tNIqKNJ68jd/tXElP+FpmDm+otkeTOMqZOxV2KuxV2KvL/8AnIiLn5FtmrT0&#xA;9QianjWKVf8AjbLsPNjJ84ZlMHYqtZFYb/QcVcDcL0cMP8rFU48paU2v+YrLRWmFq165jE/EuFbi&#xA;WHw1FakU65GRoWoD0e9/5x381xkm0v7K4QdOZliY/Rwcf8NlQzBlwpJdfkn+YsFSunJcAdTFPD+p&#xA;mQ5LxYo4SlF1+XHny2JEmhXjU/31E0ven+6+WS44960UR5d/LTznrOp/UF02axUIzyXV7FLDEhUV&#xA;CsSlasaAACuX49VGA3a5YySrar+Vfn3TZCsmkTXCD7MloPrAPuBHyYfSBmTHVY5dWs45BT0r8sfP&#xA;epTiKLR7i3FaNJdIbdFHjWXjX6K4ZanHHqgY5Ho+gvInkSw8saDHYOsdzduxlu7gqCGkbai8twqg&#xA;UH3980upmMsrIczFcBQLIfqFj/yzxf8AAL/TMfwodw+TZ4su8u+oWP8Ayzxf8Av9MfCh3D5L4su8&#xA;u+oWP/LPF/wC/wBMfCh3D5L4su8u+oWP/LPF/wAAv9MfCh3D5L4su8vPfzH/ACftfMUranpMiWer&#xA;cQJI32hmCigrQEowApUCnt3zP0up8McNeloyw4jfV5Y35MfmQrEDSQwB2YXFtQ/fKDmw/OY+/wC9&#xA;x/Cki7L8i/P1xT1Ybazr/v6dTT/kUJcidbjHmkYZJwv/ADjvr5jq2q2okp9kLIVr/rUH6sr/AJQj&#xA;3Fl4Bep2/kmIRoJ7pnkAHMooUE03pWvfOY/k2N8y77+VZVyDGPzWhh8s+Tpb7T3db6SaKCGZ6Nx5&#xA;EsxC0414oeozJwdm4jLey0ZO08tbUHz1qOr6vqJre3ktwK1Cu5Kg+y/ZGbfHp4Q+kAOvyZ5z+oko&#xA;Hg2WtVthPHFbfT/5F6iLv8vLWKtWsZprZvb4vVA/4GUZhZxUm2B2egZSydirsVdirsVeU/8AORd8&#xA;kXlCxs6j1Lm9VgD/ACRRvyI+l1y7AN2MnztmUwdirsVdiqceRro2nnjQp60CX9ty/wBVpVVvD9k5&#xA;GfIpD7HzBbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8v8A+chruCLyXbW7UMtxex+mD1AR&#xA;HLMPwH05fpx6mE+T5zzManYq7FXr/wDzj35tW01O58t3DUhv63FnX/f6LR1/2ca/8LmPqIbWzgXv&#xA;uYja7FXYq7FXYq8g/PPyp5v8x6jpcWj6e93Z2cMjPIrRqBJKwBHxsvRYxl+KQHNjIPMP+VQfmR/1&#xA;ZJf+RkP/ADXlvix72NF3/KoPzI/6skv/ACMh/wCa8fFj3rRd/wAqg/Mj/qyS/wDIyH/mvHxY960W&#xA;m/KL8x1UsdEloPB4ifuD4+JHvWi3Y/lT+ZEV7Bdpoc37mRJBVoQfgYHozjwxOSPetF9XZhtjsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVeMfnd5e85eY9bsLbStLmudPsoSRMpUK00zfH1YdFRev&#xA;vmTglEDctcwS86/5VD+Y/wD1ZJf+RkP/ADXl3jR72PCXf8qh/Mf/AKskv/IyH/mvHxo968Jd/wAq&#xA;h/Mf/qyS/wDIyH/mvHxo968JRGn/AJYfmhp9/b31ro8sdzayLNC4kh2dDyH7fticsD1XhL6esppp&#xA;rOCaeI280kaPLAxBKMygshIqPhO2YJblbArsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:79373a45-089c-1246-8e56-82c3879f5b13</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:79373a45-089c-1246-8e56-82c3879f5b13</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e856efb4-aea3-461b-b65a-aa8bfc14db7f</stRef:instanceID>
            <stRef:documentID>xmp.did:87936311-841e-4d4c-be61-634fff5f3896</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5905cb72-125a-4b42-a49a-044b4be4eb1f</stEvt:instanceID>
                  <stEvt:when>2014-08-13T10:54:58+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:79373a45-089c-1246-8e56-82c3879f5b13</stEvt:instanceID>
                  <stEvt:when>2020-04-01T18:31:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2700.000000</stDim:w>
            <stDim:h>1500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1500 li
2700 1500 li
2700 0 li
cp
clp
1047.33 1121.73 mo
949.469 1109.38 792.84 1056.04 779.033 1052.6 cv
754.729 1046.55 695.099 970.446 676.912 948.858 cv
645.151 911.159 582.108 851.914 558.422 832.223 cv
528.647 807.472 474.862 767.902 431.21 806.404 cv
387.558 844.906 386.525 894.505 413.692 939.185 cv
440.859 983.863 527.292 1057.33 527.292 1057.33 cv
527.292 1057.33 694.353 1208.42 715.245 1217.13 cv
736.137 1225.84 825.659 1226.69 906.577 1235.22 cv
914.375 1236.05 1036.64 1253.4 1044.61 1254.03 cv
1045.51 1201.27 1021.43 1169.85 1047.33 1121.73 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.384314 .403922 .517647 rgb
f
2319.73 864.579 mo
2260.98 927.815 2137.53 1060.04 2116.25 1077.68 cv
2088.15 1100.99 2048.44 1090.16 1921.44 1128.94 cv
1793.03 1168.16 1758.95 1153.94 1744.69 1150.57 cv
1741.09 1170.37 1738.68 1190.34 1736.52 1210.34 cv
1739.59 1209.87 1741.42 1209.55 1741.42 1209.55 cv
1741.42 1209.55 2048.99 1211.33 2099.38 1191.38 cv
2128.22 1179.96 2233.38 1112.03 2319.73 1039.68 cv
2319.73 864.579 li
cp
.984314 .717647 .54902 rgb
f
1850.43 1140.24 mo
1852.54 1142.89 1848.89 1147.56 1847.95 1150.88 cv
1845.88 1158.16 1845.28 1166.19 1845.11 1173.77 cv
1844.81 1186.63 1846.04 1200.02 1850.17 1212.3 cv
1850.74 1213.98 1850.38 1215.82 1849.22 1217.2 cv
1848.05 1218.58 1846.25 1219.29 1844.42 1219.11 cv
1801.83 1214.82 1782.73 1217.46 1754.97 1221.41 cv
1728.67 1225.16 1661.85 1234.9 1615.08 1226.22 cv
1596.3 1222.74 1541.2 1182.98 1546.99 1175.28 cv
1554.99 1164.66 1597.65 1174.98 1623.53 1172.01 cv
1632.59 1170.97 1647.87 1171.83 1648.62 1165.62 cv
1646.81 1148.51 1621.05 1160.18 1603.17 1153.15 cv
1585.98 1146.39 1610.77 1138.33 1619.79 1137.42 cv
1633.8 1136.01 1651.4 1132.65 1665.31 1132.22 cv
1704.29 1131.02 1714.09 1154.14 1762.25 1149.57 cv
1769.71 1148.86 1800.22 1146.68 1814.19 1143.26 cv
1820.85 1141.63 1827.71 1141.2 1834.44 1140 cv
1838.45 1139.28 1844.03 1137.54 1848.05 1138.79 cv
1849.2 1139.14 1849.96 1139.64 1850.43 1140.24 cv
cp
.396078 .462745 .670588 rgb
f
1772.21 984.747 mo
1029.25 984.747 li
1092.41 950.752 li
1099.8 946.811 li
1146.31 921.783 li
1655.05 921.783 li
1701.66 946.811 li
1708.95 950.752 li
1772.21 984.747 li
.768627 .462745 .27451 rgb
f
1481.31 670.741 mo
1481.31 670.741 1463.68 606.302 1439.81 590.836 cv
1415.95 575.37 1400.5 570.028 1361.82 582.489 cv
1323.15 594.951 1296.86 616.375 1295.71 638.461 cv
1294.56 660.546 1287.75 624.615 1287.75 624.615 cv
1287.75 624.615 1290.77 588.151 1305.22 577.489 cv
1319.68 566.827 1356.82 541.575 1396.63 552.398 cv
1436.43 563.221 1473.03 612.623 1473.03 612.623 cv
1481.31 670.741 li
cp
.768627 .541176 .341176 rgb
f
1524.05 742.104 mo
1524.05 742.104 1527.77 672.674 1508.87 627.993 cv
1489.97 583.312 1470.01 566.177 1432.73 558.077 cv
1395.45 549.978 1384.56 550.363 1380.41 550.045 cv
1375.46 549.666 1388.07 552.727 1405.31 557.783 cv
1422.55 562.84 1434.17 571.926 1448 594.737 cv
1461.83 617.549 1486.96 681.568 1484.17 722.689 cv
1481.38 763.81 1487.63 758.896 1487.63 758.896 cv
1524.05 742.104 li
cp
.882353 .65098 .431373 rgb
f
1313.64 571.446 mo
1313.64 571.446 1303.7 577.734 1298.76 582.698 cv
1294.52 586.954 1276.56 642.576 1273.63 650.346 cv
1270.71 658.116 1283.84 697.726 1297.25 719.561 cv
1310.66 741.397 1319.92 763.377 1320.05 770.657 cv
1320.17 777.937 1326.24 781.656 1326.24 781.656 cv
1369.85 778.832 li
1369.85 778.832 1345.38 753.036 1333 727.905 cv
1320.63 702.774 1288.97 641.861 1295.6 615.013 cv
1305.44 575.173 1313.64 571.446 1313.64 571.446 cv
f
1733.87 772.584 mo
1733.87 772.584 1707.02 761.247 1661.68 741.926 cv
1616.35 722.605 1583.15 710.721 1583.15 710.721 cv
1583.15 710.721 1443.65 767.516 1375.32 770.655 cv
1306.99 773.794 1279.11 765.752 1279.11 765.752 cv
1279.11 765.752 1300.3 829.62 1344.91 844.366 cv
1389.51 859.112 1533.98 862.531 1570.39 845.739 cv
1606.81 828.947 1733.87 772.584 1733.87 772.584 cv
.701961 .447059 .262745 rgb
f
1511.21 827.857 mo
1511.21 827.857 1504.68 753.032 1481.97 708.963 cv
1459.26 664.893 1427.95 635.499 1422 632.543 cv
1416.05 629.586 1407.14 632.579 1410.56 634.378 cv
1413.98 636.176 1420.41 642.183 1422 652.096 cv
1423.59 662.009 1427.84 673.843 1428.79 684.642 cv
1429.74 695.44 1452.55 764.523 1463.12 781.601 cv
1473.68 798.679 1482.68 820.7 1482.68 820.7 cv
1511.21 827.857 li
.552941 .686275 0 rgb
f
1491.84 815.821 mo
1490.23 805.244 1489.29 794.584 1486.47 784.233 cv
1479.77 759.696 1471.51 735.539 1461.66 712.085 cv
1453.79 693.317 1445.58 674.128 1436.18 656.055 cv
1430.28 644.711 1421.98 635.191 1410.38 632.655 cv
1412.17 631.331 1417.81 630.461 1422 632.543 cv
1427.95 635.499 1459.26 664.893 1481.97 708.963 cv
1504.68 753.032 1511.21 827.857 1511.21 827.857 cv
1492.75 823.225 li
1492.53 820.754 1492.21 818.282 1491.84 815.821 cv
.509804 .639216 0 rgb
f
1334.11 754.321 mo
1334.11 754.321 1316.79 763.358 1291.94 757.958 cv
1267.08 752.559 1266.52 762.035 1260.7 771.312 cv
1254.89 780.587 1255.18 788.884 1255.18 788.884 cv
1259.66 803.809 li
1277.56 811.367 li
1299.51 792.201 li
1337.54 775.673 li
1334.11 754.321 li
.882353 .65098 .431373 rgb
f
1723.85 655.528 mo
1713.76 643.49 li
1713.76 643.49 1704.68 651.707 1681.46 659.942 cv
1658.24 668.177 1620.28 732.245 1620.28 732.245 cv
1606.71 765.169 li
1606.71 765.169 1645.43 723.323 1664.53 704.367 cv
1683.63 685.41 1691.89 678.732 1699.63 675.987 cv
1707.37 673.242 1719.93 666.602 1719.93 666.602 cv
1723.85 655.528 li
cp
.592157 .619608 .0823529 rgb
f
1670.61 607.584 mo
1670.61 607.584 1682.03 616.304 1696.65 617.94 cv
1711.28 619.575 1695.97 625.223 1687.79 636.321 cv
1679.62 647.419 1662.49 672.49 1658.11 683.885 cv
1653.72 695.281 1637.11 712.077 1637.11 712.077 cv
1627.1 677.543 li
1670.61 607.584 li
cp
.501961 .576471 .129412 rgb
f
1657.58 531.743 mo
1657.58 531.743 1620.31 548.415 1608.77 573.454 cv
1597.23 598.492 1600.79 661.8 1600.79 661.8 cv
1600.79 661.8 1616.27 699.764 1617.32 711.257 cv
1618.37 722.749 1619.2 740.021 1619.2 740.021 cv
1619.2 740.021 1635.95 743.31 1633.89 729.266 cv
1631.84 715.222 1619.8 683.451 1618.2 666.79 cv
1616.61 650.129 1615.77 622.76 1633.15 598.613 cv
1650.53 574.467 1683.6 552.214 1683.6 552.214 cv
1657.58 531.743 li
cp
f
1617.93 557.689 mo
1639.72 560.517 li
1647.54 559.346 li
1654.65 566.033 li
1654.65 566.033 1637.06 661.457 1632.67 694.308 cv
1628.28 727.16 1628.28 727.16 1628.28 727.16 cv
1607.64 671.637 li
1617.93 557.689 li
cp
.427451 .517647 0 rgb
f
1603.39 696.718 mo
1603.39 696.718 1602.21 741.221 1594.31 774.615 cv
1588.4 799.581 1570.49 846.711 1570.49 846.711 cv
1597.78 858.203 li
1597.78 858.203 1606.13 834.521 1617.99 793.729 cv
1625.63 767.436 1647.69 712.783 1647.69 712.783 cv
1603.39 696.718 li
.694118 .678431 .4 rgb
f
1630.07 730.112 mo
1630.07 730.112 1637.44 694.984 1627.1 677.543 cv
1616.76 660.103 1592.21 647.419 1592.21 647.419 cv
1592.21 647.419 1580.58 628.877 1592.57 657.23 cv
1605.03 686.697 1607.38 734.02 1607.38 734.02 cv
1630.07 730.112 li
cp
f
1683.58 564.003 mo
1683.58 564.003 1684.57 571.904 1699.4 580.23 cv
1714.23 588.557 1717.79 586.967 1703.92 596.288 cv
1690.06 605.608 1682.37 609.217 1670.52 624.591 cv
1658.67 639.965 1649.63 672.685 1650.55 684.965 cv
1651.47 697.245 1652.01 706.562 1639.71 723.354 cv
1627.42 740.145 1616.4 707.343 1616.4 707.343 cv
1621.84 645.984 li
1636.39 597.247 li
1683.58 564.003 li
cp
.592157 .619608 .0823529 rgb
f
1671.71 623.071 mo
1682.9 608.968 1690.53 605.292 1703.92 596.288 cv
1717.79 586.967 1714.23 588.557 1699.4 580.23 cv
1684.57 571.904 1683.58 564.003 1683.58 564.003 cv
1638.37 595.847 li
1643.76 607.205 1657.44 616.856 1671.71 623.071 cv
cp
.647059 .678431 .101961 rgb
f
1941.52 613.755 mo
1939.24 614.629 1927.77 617.46 1925.97 629.137 cv
1924.17 640.813 1910.49 646.062 1910.49 646.062 cv
1910.49 646.062 1857.34 546.387 1850.33 545.154 cv
1843.31 543.921 1849.67 530.495 1860.2 523.841 cv
1870.72 517.186 1872.9 513.997 1876.93 517.682 cv
1880.96 521.368 1941.52 613.755 1941.52 613.755 cv
cp
.835294 .862745 .286275 rgb
f
1638.94 601.228 mo
1662.42 596.057 li
1662.42 596.057 1663.4 610.547 1676.84 634.685 cv
1690.29 658.824 1653.78 748.996 1653.78 748.996 cv
1629.9 791.293 li
1629.9 791.293 1639.21 722.846 1641.91 690.772 cv
1644.6 658.698 1644.05 646.354 1639.57 638.307 cv
1635.08 630.261 1630.28 615.014 1630.28 615.014 cv
1638.94 601.228 li
cp
.654902 .760784 .176471 rgb
f
1728.02 541.592 mo
1728.02 541.592 1711.56 542.326 1698.71 531.561 cv
1685.86 520.796 1692.95 541.095 1689.76 561.853 cv
1686.56 582.611 1678.29 628.334 1671.87 646.143 cv
1665.45 663.953 1663.92 699.067 1663.92 699.067 cv
1701.59 665.432 li
1728.02 541.592 li
cp
.576471 .67451 .0980392 rgb
f
1797.96 330.256 mo
1797.96 330.256 1813.79 407.888 1802.01 467.168 cv
1790.22 526.447 1734.21 634.085 1734.21 634.085 cv
1734.21 634.085 1689.94 681.414 1679.45 700.436 cv
1668.96 719.458 1653.78 748.996 1653.78 748.996 cv
1653.78 748.996 1637.62 733.225 1651.05 710.979 cv
1664.49 688.734 1700.81 647.944 1716.08 620.463 cv
1731.34 592.982 1755 545.542 1761.36 480.319 cv
1767.73 415.097 1759.94 332.983 1759.94 332.983 cv
1797.96 330.256 li
cp
.545098 .623529 .141176 rgb
f
1851.57 464.79 mo
1832.09 449.236 li
1826.99 440.97 li
1815.65 442.967 li
1815.65 442.967 1746.96 575.426 1722 619.568 cv
1697.04 663.71 1697.04 663.71 1697.04 663.71 cv
1761.16 613.606 li
1851.57 464.79 li
cp
.619608 .705882 .172549 rgb
f
1703.57 709.668 mo
1703.57 709.668 1655.68 768.496 1642.93 806.172 cv
1630.18 843.849 1600.25 912.185 1600.25 912.185 cv
1562.28 915.941 li
1562.28 915.941 1590.15 853.504 1604.37 813.499 cv
1619.81 770.053 1655.05 690.701 1655.05 690.701 cv
1703.57 709.668 li
.890196 .87451 .592157 rgb
f
1653.85 727.347 mo
1653.85 727.347 1678.44 677.804 1701.59 665.432 cv
1724.75 653.061 1754.9 658.931 1754.9 658.931 cv
1754.9 658.931 1779.29 645.631 1745.42 669.952 cv
1710.21 695.231 1668.22 751.96 1668.22 751.96 cv
1653.85 727.347 li
cp
f
1706.64 663.145 mo
1706.64 663.145 1712.36 652.583 1735.48 651.036 cv
1758.6 649.489 1768.4 645.934 1768.4 645.934 cv
1768.4 645.934 1816.84 683.998 1828.35 699.461 cv
1839.86 714.925 1835.7 714.08 1835.7 714.08 cv
1835.7 714.08 1802.22 714.543 1798.2 716.784 cv
1794.18 719.025 1779.03 680.016 1757.42 669.126 cv
1735.8 658.237 1734.24 657.791 1723.53 660.331 cv
1712.82 662.87 1706.64 663.145 1706.64 663.145 cv
cp
.619608 .705882 .172549 rgb
f
1876.93 517.682 mo
1876.93 517.682 1868.94 511.854 1862.17 516.022 cv
1855.4 520.189 1839.8 525.91 1819.75 544.199 cv
1804.15 558.424 1764.61 599.229 1740.01 619.653 cv
1715.41 640.078 1681.66 673.595 1679.8 691.143 cv
1676.36 723.766 1727.69 670.832 1727.69 670.832 cv
1727.69 670.832 1793.57 607.213 1816.45 583 cv
1839.34 558.787 1857.05 551.554 1857.05 551.554 cv
1863.96 530.244 li
1876.93 517.682 li
cp
.752941 .784314 .215686 rgb
f
1755.54 476.794 mo
1755.54 476.794 1747.94 485.621 1729.15 482.89 cv
1710.36 480.16 1708.95 475.102 1711.74 498.644 cv
1714.52 522.186 1717.42 533.329 1713.4 562.541 cv
1709.38 591.753 1688.17 639.799 1676.85 654.067 cv
1665.52 668.335 1657.04 679.292 1652.15 710.634 cv
1647.25 741.977 1680.68 703.821 1680.68 703.821 cv
1732.98 631.299 li
1763.72 558.793 li
1755.54 476.794 li
cp
.788235 .815686 .270588 rgb
f
1713.78 559.637 mo
1717.22 532.563 1714.43 521.388 1711.74 498.644 cv
1708.95 475.101 1710.36 480.159 1729.15 482.89 cv
1747.94 485.621 1755.54 476.794 1755.54 476.794 cv
1763.37 555.34 li
1749.34 564.57 1730.31 564.472 1713.78 559.637 cv
cp
.843137 .87451 .294118 rgb
f
1473.02 823.815 mo
1528.28 839.979 li
1567.88 826.853 li
1567.88 826.853 1626.91 642.176 1640.69 575.294 cv
1654.47 508.429 1690.77 399.873 1690.16 360.347 cv
1689.56 320.818 1682.16 310.521 1675.99 297.964 cv
1675.99 297.964 1662.18 283.487 1655.08 284.627 cv
1647.95 285.769 1642.11 301.303 1631.17 317.668 cv
1620.42 333.738 1599.39 373.624 1599.42 385.744 cv
1599.42 385.962 1599.42 386.166 1599.44 386.366 cv
1600.21 397.725 1600.21 397.725 1600.21 397.725 cv
1600.21 397.725 1603 398.841 1594.84 403.279 cv
1594.48 403.477 1594.14 403.751 1593.79 404.12 cv
1593.78 404.123 li
1586.15 412.167 1580.37 459.306 1580.37 459.306 cv
1581 460.252 li
1585.14 466.362 li
1579.45 469.887 li
1568.78 484.629 li
1568.78 484.629 1565.63 516.938 1558.29 526.47 cv
1550.95 535.986 1548.53 543.678 1548.53 543.678 cv
1548.76 544.002 li
1554.66 552.599 li
1548.19 557.813 li
1548.19 557.813 1546.58 557.899 1544.47 558.816 cv
1544.43 558.839 li
1542.79 559.57 1540.83 560.808 1539.1 562.915 cv
1535.18 567.721 1537.48 578.819 1531.8 595.375 cv
1526.11 611.93 1512.66 651.633 1510.02 654.669 cv
1509.08 655.742 1509.57 657.901 1510.57 660.243 cv
1512.43 664.498 1516.02 669.35 1516.02 669.35 cv
1515.39 675.176 li
1515.39 675.176 1514.55 676.36 1507.75 679.53 cv
1502 682.221 1499.76 678.748 1496.73 689.7 cv
1496.71 689.702 li
1496.15 691.684 1495.58 694.154 1494.95 697.228 cv
1490.84 717.191 1485.34 747.797 1485.34 747.797 cv
1485.34 747.797 1485.05 756.917 1486.33 761.716 cv
1486.61 762.783 1486.97 763.648 1487.42 764.138 cv
1489.54 766.411 1484.74 770.874 1483.09 772.296 cv
1482.92 772.432 1482.78 772.548 1482.69 772.626 cv
1482.55 772.742 li
1473.02 823.815 li
.968627 .588235 .2 rgb
f
1482.69 772.626 mo
1482.78 772.548 1482.92 772.432 1483.09 772.296 cv
1484.74 770.874 1489.54 766.411 1487.42 764.138 cv
1486.97 763.648 1486.61 762.782 1486.33 761.716 cv
1485.79 759.695 1485.53 756.909 1485.41 754.359 cv
1498.71 753.594 1512.24 749.172 1522.74 743.547 cv
1586.67 709.299 1620.14 624.323 1638.74 558.865 cv
1644.17 539.75 1648.86 520.433 1653.42 501.096 cv
1661.19 468.183 1668.91 450.142 1674.46 416.836 cv
1677.53 398.39 1680.67 373.17 1682.45 354.543 cv
1683.73 341.226 1679.9 318.959 1679.8 305.539 cv
1684.87 315.859 1689.68 328.781 1690.16 360.347 cv
1690.77 399.873 1654.47 508.429 1640.69 575.294 cv
1626.91 642.176 1567.88 826.853 1567.88 826.853 cv
1528.28 839.979 li
1473.02 823.815 li
1482.55 772.742 li
1482.69 772.626 li
.941176 .545098 .160784 rgb
f
1594.84 403.279 mo
1594.48 403.477 1594.14 403.752 1593.79 404.12 cv
1596.58 403.688 1600.04 403.557 1604.32 403.839 cv
1624.88 405.234 1634.31 420.147 1634.31 420.147 cv
1634.31 420.147 1636.71 407.779 1628.23 396.874 cv
1619.14 385.176 1607.85 384.188 1599.42 385.744 cv
1599.42 385.963 1599.42 386.166 1599.44 386.366 cv
1600.21 397.725 1600.21 397.725 1600.21 397.725 cv
1600.21 397.725 1603 398.841 1594.84 403.279 cv
cp
.87451 .470588 .0431373 rgb
f
1579.45 469.887 mo
1589.55 466.17 1605.02 476.47 1612.34 483.117 cv
1619.67 489.764 1619.24 477.318 1605.6 465.427 cv
1597.36 458.254 1587.52 458.737 1581 460.252 cv
1585.14 466.361 li
1579.45 469.887 li
cp
f
1554.66 552.598 mo
1548.19 557.813 li
1562.99 554.124 1577.3 566.957 1583.61 572.201 cv
1589.93 577.445 1592.22 577.078 1595.69 569.481 cv
1599.17 561.884 1588.33 547.979 1568.05 543.411 cv
1558.86 541.334 1552.73 542.317 1548.76 544.002 cv
1554.66 552.598 li
cp
f
1544.47 558.816 mo
1545.64 558.473 1546.88 558.133 1548.19 557.813 cv
1548.19 557.813 1546.58 557.9 1544.47 558.816 cv
cp
f
1496.73 689.7 mo
1499.36 688.479 1505.84 685.969 1515.76 685.552 cv
1528.97 684.998 1539.34 691.155 1542.88 693.716 cv
1546.42 696.277 1548.22 692.86 1546.48 686.882 cv
1544.74 680.904 1542.11 674.285 1524.14 664.653 cv
1518.1 661.414 1513.71 660.303 1510.57 660.243 cv
1512.43 664.498 1516.02 669.35 1516.02 669.35 cv
1515.39 675.176 li
1515.39 675.176 1514.55 676.36 1507.75 679.531 cv
1502 682.22 1499.76 678.748 1496.73 689.7 cv
cp
f
1482.55 772.743 mo
1482.69 772.627 li
1482.8 772.467 1482.93 772.369 1483.09 772.296 cv
1488.62 768.968 1518.6 781.304 1518.6 781.304 cv
1518.6 781.304 1526.96 784.656 1521.59 770.657 cv
1516.21 756.658 1487.63 758.896 1487.63 758.896 cv
1487.63 758.896 1487.08 760.048 1486.33 761.717 cv
1482.55 772.743 li
cp
f
1495.5 822.555 mo
1495.5 822.555 1486.29 770.061 1444.02 706.446 cv
1401.75 642.831 1384.02 634.724 1366.93 625.732 cv
1349.85 616.74 1341.85 615.676 1337.28 616.41 cv
1332.7 617.144 1343.35 620.129 1347.99 629.553 cv
1352.63 638.977 1359.98 640.926 1363.83 655.17 cv
1367.68 669.414 1376.42 694.607 1380.42 704.916 cv
1384.42 715.225 1403.32 759.906 1415.53 777.502 cv
1427.74 795.098 1444.28 810.435 1444.28 810.435 cv
1489.89 826.584 li
1495.5 822.555 li
.552941 .686275 0 rgb
f
1449.86 795.896 mo
1447.09 784.128 1443.54 772.53 1439.43 761.159 cv
1431.39 738.867 1422.74 716.551 1410.87 695.975 cv
1400.24 677.534 1388.43 659.375 1374.19 643.482 cv
1364.19 632.313 1352.84 621.752 1338.99 616.242 cv
1343.8 616.024 1351.79 617.762 1366.93 625.732 cv
1384.02 634.724 1401.75 642.831 1444.02 706.446 cv
1486.29 770.061 1495.5 822.555 1495.5 822.555 cv
1489.89 826.584 li
1452.86 813.476 li
1452.47 807.561 1451.21 801.63 1449.86 795.896 cv
.533333 .662745 0 rgb
f
gsave
1442.89 801.071 mo
1439.8 784.736 1430.19 749.402 1401.53 714.15 cv
1406.81 715.729 1412.39 716.581 1418.14 716.581 cv
1419.26 716.581 1420.38 716.548 1421.49 716.484 cv
1428.29 731.023 1434 746.097 1439.43 761.159 cv
1443.54 772.53 1447.09 784.128 1449.86 795.896 cv
1450.19 797.296 1450.52 798.709 1450.82 800.13 cv
1442.89 801.071 li
clp
1401.53 714.15 mo
1450.82 714.15 li
1450.82 801.071 li
1401.53 801.071 li
cp
.552941 .654902 0 rgb
f
grestore
1450.82 800.13 mo
1450.52 798.709 1450.19 797.296 1449.86 795.896 cv
1447.09 784.128 1443.54 772.53 1439.43 761.159 cv
1434 746.097 1428.29 731.023 1421.49 716.484 cv
1430.28 715.975 1438.6 713.487 1446.01 709.474 cv
1458.13 728.071 1467.43 745.647 1474.5 761.155 cv
1472.59 761.408 1470.63 761.919 1468.62 762.729 cv
1459.66 766.331 1456.63 776.901 1457.46 787.459 cv
1455.77 790.277 1454.97 794.149 1455.49 799.108 cv
1455.5 799.262 1455.52 799.416 1455.54 799.572 cv
1450.82 800.13 li
.533333 .635294 0 rgb
f
1444.28 810.435 mo
1444.28 810.435 1437.93 726.977 1352.95 670.213 cv
1267.97 613.448 1231.25 618.558 1215.87 620.241 cv
1200.5 621.925 1161.34 631.336 1156.49 635.243 cv
1153.48 637.669 1154.84 637.281 1158.22 636.894 cv
1160.28 636.658 1163.1 636.422 1166.13 636.825 cv
1174.12 637.89 1241.67 659.124 1257.47 669.886 cv
1273.28 680.647 1313.98 710.098 1348.13 752.333 cv
1382.28 794.568 1376.05 797.133 1376.05 797.133 cv
1444.28 810.435 li
.552941 .686275 0 rgb
f
1567.87 810.947 mo
1567.87 810.947 1558.28 799.969 1547.12 798.632 cv
1535.95 797.294 1518.47 790.712 1508.13 779.857 cv
1497.78 769.001 1484.78 756.225 1468.62 762.729 cv
1452.45 769.233 1455.57 798.455 1465.92 809.31 cv
1476.26 820.166 1509.4 841.444 1529.5 835.091 cv
1549.6 828.738 1567.87 810.947 1567.87 810.947 cv
.937255 .313726 .0666667 rgb
f
1462.35 794.16 mo
1465.96 789.267 1461.6 760.868 1469.15 763.947 cv
1497.6 775.547 1480.38 802.38 1532.48 817.405 cv
1542.99 820.436 1550.86 817.018 1556.83 813.599 cv
1561.42 810.972 1564.89 808.344 1567.57 808.646 cv
1560.59 813.727 1570.9 832.621 1541.66 838.877 cv
1521.04 843.287 1476.26 820.166 1465.92 809.308 cv
1459.91 803.006 1459.6 797.882 1462.35 794.16 cv
.85098 .27451 .0431373 rgb
f
1393.22 763.722 mo
1387.35 754.003 1381.09 744.523 1374.32 735.397 cv
1358.23 713.697 1339.47 694.015 1318.59 676.875 cv
1275.35 641.396 1229.07 628.706 1173.92 632.671 cv
1168.89 633.033 1163.86 633.472 1158.84 633.952 cv
1168.77 629.571 1202 621.761 1215.87 620.241 cv
1231.25 618.558 1267.97 613.448 1352.95 670.213 cv
1437.93 726.977 1444.28 810.435 1444.28 810.435 cv
1413.67 803.545 li
1410.54 802.84 1397.79 771.407 1395.12 766.91 cv
1394.49 765.845 1393.86 764.782 1393.22 763.722 cv
.501961 .623529 0 rgb
f
1303.17 705.62 mo
1298.18 701.19 1293.35 697.091 1288.76 693.336 cv
1288.76 693.337 1288.77 693.337 1288.77 693.337 cv
1293.36 697.089 1298.19 701.187 1303.17 705.615 cv
1303.17 705.617 1303.17 705.618 1303.17 705.62 cv
.882353 .623529 .388235 rgb
f
1414 803.859 mo
1413.93 803.766 1413.84 803.659 1413.77 803.566 cv
1414.8 803.799 li
1414 803.859 li
1410.75 799.815 mo
1367.24 745.863 1326 701.11 1309.91 701.11 cv
1307.94 701.11 1306.35 701.783 1305.17 703.198 cv
1304.48 704.032 1303.81 704.837 1303.17 705.615 cv
1298.19 701.187 1293.36 697.089 1288.77 693.337 cv
1289.88 693.401 1290.99 693.435 1292.1 693.435 cv
1297.57 693.435 1303.01 692.607 1308.28 690.454 cv
1314.29 687.997 1318.7 684.084 1321.62 679.393 cv
1341.29 695.933 1359.02 714.752 1374.32 735.397 cv
1381.09 744.523 1387.35 754.003 1393.22 763.722 cv
1393.86 764.782 1394.49 765.845 1395.12 766.91 cv
1397.25 770.497 1405.79 791.214 1410.75 799.815 cv
.552941 .654902 0 rgb
f
1414.8 803.799 mo
1413.77 803.566 li
1412.76 802.311 1411.75 801.061 1410.75 799.815 cv
1405.79 791.214 1397.25 770.497 1395.12 766.91 cv
1394.49 765.845 1393.86 764.782 1393.22 763.722 cv
1387.35 754.003 1381.09 744.523 1374.32 735.397 cv
1359.02 714.752 1341.29 695.933 1321.62 679.393 cv
1326.56 671.421 1327.17 661.2 1323.9 652.056 cv
1332.9 657.263 1342.56 663.272 1352.95 670.213 cv
1420.71 715.475 1438.47 777.708 1442.89 801.071 cv
1428.96 802.722 li
1419.98 803.408 li
1414.8 803.799 li
.501961 .596078 0 rgb
f
1289.41 726.678 mo
1289.41 726.678 1265.6 750.781 1267.83 756.544 cv
1270.06 762.307 1429.7 871.174 1479.86 923.825 cv
1530.01 976.476 1554.34 1005.16 1544.27 983.385 cv
1534.2 961.61 1329.47 673.938 1305.17 703.198 cv
1280.88 732.458 1289.41 726.678 1289.41 726.678 cv
1 .458824 .160784 rgb
f
1269.88 758.665 mo
1268.67 757.609 1267.96 756.89 1267.83 756.544 cv
1267.83 756.533 1267.82 756.522 1267.82 756.511 cv
1267.82 756.522 1267.83 756.533 1267.83 756.544 cv
1267.96 756.89 1268.67 757.609 1269.88 758.665 cv
1269.88 758.665 li
1267.81 756.496 mo
1267.81 756.49 1267.81 756.484 1267.81 756.478 cv
1267.81 756.484 1267.81 756.49 1267.81 756.496 cv
1267.8 756.459 mo
1267.8 756.454 1267.8 756.449 1267.79 756.444 cv
1267.8 756.449 1267.8 756.454 1267.8 756.459 cv
1267.79 756.424 mo
1267.79 756.419 1267.78 756.414 1267.78 756.41 cv
1267.78 756.414 1267.79 756.419 1267.79 756.424 cv
1267.78 756.389 mo
1267.78 756.384 1267.77 756.38 1267.77 756.375 cv
1267.77 756.38 1267.78 756.384 1267.78 756.389 cv
1267.77 756.353 mo
1267.77 756.349 1267.76 756.345 1267.76 756.34 cv
1267.76 756.345 1267.77 756.349 1267.77 756.353 cv
1267.76 756.318 mo
1267.76 756.313 1267.76 756.309 1267.75 756.305 cv
1267.76 756.309 1267.76 756.313 1267.76 756.318 cv
1267.75 756.281 mo
1267.75 756.277 1267.75 756.273 1267.75 756.269 cv
1267.75 756.274 1267.75 756.277 1267.75 756.281 cv
1267.74 756.245 mo
1267.74 756.241 1267.74 756.237 1267.74 756.233 cv
1267.74 756.237 1267.74 756.241 1267.74 756.245 cv
1267.73 756.208 mo
1267.73 756.204 1267.73 756.201 1267.73 756.197 cv
1267.73 756.201 1267.73 756.204 1267.73 756.208 cv
1267.73 756.171 mo
1267.72 756.167 1267.72 756.164 1267.72 756.161 cv
1267.72 756.164 1267.72 756.168 1267.73 756.171 cv
1267.72 756.133 mo
1267.72 756.13 1267.72 756.127 1267.72 756.124 cv
1267.72 756.128 1267.72 756.13 1267.72 756.133 cv
1267.71 756.095 mo
1267.71 756.093 1267.71 756.09 1267.71 756.087 cv
1267.71 756.09 1267.71 756.093 1267.71 756.095 cv
1267.71 756.057 mo
1267.71 756.055 1267.71 756.052 1267.71 756.05 cv
1267.71 756.053 1267.71 756.055 1267.71 756.057 cv
1267.7 756.018 mo
1267.7 756.017 1267.7 756.015 1267.7 756.013 cv
1267.7 756.015 1267.7 756.017 1267.7 756.018 cv
1267.7 755.979 mo
1267.7 755.978 1267.7 755.978 1267.7 755.978 cv
1267.7 755.978 1267.7 755.978 1267.7 755.979 cv
1 .921569 .811765 rgb
f
1411.6 804.04 mo
1411.24 804.026 1410.9 804.026 1410.54 803.999 cv
1399.65 803.121 1387.89 802.16 1376.1 800.609 cv
1361.73 798.715 1347.32 795.929 1334.43 791.278 cv
1314.82 784.21 1298.89 769.719 1279.17 765.767 cv
1279.12 765.753 li
1279.12 765.753 1279.01 765.739 1278.8 765.739 cv
1278.8 765.739 1278.79 765.738 1278.79 765.738 cv
1274.77 762.675 1271.73 760.277 1269.88 758.665 cv
1268.67 757.609 1267.96 756.89 1267.83 756.544 cv
1267.83 756.533 1267.82 756.522 1267.82 756.511 cv
1267.82 756.506 1267.81 756.501 1267.81 756.496 cv
1267.81 756.49 1267.81 756.484 1267.81 756.478 cv
1267.8 756.471 1267.8 756.465 1267.8 756.459 cv
1267.8 756.454 1267.8 756.449 1267.79 756.444 cv
1267.79 756.437 1267.79 756.43 1267.79 756.424 cv
1267.79 756.419 1267.78 756.414 1267.78 756.41 cv
1267.78 756.403 1267.78 756.396 1267.78 756.389 cv
1267.78 756.384 1267.77 756.38 1267.77 756.375 cv
1267.77 756.368 1267.77 756.36 1267.77 756.353 cv
1267.77 756.349 1267.76 756.345 1267.76 756.34 cv
1267.76 756.333 1267.76 756.325 1267.76 756.318 cv
1267.76 756.313 1267.76 756.309 1267.75 756.305 cv
1267.75 756.297 1267.75 756.289 1267.75 756.281 cv
1267.75 756.277 1267.75 756.274 1267.75 756.269 cv
1267.74 756.261 1267.74 756.253 1267.74 756.245 cv
1267.74 756.241 1267.74 756.237 1267.74 756.233 cv
1267.74 756.225 1267.73 756.216 1267.73 756.208 cv
1267.73 756.204 1267.73 756.201 1267.73 756.197 cv
1267.73 756.189 1267.73 756.18 1267.73 756.171 cv
1267.72 756.168 1267.72 756.164 1267.72 756.161 cv
1267.72 756.152 1267.72 756.142 1267.72 756.133 cv
1267.72 756.13 1267.72 756.128 1267.72 756.124 cv
1267.72 756.115 1267.71 756.105 1267.71 756.095 cv
1267.71 756.093 1267.71 756.09 1267.71 756.087 cv
1267.71 756.077 1267.71 756.067 1267.71 756.057 cv
1267.71 756.055 1267.71 756.053 1267.71 756.05 cv
1267.71 756.04 1267.7 756.029 1267.7 756.018 cv
1267.7 756.017 1267.7 756.015 1267.7 756.013 cv
1267.7 756.002 1267.7 755.99 1267.7 755.979 cv
1267.7 755.978 1267.7 755.978 1267.7 755.978 cv
1267.38 752.912 1272.01 746.403 1277.08 740.296 cv
1284.06 751.887 1293.74 761.476 1307.54 766.53 cv
1314.49 769.077 1322.35 770.469 1330.23 770.469 cv
1345.57 770.469 1361.01 765.205 1370.18 752.93 cv
1370.34 752.708 1370.48 752.484 1370.64 752.262 cv
1384.28 767.526 1399.04 785.205 1413.99 803.859 cv
1411.6 804.04 li
1 .423529 .129412 rgb
f
1298.75 733.003 mo
1313.66 717.305 1325.14 684.166 1296.57 707.352 cv
1267.99 730.538 1258.59 766.188 1273.65 753.744 cv
1288.71 741.299 1298.75 733.003 1298.75 733.003 cv
cp
1 .509804 .239216 rgb
f
1287.63 728.743 mo
1287.63 728.743 1250.83 713.948 1242.95 711.3 cv
1235.08 708.653 1240.04 701.044 1240.04 701.044 cv
1240.04 701.044 1262.98 712.666 1269.86 716.835 cv
1276.74 721.004 1291.87 721.984 1287.63 728.743 cv
cp
.721569 .678431 0 rgb
f
1284.69 729.739 mo
1284.69 729.739 1259.31 699.251 1253.63 693.185 cv
1247.96 687.119 1255.94 682.776 1255.94 682.776 cv
1255.94 682.776 1270.61 703.888 1274.69 710.823 cv
1278.77 717.758 1291.63 725.801 1284.69 729.739 cv
cp
.545098 .639216 0 rgb
f
1286.27 732.856 mo
1286.27 732.856 1229.57 712.542 1217.42 708.958 cv
1205.28 705.373 1213.3 693.993 1213.3 693.993 cv
1213.3 693.993 1248.53 710.183 1259.08 716.044 cv
1269.62 721.904 1293.13 722.754 1286.27 732.856 cv
cp
.737255 .776471 0 rgb
f
1289.07 727.251 mo
1289.07 727.251 1274.98 693.648 1271.62 686.762 cv
1268.26 679.876 1276.62 678.81 1276.62 678.81 cv
1276.62 678.81 1283.78 701.147 1285.47 708.247 cv
1287.16 715.346 1296.38 726.187 1289.07 727.251 cv
cp
f
1289.13 728.855 mo
1289.13 728.855 1237.6 674.708 1238.66 646.917 cv
1238.86 641.776 1245.1 645.226 1245.1 645.226 cv
1245.1 645.226 1256.82 679.927 1265.27 693.503 cv
1273.72 707.079 1300 726.23 1289.13 728.855 cv
cp
f
1288.11 730.654 mo
1288.11 730.654 1250.37 701.338 1242.09 695.636 cv
1233.82 689.934 1242.68 683.333 1242.68 683.333 cv
1242.68 683.333 1265.25 704.24 1271.75 711.262 cv
1278.26 718.285 1295.78 724.729 1288.11 730.654 cv
cp
f
1763.41 644.652 mo
1763.41 644.652 1755.37 640.858 1744.71 649.998 cv
1734.05 659.139 1704.07 703.84 1697.5 728.749 cv
1690.94 753.659 1690.23 776.064 1690.23 776.064 cv
1717.38 769.754 li
1717.38 769.754 1709.7 758.471 1724.64 724.788 cv
1739.57 691.105 1748.12 663.922 1768.79 656.303 cv
1789.31 648.745 1763.41 644.652 1763.41 644.652 cv
cp
.705882 .501961 .294118 rgb
f
1558.98 823.322 mo
1558.98 823.322 1573.72 759.166 1578.19 733.419 cv
1582.66 707.671 1614.33 636.888 1643.09 626.017 cv
1671.85 615.146 1698.6 621.022 1709.89 623.122 cv
1721.18 625.223 1694.91 622.397 1663.84 638.333 cv
1632.76 654.268 1612.82 676.24 1604.54 722.152 cv
1596.26 768.065 1592.28 796.862 1594.36 809.826 cv
1596.44 822.789 1558.98 823.322 1558.98 823.322 cv
f
1632.85 632.092 mo
1632.85 632.092 1648.71 619.639 1653.99 618.402 cv
1659.27 617.164 1700.39 610.178 1711.4 605.674 cv
1722.41 601.17 1725.61 596.745 1736.24 602.079 cv
1746.87 607.413 1799.73 632.177 1796.5 641.299 cv
1793.27 650.421 1785.75 651.825 1776.04 655.141 cv
1763.8 659.32 1763.89 659.828 1762.76 657.663 cv
1761.63 655.498 1757.03 639.027 1741.64 633.283 cv
1726.24 627.539 1699.67 622.807 1681.45 623.775 cv
1663.22 624.743 1661.39 623.081 1651.34 626.258 cv
1641.29 629.434 1632.85 632.092 1632.85 632.092 cv
cp
.862745 .619608 .360784 rgb
f
1557.05 1111.04 mo
1569.47 1122.78 li
1569.47 1122.78 1539.7 1218.28 1528.97 1255.24 cv
1453.52 1222.81 li
1453.4 1222.6 1453.32 1222.3 1453.25 1221.96 cv
1408.33 1211.86 li
1365.64 1202.27 li
1360.04 1192.18 1353.13 1182.92 1348.27 1148.1 cv
1337.8 1073.12 1288.33 924.418 1288.33 924.418 cv
1282.95 908.252 1283.39 887.558 1281.38 870.734 cv
1280.68 864.832 1279.95 858.918 1279.23 852.989 cv
1275.99 826.532 1272.86 799.744 1272.86 773.246 cv
1272.86 773.204 li
1272.82 771.859 1272.81 771.009 1272.86 770.666 cv
1273.01 769.403 1273.42 768.456 1273.94 767.757 cv
1275.44 765.794 1277.92 765.698 1278.8 765.739 cv
1279.01 765.739 1279.12 765.753 1279.12 765.753 cv
1279.17 765.767 li
1298.89 769.719 1314.82 784.21 1334.43 791.278 cv
1347.32 795.929 1361.73 798.715 1376.1 800.609 cv
1387.89 802.16 1399.65 803.121 1410.54 803.999 cv
1410.9 804.026 1411.24 804.026 1411.6 804.04 cv
1419.98 803.408 li
1428.96 802.722 li
1515.89 792.417 li
1569.5 804.383 li
1564.31 857.052 li
1580.57 967.686 li
1557.05 1111.04 li
.921569 .666667 .423529 rgb
f
1455.54 799.572 mo
1455.52 799.416 1455.5 799.262 1455.49 799.108 cv
1454.97 794.149 1455.77 790.277 1457.46 787.459 cv
1457.77 791.45 1458.64 795.438 1459.94 799.049 cv
1455.54 799.572 li
.494118 .541176 0 rgb
f
1459.94 799.049 mo
1458.64 795.438 1457.77 791.45 1457.46 787.459 cv
1459.02 784.858 1461.33 783.154 1464.07 782.324 cv
1463.91 787.604 1463.65 792.401 1462.35 794.16 cv
1461.31 795.565 1460.71 797.169 1460.69 798.961 cv
1459.94 799.049 li
.870588 .266667 .0470588 rgb
f
1460.69 798.961 mo
1460.71 797.169 1461.31 795.565 1462.35 794.16 cv
1463.65 792.401 1463.91 787.604 1464.07 782.324 cv
1465.39 781.927 1466.8 781.729 1468.27 781.729 cv
1472.96 781.729 1478.26 783.74 1482.98 787.67 cv
1485.7 789.939 1488.1 792.57 1490.23 795.46 cv
1460.69 798.961 li
.792157 .235294 .0313725 rgb
f
1497.78 945.434 mo
1488.52 945.434 1482.94 937.281 1480.21 929.007 cv
1479.93 926.154 1479.32 923.344 1478.37 920.663 cv
1478.01 917.098 1478.22 913.268 1478.65 909.149 cv
1478.92 906.351 1479.3 903.427 1479.67 900.352 cv
1480.36 894.47 1481 888.059 1480.8 881.063 cv
1480.76 880.047 1480.71 879.03 1480.65 878.002 cv
1480.41 874.5 1479.95 870.862 1479.16 867.069 cv
1478.02 861.539 1473.43 850.851 1468.58 839.072 cv
1462.86 825.159 1456.76 809.747 1455.54 799.572 cv
1459.94 799.049 li
1460.69 798.961 li
1490.23 795.46 li
1499.68 808.294 1503.94 826.252 1508.87 840.485 cv
1513.39 853.54 1516.76 866.668 1517.51 881.311 cv
1518.22 895.278 1517.92 909.501 1515.12 923.234 cv
1513.2 932.695 1510.57 945.036 1498.29 945.426 cv
1498.12 945.432 1497.95 945.434 1497.78 945.434 cv
.854902 .568627 .309804 rgb
f
1717.99 878.377 mo
1717.99 878.377 1714.55 915.361 1710.47 959.178 cv
1709.57 969.072 1708.61 979.31 1707.66 989.547 cv
1707.47 991.66 1707.25 993.774 1707.01 995.873 cv
1701.24 1048.9 1685.44 1096.45 1677.77 1138.63 cv
1674.31 1157.63 1668.51 1183.23 1666.15 1191.16 cv
1528.78 1255.31 li
1530.08 1241.53 1536.46 1179.4 1538.55 1154.33 cv
1542.75 1103.96 1546.15 1067.47 1548.84 1041.15 cv
1551.64 1013.74 1553.66 997.328 1554.99 987.722 cv
1555.07 987.159 1555.15 986.61 1555.22 986.089 cv
1556.47 977.333 1557.05 975.014 1557.05 975.014 cv
1717.91 878.418 li
1717.99 878.377 li
cp
.890196 .631373 .384314 rgb
f
1524.54 837.843 mo
1530.2 873.444 1536.45 908.018 1537.02 944.189 cv
1537.93 999.883 1540.36 1010.17 1545.03 1027.43 cv
1545.51 1029.22 1545.94 1043.76 1549.22 1040.88 cv
1578.76 1014.95 1690.66 941.119 1702.02 915.352 cv
1714.63 886.737 1712.61 901.553 1716.92 883.365 cv
1718.74 875.676 1723.9 840.519 1727.85 818.505 cv
1729.96 806.674 1731.68 797.96 1731.68 797.96 cv
1733.87 772.585 li
1733.87 772.585 1578.62 828.776 1567.15 835.311 cv
1561.93 838.287 1552.27 836.862 1543.46 835.437 cv
1532.93 833.735 1523.62 832.032 1524.54 837.843 cv
.882353 .643137 .411765 rgb
f
1733.85 772.594 mo
1733.85 772.591 1733.86 772.589 1733.86 772.587 cv
1733.87 772.586 1733.87 772.585 1733.87 772.585 cv
1733.87 772.585 1733.86 772.588 1733.85 772.594 cv
.960784 .87451 .74902 rgb
f
1566.41 835.692 mo
1567.26 827.059 li
1567.88 826.853 li
1567.88 826.853 1568.35 825.377 1569.22 822.64 cv
1572.54 822.284 1576.29 821.745 1579.87 820.927 cv
1578.56 824.649 1577.3 828.164 1576.16 831.329 cv
1571.6 833.191 1568.45 834.57 1567.15 835.311 cv
1566.92 835.447 1566.67 835.574 1566.41 835.692 cv
1643.04 805.854 mo
1644.66 801.114 1646.84 796.042 1649.4 790.801 cv
1690.25 781.885 1733.16 772.737 1733.86 772.587 cv
1733.86 772.589 1733.85 772.591 1733.85 772.594 cv
1732.62 773.037 1686.54 789.723 1643.04 805.854 cv
.67451 .392157 .196078 rgb
f
1576.16 831.329 mo
1577.3 828.164 1578.56 824.649 1579.87 820.927 cv
1588.05 819.056 1595.3 815.73 1594.36 809.826 cv
1594.05 807.939 1593.88 805.719 1593.83 803.158 cv
1598.41 802.102 1603.7 800.902 1609.5 799.602 cv
1607.63 804.511 1605.9 809.184 1604.37 813.499 cv
1603.46 816.062 1602.49 818.715 1601.48 821.441 cv
1591.16 825.372 1582.36 828.797 1576.16 831.329 cv
.666667 .592157 .298039 rgb
f
1601.48 821.441 mo
1602.49 818.715 1603.46 816.062 1604.37 813.499 cv
1605.9 809.184 1607.63 804.511 1609.5 799.602 cv
1621.33 796.952 1635.24 793.89 1649.4 790.801 cv
1646.84 796.042 1644.66 801.114 1643.04 805.854 cv
1628.27 811.334 1613.8 816.747 1601.48 821.441 cv
.854902 .764706 .443137 rgb
f
1567.26 827.059 mo
1567.68 822.796 li
1568.18 822.748 1568.7 822.696 1569.22 822.64 cv
1568.35 825.377 1567.88 826.853 1567.88 826.853 cv
1567.26 827.059 li
.905882 .478431 .121569 rgb
f
1567.68 822.796 mo
1569.08 808.592 li
1571.89 808.477 1574.61 808.058 1577.16 807.258 cv
1579.31 806.581 1585.34 805.118 1593.83 803.158 cv
1593.88 805.719 1594.05 807.939 1594.36 809.826 cv
1595.3 815.73 1588.05 819.056 1579.87 820.927 cv
1576.29 821.745 1572.54 822.284 1569.22 822.64 cv
1568.7 822.696 1568.18 822.748 1567.68 822.796 cv
.678431 .439216 .219608 rgb
f
1525.03 840.888 mo
1521.35 825.172 1517.13 809.434 1514.45 793.377 cv
1514.36 792.822 1514.64 792.576 1515.25 792.576 cv
1517.7 792.576 1525.44 796.588 1535.22 800.6 cv
1545 804.613 1556.82 808.625 1567.44 808.625 cv
1567.99 808.625 1568.54 808.614 1569.08 808.592 cv
1567.68 822.796 li
1567.26 827.059 li
1566.41 835.692 li
1564.25 836.687 1561.46 837.059 1558.35 837.059 cv
1553.76 837.059 1548.48 836.248 1543.46 835.437 cv
1538.45 834.627 1533.71 833.816 1530.22 833.816 cv
1526.38 833.816 1524.06 834.798 1524.54 837.843 cv
1524.7 838.86 1524.86 839.873 1525.03 840.888 cv
.886274 .584314 .317647 rgb
f
1537.72 847.407 mo
1531.06 847.407 1526.07 846.302 1525.4 842.499 cv
1525.28 841.963 1525.15 841.425 1525.03 840.888 cv
1524.86 839.873 1524.7 838.86 1524.54 837.843 cv
1524.06 834.798 1526.38 833.816 1530.22 833.816 cv
1533.71 833.816 1538.45 834.627 1543.46 835.437 cv
1548.48 836.248 1553.76 837.059 1558.35 837.059 cv
1561.46 837.059 1564.25 836.687 1566.41 835.692 cv
1566.67 835.574 1566.92 835.447 1567.15 835.311 cv
1568.45 834.57 1571.6 833.191 1576.16 831.329 cv
1582.36 828.797 1591.16 825.372 1601.48 821.441 cv
1613.8 816.747 1628.27 811.334 1643.04 805.854 cv
1686.54 789.723 1732.62 773.037 1733.85 772.594 cv
1733.86 772.588 1733.87 772.585 1733.87 772.585 cv
1733.87 772.585 li
1731.68 797.96 li
1731.68 797.96 1729.96 806.674 1727.85 818.505 cv
1727.85 818.505 li
1722.95 814.355 1716.4 812.711 1708.85 812.711 cv
1684.62 812.711 1650.08 829.666 1626.82 835.14 cv
1606.92 839.822 1580.51 843.756 1557.53 845.91 cv
1550.85 846.536 1543.63 847.407 1537.72 847.407 cv
.847059 .560784 .309804 rgb
f
1724.04 760.082 mo
1724.04 760.082 1745.55 766.238 1746.37 775.248 cv
1746.85 780.479 1744.19 788.138 1745.65 797.288 cv
1747.12 806.439 1742.55 807.173 1731.87 808.885 cv
1721.19 810.598 1712.89 797.851 1670.62 817.146 cv
1644.88 828.894 1615.32 832.164 1587.5 835.31 cv
1574.76 836.751 1562.14 837.877 1549.68 840.52 cv
1541.9 842.17 1526.89 844.151 1527.84 832.137 cv
1528.11 828.758 1531.11 826.102 1531.68 822.575 cv
1533.1 813.811 1530.73 805.824 1524.5 799.6 cv
1522.5 797.596 1513.31 796.96 1513.97 792.899 cv
1514.77 788.079 1583.14 794.984 1627.89 788.83 cv
1660.61 784.332 1687.68 767.478 1700.13 767.046 cv
1712.57 766.614 1724.04 760.082 1724.04 760.082 cv
cp
.921569 .686275 .454902 rgb
f
1408.33 1211.86 mo
1408.33 1211.86 li
1365.64 1202.27 li
1360.04 1192.18 1353.13 1182.92 1348.27 1148.1 cv
1337.8 1073.12 1288.33 924.418 1288.33 924.418 cv
1282.95 908.252 1283.39 887.558 1281.38 870.734 cv
1280.68 864.832 1279.95 858.918 1279.23 852.989 cv
1280.97 853.676 li
1280.97 853.676 1281.57 859.124 1282.45 867.179 cv
1286.57 855.625 li
1309.73 802.544 li
1330.58 803.793 li
1323.06 817.914 li
1330.32 819.396 1341.31 821.317 1341.31 821.317 cv
1318.05 862.335 li
1323.47 856.393 1327.12 852.4 1327.12 852.4 cv
1332.65 853.827 li
1340.07 844.358 1347.02 834.491 1354.98 825.475 cv
1353.81 825.352 1352.8 825.05 1352.4 823.911 cv
1351.78 822.195 1354.68 819.382 1355.77 818.449 cv
1360.21 814.607 1365.19 811.382 1369.46 807.374 cv
1371.62 805.344 1373.78 802.873 1376.1 800.609 cv
1387.89 802.16 1399.65 803.121 1410.54 803.999 cv
1410.9 804.026 1411.24 804.026 1411.6 804.04 cv
1419.98 803.408 li
1420.3 806.469 1422.26 808.775 1424.24 814.085 cv
1426.08 818.984 1423.95 823.938 1422.48 828.768 cv
1420.52 835.26 1418.28 842.066 1416.77 848.571 cv
1416.2 851.013 1411.02 869.237 1409.5 869.636 cv
1409.41 869.659 1409.32 869.67 1409.23 869.67 cv
1408.7 869.67 1408.17 869.253 1407.7 868.593 cv
1407.06 870.802 1406.18 873.286 1405.18 875.797 cv
1408.17 873.794 1411.46 872.161 1415.04 871.008 cv
1415.19 870.967 1415.33 870.912 1415.48 870.87 cv
1420.09 869.439 1424.58 868.749 1428.86 868.749 cv
1444.97 868.749 1458.22 878.518 1464.69 895.27 cv
1465.86 898.317 1466.68 901.94 1467.18 905.892 cv
1472.59 909.61 1476.3 914.831 1478.37 920.663 cv
1478.44 921.323 1478.52 921.973 1478.63 922.615 cv
1478.97 924.657 1479.49 926.836 1480.21 929.007 cv
1480.55 932.544 1480.37 936.147 1479.69 939.65 cv
1479.79 939.499 1479.9 939.348 1479.98 939.211 cv
1480.5 938.467 1480.9 938.136 1481.19 938.136 cv
1483.48 938.136 1479.25 958.78 1479.25 958.78 cv
1451.49 1057.52 1434.39 1092.98 1412.9 1180.83 cv
1410.72 1189.76 1410.34 1201.55 1408.33 1211.86 cv
.854902 .568627 .309804 rgb
f
1480.21 929.007 mo
1479.49 926.836 1478.97 924.657 1478.63 922.615 cv
1478.52 921.973 1478.44 921.323 1478.37 920.663 cv
1479.32 923.344 1479.93 926.154 1480.21 929.007 cv
.796078 .482353 .227451 rgb
f
1450.86 759.32 mo
1450.86 759.32 1473.22 757.297 1483.6 783.008 cv
1493.98 808.719 1505.4 831.135 1505.23 859.322 cv
1505.06 887.508 1497.97 926.19 1480.06 926.716 cv
1462.15 927.242 1454.74 915.134 1453.17 900.523 cv
1451.61 885.912 1462.77 867.697 1458.86 843.295 cv
1456.72 829.978 1434.18 787.974 1437.32 772.442 cv
1439.94 759.507 1450.86 759.32 1450.86 759.32 cv
cp
.984314 .333333 .0745098 rgb
f
1472.47 910.294 mo
1490.7 903.122 1499.64 883.084 1495.72 864.425 cv
1492.98 851.396 1493.55 837.86 1490.02 824.998 cv
1487.88 817.159 1483.76 800.384 1483.7 800.2 cv
1479.58 786.561 1475.54 773.741 1464.91 762.194 cv
1471.44 765.164 1478.8 771.116 1483.6 783.008 cv
1493.98 808.719 1505.4 831.135 1505.23 859.322 cv
1505.06 887.508 1497.97 926.19 1480.06 926.716 cv
1467.61 927.082 1460.24 921.331 1456.37 912.884 cv
1461.7 913.167 1467.13 912.394 1472.47 910.294 cv
cp
.913725 .301961 .054902 rgb
f
1274.16 805.006 mo
1271.43 803.981 1263.64 800.945 1262.67 799.406 cv
1261.49 797.537 1259.81 790.747 1259.79 786.927 cv
1259.76 783.107 1266.67 769.351 1269.08 766.023 cv
1269.69 765.178 1270.31 764.862 1270.9 764.862 cv
1272.62 764.862 1274.04 767.581 1274.04 767.581 cv
1274.04 767.581 1274 767.627 1273.95 767.754 cv
1273.95 767.755 1273.94 767.756 1273.94 767.757 cv
1273.42 768.456 1273.01 769.403 1272.86 770.666 cv
1272.81 771.009 1272.82 771.859 1272.86 773.204 cv
1272.86 773.246 li
1272.86 773.249 1272.86 773.251 1272.86 773.254 cv
1272.82 773.571 1272.79 773.906 1272.75 774.258 cv
1272.59 775.947 1272.73 779.382 1273.01 783.375 cv
1273.21 790.575 1273.61 797.788 1274.16 805.006 cv
.839216 .54902 .298039 rgb
f
1275.1 805.354 mo
1275.1 805.354 1274.74 805.227 1274.16 805.006 cv
1273.61 797.788 1273.21 790.575 1273.01 783.375 cv
1273.66 792.808 1275.1 805.354 1275.1 805.354 cv
1272.86 773.254 mo
1272.86 773.251 1272.86 773.249 1272.86 773.246 cv
1272.86 773.204 li
1272.82 771.859 1272.81 771.009 1272.86 770.666 cv
1273.01 769.403 1273.42 768.456 1273.94 767.757 cv
1273.94 767.756 1273.95 767.755 1273.95 767.754 cv
1273.75 768.185 1273.28 769.552 1272.86 773.254 cv
.87451 .560784 .294118 rgb
f
1710.47 959.178 mo
1709.57 969.072 1708.61 979.31 1707.66 989.547 cv
1707.47 991.66 1707.25 993.774 1707.01 995.873 cv
1705.52 997.506 li
1705.52 997.506 1655.55 995.269 1612.83 992.662 cv
1585.91 991.015 1561.85 989.218 1554.99 987.722 cv
1553.01 987.296 1552.47 986.898 1553.65 986.528 cv
1554.11 986.391 1554.63 986.24 1555.22 986.089 cv
1569.41 982.48 1619.28 976.661 1638.99 973.107 cv
1639.54 972.997 1640.06 972.901 1640.57 972.805 cv
1658.63 969.374 1704.98 960.262 1710.47 959.178 cv
cp
.811765 .580392 .360784 rgb
f
1370.89 840.941 mo
1371.06 844.032 1372.67 842.962 1371.9 846.299 cv
1370.49 852.451 1366.25 862.261 1363.19 867.737 cv
1356.62 879.507 1349.56 891.292 1341.46 902.077 cv
1324.82 924.227 1303.91 943.651 1280.7 958.736 cv
1268.25 966.832 1254.85 973.556 1240.71 978.195 cv
1225.17 983.294 1208.33 985.224 1192.02 983.504 cv
1173.13 981.511 1148.92 962.893 1151.28 940.262 cv
1153.7 917.225 1173.36 902.119 1190.49 895.394 cv
1208.02 888.514 1247.32 882.779 1279.5 852.542 cv
1296.73 836.358 1308.15 815.296 1324.87 798.659 cv
1323.73 799.793 1324.62 807.937 1324.82 809.538 cv
1325.23 812.96 1326.05 815.583 1329.94 815.588 cv
1337.7 815.596 1346.49 800.306 1353.69 810.047 cv
1357.48 815.181 1351.74 822.169 1354.6 827.653 cv
1354.97 828.365 1364.53 821.216 1365.27 820.671 cv
1368.28 818.473 1371.29 817.411 1372.93 821.414 cv
1375.41 827.44 1370.56 834.837 1370.89 840.941 cv
cp
.584314 .368627 .658824 rgb
f
1397.72 754.331 mo
1397.79 754.167 1397.82 754.004 1397.82 753.847 cv
1397.81 753.69 li
1397.77 753.418 1397.64 753.145 1397.42 752.887 cv
1397.19 752.635 li
1397.1 752.547 1397 752.458 1396.9 752.377 cv
1396.86 752.343 li
1396.76 752.275 1396.66 752.2 1396.55 752.125 cv
1396.42 752.037 1396.28 751.949 1396.13 751.86 cv
1396 751.786 1395.87 751.718 1395.74 751.643 cv
1395.58 751.562 1395.42 751.487 1395.25 751.399 cv
1390.92 749.362 1382.51 748.076 1380.75 748.107 cv
1363.24 748.418 1368.78 773.817 1352.82 773.805 cv
1344.14 773.801 1338.71 781.98 1333.09 787.251 cv
1328.83 791.256 1323.84 794.486 1319.4 798.319 cv
1318.32 799.258 1315.42 802.067 1316.03 803.79 cv
1317.03 806.623 1321.78 804.3 1323.47 806.662 cv
1325.31 809.246 1322.96 812.835 1323.64 815.674 cv
1326.18 826.346 1340.3 813.284 1345.31 817.957 cv
1349.49 821.852 1345.71 831.197 1350.2 835.104 cv
1356.73 840.776 1361.13 820.328 1368.02 825.112 cv
1369.78 826.328 1367.76 834.892 1367.92 836.988 cv
1368.13 839.775 1370.33 850.243 1373.14 849.505 cv
1374.66 849.105 1379.83 830.893 1380.4 828.443 cv
1381.92 821.94 1384.16 815.134 1386.12 808.644 cv
1387.58 803.81 1389.71 798.853 1387.87 793.957 cv
1384.54 785.044 1381.27 784.594 1385.75 774.78 cv
1389.01 767.606 1394.86 761.259 1397.72 754.331 cv
cp
.603922 .74902 0 rgb
f
1165.03 837.531 mo
1139.13 839.957 li
1155.23 945.878 li
1190.87 946.404 li
1178.12 852.666 li
1165.03 837.531 li
cp
.211765 .690196 .929412 rgb
f
1152.91 810.868 mo
1139.13 839.957 li
1160.19 838.923 li
1152.91 810.868 li
cp
f
1238.95 829.664 mo
1211.7 806.257 li
1152.91 810.868 li
1159.83 839.529 li
1238.95 829.664 li
cp
.803922 .921569 .984314 rgb
f
1160.19 838.923 mo
1183.68 955.538 li
1257.33 936.841 li
1238.95 829.664 li
1160.19 838.923 li
cp
.584314 .870588 .996078 rgb
f
1164.11 858.374 mo
1170.29 889.169 li
1246.77 875.255 li
1242.2 848.578 li
1164.11 858.374 li
cp
.266667 .760784 .952941 rgb
f
1211.7 806.257 mo
1212.46 797.206 li
1153.65 801.92 li
1152.86 811.382 li
1211.7 806.257 li
cp
.584314 .870588 .996078 rgb
f
1212.46 797.206 mo
1210.2 796.421 li
1152.5 800.917 li
1153.65 801.92 li
1212.46 797.206 li
cp
.211765 .690196 .929412 rgb
f
1152.5 800.917 mo
1151.8 813.207 li
1152.86 811.382 li
1153.65 801.92 li
1152.5 800.917 li
cp
f
1178.34 616.688 mo
1178.12 619.021 1175.68 630.086 1184.95 636.6 cv
1194.23 643.113 1192.92 657.109 1192.92 657.109 cv
1192.92 657.109 1084.61 660.403 1080.57 665.908 cv
1076.52 671.412 1067.69 660.234 1066.44 648.353 cv
1065.2 636.472 1063.38 633.244 1068.27 631.347 cv
1073.15 629.45 1178.34 616.688 1178.34 616.688 cv
cp
.835294 .862745 .286275 rgb
f
1038.85 871.501 mo
1044.39 849.117 li
1044.39 849.117 1057.27 854.439 1083.74 853.148 cv
1110.22 851.856 1172.21 921.605 1172.21 921.605 cv
1198.42 960.132 li
1198.42 960.132 1143.53 923.005 1117.1 907.046 cv
1090.67 891.086 1079.82 886.308 1071 886.739 cv
1062.17 887.17 1047.02 884.813 1047.02 884.813 cv
1038.85 871.501 li
cp
.654902 .760784 .176471 rgb
f
1025.47 769.545 mo
1025.47 769.545 1019.1 784.009 1004.38 790.477 cv
989.66 796.945 1010.13 799.485 1026.62 811.064 cv
1043.1 822.643 1078.9 849.202 1091.48 862.299 cv
1104.06 875.396 1133.6 891.645 1133.6 891.645 cv
1120.7 844.951 li
1025.47 769.545 li
cp
.576471 .67451 .0980392 rgb
f
873.529 619.509 mo
873.529 619.509 947.01 638.922 992.962 674.273 cv
1038.91 709.625 1107.63 803.573 1107.63 803.573 cv
1107.63 803.573 1129.49 861.771 1141.38 878.882 cv
1153.27 895.993 1172.21 921.605 1172.21 921.605 cv
1172.21 921.605 1151.77 928.794 1138.37 907.777 cv
1124.96 886.76 1105.34 838.182 1088.2 813.366 cv
1071.07 788.55 1040.35 748.033 986.979 714.812 cv
933.612 681.592 859.701 653.354 859.701 653.354 cv
873.529 619.509 li
cp
.545098 .623529 .141176 rgb
f
1012 630.647 mo
990.345 640.778 li
981.067 641.649 li
977.96 652.247 li
977.96 652.247 1062.62 767.659 1089.95 807.895 cv
1117.29 848.132 1117.29 848.132 1117.29 848.132 cv
1101.49 771.687 li
1012 630.647 li
cp
.619608 .705882 .172549 rgb
f
1159.58 862.072 mo
1159.58 862.072 1189.78 928.267 1216.75 955.256 cv
1243.72 982.246 1289.74 1037.05 1289.74 1037.05 cv
1276.82 1071.3 li
1276.82 1071.3 1234.99 1020.77 1206.65 991.528 cv
1175.86 959.767 1122.63 895.719 1122.63 895.719 cv
1159.58 862.072 li
cp
.890196 .87451 .592157 rgb
f
1153.63 912.34 mo
1153.63 912.34 1121.49 870.122 1120.7 844.951 cv
1119.92 819.78 1137.79 796.351 1137.79 796.351 cv
1137.79 796.351 1138.39 769.118 1144.89 808.588 cv
1151.65 849.611 1180.9 910.456 1180.9 910.456 cv
1153.63 912.34 li
cp
f
1120.89 839.635 mo
1120.89 839.635 1114.24 830.229 1122.74 809.69 cv
1131.25 789.152 1132.36 779.217 1132.36 779.217 cv
1132.36 779.217 1185.69 753.767 1203.89 750.447 cv
1222.08 747.127 1219.58 750.344 1219.58 750.344 cv
1219.58 750.344 1205.74 779.326 1205.95 783.738 cv
1206.17 788.15 1166.19 784.572 1147.63 798.525 cv
1129.07 812.478 1128.02 813.635 1125.65 823.923 cv
1123.28 834.211 1120.89 839.635 1120.89 839.635 cv
cp
.619608 .705882 .172549 rgb
f
1068.27 631.347 mo
1068.27 631.347 1059.86 635.738 1060.56 643.333 cv
1061.26 650.928 1059.55 666.767 1066.74 691.792 cv
1072.33 711.256 1090.59 762.609 1097.69 792.448 cv
1104.78 822.287 1119.24 865.564 1133.54 874.621 cv
1160.13 891.457 1136.45 824.808 1136.45 824.808 cv
1136.45 824.808 1109.78 741.107 1098.7 711.13 cv
1087.61 681.154 1088.93 662.846 1088.93 662.846 cv
1073.55 647.84 li
1068.27 631.347 li
cp
.752941 .784314 .215686 rgb
f
981.472 718.317 mo
981.472 718.317 985.827 728.609 975.485 743.603 cv
965.144 758.596 960.196 757.656 981.622 765.276 cv
1003.05 772.896 1013.86 775.147 1037.26 791.03 cv
1060.67 806.913 1092.96 845.582 1100.41 861.392 cv
1107.85 877.201 1111.74 893.159 1136.61 910.7 cv
1161.47 928.241 1144.82 879.258 1144.82 879.258 cv
1104.71 803.448 li
1055.45 746.174 li
981.472 718.317 li
cp
.788235 .815686 .270588 rgb
f
1034.93 789.465 mo
1013.12 774.991 1002.32 772.637 981.622 765.276 cv
960.195 757.656 965.144 758.596 975.485 743.603 cv
985.827 728.609 981.472 718.317 981.472 718.317 cv
1052.33 745.001 li
1054.3 760.99 1046.12 777.311 1034.93 789.465 cv
cp
.843137 .87451 .294118 rgb
f
1293.98 930.68 mo
1336.49 935.691 li
1339.45 909.016 li
1318.74 895.642 li
1300.43 923.215 li
1293.98 930.68 li
cp
.627451 .109804 0 rgb
f
1422.06 881.589 mo
1453.98 891.136 1449.96 940.327 1417.53 945.614 cv
1365.82 954.044 1383.08 869.937 1422.06 881.589 cv
cp
1 .882353 .0392157 rgb
f
1378.68 850.88 mo
1378.83 850.834 1378.97 850.788 1379.12 850.743 cv
1401.08 843.927 1420.14 853.942 1428.32 875.146 cv
1434.77 891.859 1430.7 925.62 1419.28 939.514 cv
1416.12 943.367 1413.34 944.522 1408.77 945.977 cv
1402.46 947.987 1394.82 951.739 1388.34 952.783 cv
1372.76 955.293 1357.22 942.331 1351.35 929.051 cv
1346.64 918.371 1344.37 905.427 1346.34 893.853 cv
1349.48 875.433 1360.03 856.899 1378.68 850.88 cv
cp
.611765 .701961 .156863 rgb
f
1280.53 796.308 mo
1282.18 797.199 1304.94 801.19 1304.94 801.19 cv
1255.3 888.74 li
1241.72 894.178 li
1277.32 807.777 li
1280.53 796.308 li
cp
.360784 .631373 0 rgb
f
1235.66 892.717 mo
1237.22 890.931 1290.76 832.266 1290.76 832.266 cv
1303.58 835.591 li
1245.86 909.609 li
1235.66 892.717 li
cp
f
1253.45 914.865 mo
1253.24 912.504 1244.61 833.554 1244.61 833.554 cv
1232.29 828.674 li
1244.15 917.455 li
1253.45 914.865 li
cp
f
1211.74 921.465 mo
1213.87 920.418 1284.32 883.749 1284.32 883.749 cv
1284.4 870.5 li
1205.96 913.745 li
1211.74 921.465 li
cp
f
1273.37 782.415 mo
1250.2 835.497 li
1233.08 883.512 li
1231.41 911.609 li
1242.11 902.059 li
1268.15 832.636 li
1294.21 783.671 li
1273.37 782.415 li
cp
.47451 .698039 .0352941 rgb
f
1292.16 880.327 mo
1295.6 880.805 1298.52 882.094 1300.23 884.576 cv
1308.26 896.284 1298.44 914.916 1294.1 926.35 cv
1280.13 937.982 li
1280.13 937.982 1257.65 940.358 1257.45 940.379 cv
1255.41 940.594 1247.32 927.98 1246.62 925.986 cv
1243.23 916.388 1246.44 907.845 1252.17 899.816 cv
1256.25 894.102 1263.12 887.8 1269.45 884.681 cv
1274.87 882.028 1284.73 879.296 1292.16 880.327 cv
cp
.980392 .360784 .235294 rgb
f
1393.94 898.357 mo
1393.61 898.126 1392.58 897.684 1391.23 897.176 cv
1387.14 895.645 1380.07 893.521 1380.16 894.801 cv
1379.48 884.901 1376.73 879.218 1367.33 876.811 cv
1363.85 875.919 1360.21 875.963 1357.53 873.235 cv
1354.03 869.677 1353.68 863.872 1348.61 861.769 cv
1343.48 859.64 1339.6 863.227 1335.97 866.435 cv
1329.66 872.007 1323.06 865.727 1315.65 867.494 cv
1294.89 872.443 1289.13 897.806 1286.17 915.769 cv
1283.96 929.223 1281.62 942.682 1280.4 956.275 cv
1279.78 963.253 1278.61 970.205 1278.59 977.229 cv
1278.57 982.086 1280.32 999.847 1285.89 1001.58 cv
1288.42 1002.36 1293.53 1001.56 1294.62 1004.68 cv
1295.89 1008.31 1302.57 1011.92 1305.97 1013.37 cv
1311.14 1015.58 1315.64 1011.11 1320.07 1012.82 cv
1324.67 1014.59 1325.74 1017.56 1331.06 1017.77 cv
1342.85 1018.23 1372.1 985.995 1382.88 970.022 cv
1392.64 955.563 1403.13 939.801 1404.27 921.883 cv
1404.83 913.121 1401.33 903.501 1393.94 898.357 cv
cp
1 .811765 0 rgb
f
1338.53 880.136 mo
1335.31 883.008 1346.82 884.497 1346.26 885.391 cv
1344.05 888.924 1353.26 891.889 1355.03 894.175 cv
1356.17 895.646 1355.82 898.957 1357.33 900.102 cv
1357.39 900.149 1360.97 902.357 1360.64 900.866 cv
1359.56 896.101 1362.5 894.002 1366.7 893.384 cv
1368.84 893.069 1377.55 895.953 1371.98 890.391 cv
1369.09 887.514 1364.98 891.679 1363.96 885.098 cv
1362.92 878.371 1369.09 870.858 1368.76 863.368 cv
1368.51 857.873 1368.7 853.818 1364.79 849.725 cv
1357.4 841.988 1357.99 853.757 1358.49 859.008 cv
1359.01 864.392 1357.44 870.557 1356.45 875.849 cv
1356.35 876.336 1350.88 891.806 1349.12 885.708 cv
1348.06 882.027 1343.23 875.946 1338.53 880.136 cv
cp
.482353 .643137 0 rgb
f
1385.18 900.274 mo
1376.71 901.266 1367.59 918.499 1366.51 924.473 cv
1363.57 940.829 1356.74 956.028 1348.02 970.088 cv
1343.76 976.964 1339.11 983.588 1334.34 990.118 cv
1331.72 993.705 1327.42 1002.42 1323.14 1004.11 cv
1322.48 1001.46 1335.79 977.457 1337.05 974.992 cv
1339.55 970.076 1342.49 965.582 1345.19 960.795 cv
1350.33 951.706 1358.1 939.387 1358.56 928.804 cv
1359.06 917.286 1354.37 913.243 1344.2 908.196 cv
1335.44 903.848 1324.53 912.868 1321.2 920.077 cv
1316.97 929.233 1314.77 938.894 1311.53 948.396 cv
1308.6 956.97 1305.99 980.768 1300.71 988.211 cv
1297.36 992.931 1300.57 973.564 1300.71 972.485 cv
1301.46 966.87 1301.59 958.801 1302.78 953.226 cv
1305.97 938.243 1309.22 912.198 1324.36 903.467 cv
1327.73 901.526 1325.46 897.487 1324.91 894.766 cv
1324.09 890.733 1331.11 892.056 1329.87 888.065 cv
1322.62 864.783 1304.91 871.99 1299.85 880.043 cv
1291.88 892.729 1285.29 915.97 1284.36 930.59 cv
1283.53 943.648 1280.71 953.782 1280.68 970.351 cv
1280.67 978.274 1277.22 998.595 1289.39 1000.5 cv
1295.12 1001.39 1296.23 1005.04 1300 1008.34 cv
1303.69 1011.56 1307.52 1013.71 1318.04 1008.36 cv
1320.49 1007.11 1325.28 1013.98 1327.62 1014.89 cv
1342.53 1020.7 1366.34 986.572 1373.25 977.335 cv
1383.88 963.131 1397.5 942.564 1401.78 925.672 cv
1403.47 918.994 1401.15 898.404 1385.18 900.274 cv
cp
1 .831373 0 rgb
f
1387.72 936.296 mo
1387.72 936.296 1404.98 944.245 1423.56 939.014 cv
1433.76 936.139 1440.61 923.388 1443.62 919.085 cv
1448.25 912.455 1442.88 938.65 1442.88 938.65 cv
1415.12 1037.39 1398.02 1072.84 1376.53 1160.71 cv
1373.51 1173.09 1373.94 1190.95 1368.72 1202.78 cv
1361.79 1218.46 1358.54 1216.03 1344.71 1225.87 cv
1338.07 1230.6 1334.35 1240.65 1320.21 1242.69 cv
1327.15 1228.92 li
1329.14 1171.55 li
1343.85 1100.02 li
1371.57 1047.04 li
1371.57 1047.04 1370.54 1004.57 1369.65 1000.31 cv
1365.04 978.226 1387.72 936.296 1387.72 936.296 cv
cp
.929412 .694118 .47451 rgb
f
1191.68 896.051 mo
1201.2 885.257 1211.7 880.768 1224.13 881.204 cv
1246.4 881.986 1259.38 898.516 1262.14 907.842 cv
1264.91 917.169 1262.94 936.293 1251.45 947.122 cv
1234 963.555 1215.91 962.72 1198.48 951.578 cv
1179.17 939.24 1177.96 911.615 1191.68 896.051 cv
cp
1 .517647 0 rgb
f
1243.88 899.873 mo
1244.07 900.351 1246.03 898.658 1246.18 898.381 cv
1246.51 897.757 1246.55 896.974 1246.14 896.372 cv
1245.77 895.814 1245.03 895.51 1244.36 895.566 cv
1243.69 895.621 1243.23 896.284 1242.52 895.887 cv
1241.97 895.58 1241.54 895.086 1240.86 895.115 cv
1240.13 895.146 1239.41 895.765 1239.03 896.335 cv
1238.06 897.764 1238.07 899.878 1238.84 901.387 cv
1239.52 902.722 1240.95 903.501 1242.45 903.408 cv
1244.02 903.312 1244.35 901.057 1243.88 899.873 cv
cp
.352941 .494118 .270588 rgb
f
1373.97 992.758 mo
1373.98 1007.44 1377.96 1022.23 1376.98 1037 cv
1375.74 1055.61 1368.58 1072.49 1359.9 1088.79 cv
1336.16 1133.42 1339.1 1153.92 1333.67 1203.27 cv
1332.57 1212.02 1334 1228.93 1329.49 1236.29 cv
1321.29 1249.69 1300.85 1241.23 1288.13 1239.25 cv
1265.85 1235.79 1245.77 1225.73 1223.64 1227.3 cv
1200.32 1228.94 1172.65 1224.04 1149.9 1218.83 cv
1137.81 1216.06 1117.68 1217.5 1107.09 1210.88 cv
1093.76 1202.57 1099.5 1203.45 1098.3 1189.27 cv
1091.09 1102.86 1096.11 1109.9 1086.86 1044.82 cv
1086.27 1040.71 1086.39 1022.33 1086.8 999.633 cv
1087.02 987.502 1087.31 974.122 1087.63 961.044 cv
1088.49 924.98 1089.48 891.043 1089.21 891.002 cv
1152.18 903.545 li
1152.18 903.545 1212.62 935.753 1250.6 926.929 cv
1289.31 917.94 1290.27 930.168 1321.16 937.372 cv
1366.09 947.829 1388.09 936.37 1388.09 936.37 cv
1383.97 950.67 1378.43 965.01 1375.27 979.543 cv
1374.81 981.711 1374.48 983.893 1374.27 986.075 cv
1374.05 988.298 1373.97 990.521 1373.97 992.758 cv
cp
.921569 .666667 .423529 rgb
f
1143.26 1097.31 mo
1297.9 1057.86 li
1303.2 1064.12 li
1222.25 1127.2 li
1251.32 1092.77 li
1231.73 1095.01 li
1143.26 1097.31 li
cp
.901961 .643137 .392157 rgb
f
1139.74 1046.57 mo
1119.92 1016.78 li
1215.06 1016 li
1144.4 1025.61 li
1143.43 1037.18 li
1139.74 1046.57 li
cp
f
1168.52 1166.37 mo
1231.31 1169.68 li
1308.63 1138.31 li
1252.99 1154.03 li
1220.23 1162.93 li
1168.52 1166.37 li
cp
f
1373.97 992.758 mo
1373.37 993.087 1372.67 993.444 1371.87 993.828 cv
1361.91 998.741 1346.59 1000.26 1335.77 1002.57 cv
1316.43 1006.67 1296.45 1009.17 1276.74 1010.58 cv
1245.46 1012.82 1215.07 1010.45 1183.93 1010.3 cv
1165.72 1010.21 1147.86 1010.35 1129.81 1007.8 cv
1115.31 1005.75 1101.25 1001.05 1086.8 999.633 cv
1087.02 987.502 1087.31 974.122 1087.63 961.044 cv
1102.61 964.338 1133.85 970.939 1148.37 974.383 cv
1157.15 976.469 1167.5 977.169 1176.73 976.469 cv
1186.06 975.742 1195.88 975.554 1205.54 975.554 cv
1222.3 975.554 1240.17 975.44 1256.32 977.841 cv
1274.1 980.476 1288.76 978.577 1306.64 979.671 cv
1329.05 981.043 1345.06 984.703 1362.44 984.245 cv
1369.59 984.057 1375.25 984.703 1379.37 985.618 cv
1391.85 988.392 1379.83 1001.17 1369.76 1000.71 cv
1364.66 1000.48 1378.57 990.288 1373.97 992.758 cv
cp
.811765 .580392 .360784 rgb
f
1772.37 984.229 mo
1772.37 1271.99 li
1029.02 1271.99 li
1029.02 984.229 li
1772.37 984.229 li
cp
.960784 .741176 .537255 rgb
f
2309.66 486.639 mo
2295.22 482.906 2275.19 486.904 2264 479.161 cv
2237.46 460.8 2224.49 429.292 2206.72 403.415 cv
2193.33 383.911 2178.52 381.479 2187.02 356.494 cv
2196.77 327.816 2233.4 301.578 2257.36 296.6 cv
2291.87 289.428 2325.39 287.451 2360.28 293.842 cv
2378.94 297.259 2409.93 306.106 2426.5 315.389 cv
2510.02 362.186 2522.36 497.732 2500.94 578.974 cv
2492.95 609.295 2482.4 648.019 2490.01 679.486 cv
2496.14 704.863 2513.83 724.835 2519.06 752.033 cv
2523.5 775.137 2526.65 836.149 2503.34 850.574 cv
2466.39 873.439 2423.72 830.284 2400.32 805.76 cv
2388.16 793.004 2438.17 749.19 2378.18 717.361 cv
2340.03 697.122 2308.86 612.532 2314.2 554.623 cv
2315.71 538.244 2331.08 515.287 2324.9 499.207 cv
2322.09 491.907 2316.5 488.407 2309.66 486.639 cv
.282353 .282353 .301961 rgb
f
2231.57 687.021 mo
2234.55 686.596 2260.76 682.245 2260.59 680.46 cv
2260.59 680.46 2260.77 681.083 2261.07 682.235 cv
2261.15 682.558 2261.27 682.929 2261.4 683.335 cv
2263.11 682.31 2264.87 681.258 2266.88 680.332 cv
2272.9 677.573 2278.9 674.771 2284.81 671.799 cv
2295.29 666.529 2305.67 660.997 2315.63 654.785 cv
2334.17 643.224 2351.36 629.577 2367.44 614.807 cv
2371.2 611.356 2374.96 607.836 2378.7 604.242 cv
2379.24 593.783 2380.99 583.404 2384.67 573.165 cv
2390.39 557.238 2394.55 540.77 2399.04 524.312 cv
2400.83 517.75 2422.2 434.09 2426.39 435.065 cv
2208.19 380.256 li
2192.05 389.736 li
2168.35 403.665 2162.99 429.762 2160.17 455.099 cv
2158.68 468.403 2157.81 481.87 2159.69 495.181 cv
2161.21 506.022 2168.9 520.006 2166.04 530.902 cv
2155.08 572.625 2167.5 605.733 2182.28 644.582 cv
2186.51 655.706 2190.68 671.912 2198.76 680.937 cv
2206.86 689.972 2220.69 688.567 2231.57 687.021 cv
1 .690196 .501961 rgb
f
2420.06 702.085 mo
2401.66 680.184 2388.33 636.745 2382.38 606.381 cv
2378.98 589.077 2376.05 571.76 2375.05 554.517 cv
2370.8 560.225 2366.51 565.797 2362.22 571.195 cv
2346.83 590.529 2330.44 608.566 2312.12 623.492 cv
2302.51 631.32 2292.64 638.645 2282.53 645.468 cv
2277.61 648.787 2272.89 653.193 2267.89 656.735 cv
2268.08 657.25 2268.27 657.757 2268.49 658.315 cv
2268.03 658.532 2254.92 662.907 2254.47 663.126 cv
2278.25 721.088 2270.92 755.962 2268.17 767.042 cv
2266.81 772.497 2257.75 791.784 2234.86 817.29 cv
2203.06 852.709 2296.43 889.915 2296.43 889.915 cv
2315.18 876.829 li
2319.05 883.836 2322.51 889.521 2325.13 892.785 cv
2349.15 874.046 2368.67 841.129 2392.85 822.721 cv
2413.93 806.676 2453.82 819.921 2459.95 781.175 cv
2461.53 771.167 2459.74 761.5 2456.02 752.345 cv
2448.04 732.655 2431.2 715.334 2420.06 702.085 cv
f
2097.72 1500 mo
2081.36 1460.48 li
2081.36 1460.48 2067.44 1470.26 2052.44 1500 cv
2097.72 1500 li
cp
.266667 .329412 .529412 rgb
f
2456.96 1500 mo
2445.11 1463.6 2422.44 1418.47 2408.27 1393.32 cv
2396.57 1372.55 2390.13 1351.09 2384.49 1329.06 cv
2373.84 1287.42 2369.2 1293.85 2336.05 1306.45 cv
2302.79 1319.1 2258.83 1317.82 2223.78 1317.43 cv
2179.99 1316.94 2135.15 1312.94 2092.29 1303.48 cv
2092.29 1303.48 2090.92 1318.77 2088.07 1342.14 cv
2086.44 1356.41 2084.28 1373.78 2081.64 1392.52 cv
2077.49 1421.68 2063.09 1467.53 2052.05 1500 cv
2456.96 1500 li
cp
.313726 .34902 .470588 rgb
f
2125.22 1331.17 mo
2163.59 1342.52 2213.31 1349.13 2251.76 1344.3 cv
2287.1 1339.87 2368.18 1324.9 2377.45 1292.97 cv
2378.37 1289.83 2378.95 1286.07 2379.1 1281.98 cv
2381.61 1206.72 2385.26 1136.02 2421.8 1058.46 cv
2447.86 1003.12 2469.92 947.361 2470.02 890.547 cv
2470.07 855.304 2493.74 830.23 2471.2 803.606 cv
2429.83 754.733 2352.09 814.743 2311.33 838.956 cv
2286.93 853.446 2269.42 855.263 2253.16 850.82 cv
2225.84 843.352 2249.9 811.805 2257.49 791.654 cv
2260.82 782.559 2275.78 765.044 2258.81 767.292 cv
2243.9 769.267 2232.18 789.046 2224.74 798.92 cv
2210.4 817.68 2178.28 856.09 2158.27 868.467 cv
2122.84 890.379 2076.34 912.038 2066.28 956.655 cv
2053.83 1011.92 2091.42 1067.3 2097.91 1120.93 cv
2101.4 1149.82 2103.23 1177.99 2100.06 1206.13 cv
2095.42 1247.73 2070.86 1314.98 2125.22 1331.17 cv
cp
.305882 .329412 .45098 rgb
f
2082.89 1362.38 mo
2108.84 1381.61 2156.1 1386.46 2205.31 1387.03 cv
2272.61 1387.82 2349.29 1391.07 2389.94 1360.62 cv
2399.25 1353.65 2386.34 1336.37 2384.05 1293.04 cv
2383.96 1291.28 2383.09 1289.65 2381.67 1288.6 cv
2380.25 1287.55 2378.44 1287.19 2376.73 1287.61 cv
2361.89 1291.3 2334.1 1311.32 2320.87 1314.67 cv
2291.69 1322.05 2261.61 1326.09 2231.5 1326.39 cv
2185.25 1326.84 2131.28 1319.49 2091.84 1293.49 cv
2086.38 1289.89 2080.11 1332.27 2082.89 1362.38 cv
cp
.313726 .34902 .470588 rgb
f
2433.41 320.395 mo
2405.88 299.452 2364.59 278.767 2330.23 278.742 cv
2309.31 278.728 2274.28 278.538 2253.96 284.034 cv
2234.11 289.401 2213.55 302.889 2200.88 319.488 cv
2199.14 321.793 2184.62 324.575 2180.75 326.65 cv
2172.32 331.162 2165.43 337.117 2159.39 344.464 cv
2143.36 363.984 2138 388.885 2138.41 413.625 cv
2138.46 416.638 2143.98 467.15 2147.69 465.217 cv
2152.14 462.9 2165.33 461.312 2174.35 461.12 cv
2205.44 460.453 2229.99 466.522 2260.95 468.746 cv
2274.44 469.715 2291.36 472.264 2302.91 468.1 cv
2304.74 457.945 2303.84 437.105 2310.17 433.896 cv
2316.37 445.521 2315.65 483.137 2326.98 491.308 cv
2339.69 500.48 2355.47 482.421 2367.45 480.069 cv
2381.31 477.345 2397.12 492.163 2395.4 506.102 cv
2390.1 549.108 2371.8 560.071 2371.27 565.008 cv
2365.17 622.267 2351.52 678.34 2415.42 754.694 cv
2433.06 775.781 2452.86 779.455 2476.44 793.418 cv
2482.8 797.184 2476.38 814.832 2484.4 806.746 cv
2491 800.088 2485.67 777.769 2485.24 769.971 cv
2483.68 741.676 2478.82 714.356 2477.26 686.079 cv
2475.59 655.764 2470.71 623.829 2476.03 594.003 cv
2479.36 575.302 2485.65 557.406 2489.3 539.007 cv
2503.13 469.201 2494.49 366.862 2433.41 320.395 cv
.282353 .282353 .301961 rgb
f
2356.08 555.901 mo
2355.36 555.901 2354.59 555.785 2353.76 555.53 cv
2339.85 551.263 2366.65 529.055 2369.43 522.726 cv
2370.51 520.264 2374.55 516.412 2372.61 513.423 cv
2370.78 510.605 2365.08 512.583 2362.39 510.191 cv
2360.31 508.353 2359.03 503.824 2356.97 502.054 cv
2357.44 493.847 2363.08 490.14 2369.17 490.14 cv
2374.32 490.14 2379.8 492.783 2382.78 497.59 cv
2389.41 508.266 2382.41 530.074 2370.98 536.764 cv
2364.89 540.33 2362.37 534.48 2363.49 545.092 cv
2363.86 548.598 2361.75 555.901 2356.08 555.901 cv
1 .615686 .376471 rgb
f
2382.6 870.302 mo
2382.6 870.302 2208.13 1119.4 2183.42 1146.28 cv
2158.71 1173.16 2095.18 1167.36 1970.87 1214.05 cv
1859.34 1255.94 1836.98 1248.82 1822.39 1247.4 cv
1821.49 1267.51 1806.35 1306.77 1806.35 1306.77 cv
1806.35 1306.77 2027.78 1318 2182.03 1261.21 cv
2232.89 1242.48 2484.26 1005.65 2481.25 918.114 cv
2478.24 830.576 2382.6 870.302 2382.6 870.302 cv
cp
1 .690196 .501961 rgb
f
2511.58 916.853 mo
2499.51 947.868 2479.76 981.797 2458.58 1007.51 cv
2449.81 1018.15 2443.66 1028.69 2436.48 1040.54 cv
2431.85 1048.2 2422.22 1066.46 2410.96 1064.99 cv
2403.03 1063.94 2405.76 1054.96 2405.07 1047.56 cv
2403.31 1028.8 2391.73 1013.91 2376.25 1003.8 cv
2361.76 994.348 2349.68 991.186 2332.89 990.432 cv
2324.61 990.06 2317.46 989.429 2309.31 990.03 cv
2303.11 990.487 2292.21 992.636 2290.32 984.742 cv
2287.49 972.979 2303.08 950.699 2307.1 939.772 cv
2313.89 921.352 2316.86 903.172 2324.26 885.022 cv
2340.2 845.934 2379.62 779.437 2431.61 773.185 cv
2494.49 765.622 2532.25 863.743 2511.58 916.853 cv
cp
.305882 .329412 .45098 rgb
f
1947.5 1220.93 mo
1950 1220.65 1944.18 1228.55 1943.41 1230.82 cv
1942.27 1234.17 1941.42 1237.61 1940.75 1241.07 cv
1939.31 1248.57 1938.76 1256.22 1938.76 1263.84 cv
1938.76 1277.93 1940.37 1292.56 1945.02 1305.92 cv
1945.66 1307.75 1945.33 1309.78 1944.14 1311.31 cv
1942.95 1312.84 1941.06 1313.66 1939.13 1313.49 cv
1894.22 1309.59 1874.19 1312.83 1845.08 1317.68 cv
1817.51 1322.28 1747.44 1334.18 1698.03 1325.56 cv
1678.18 1322.1 1619.25 1279.61 1625.16 1271.07 cv
1633.31 1259.3 1678.45 1269.79 1705.6 1266.06 cv
1715.11 1264.76 1731.2 1265.41 1731.84 1258.6 cv
1729.52 1239.9 1702.7 1253.16 1683.72 1245.8 cv
1665.47 1238.72 1691.35 1229.43 1700.82 1228.27 cv
1715.52 1226.46 1733.96 1222.45 1748.58 1221.72 cv
1789.57 1219.68 1800.44 1244.81 1850.99 1238.9 cv
1858.83 1237.99 1890.87 1235.03 1905.48 1231.03 cv
1911.77 1229.3 1925.23 1227.17 1931.41 1225.12 cv
1932.82 1224.65 1945.07 1220.89 1947.5 1220.93 cv
cp
.305882 .376471 .603922 rgb
f
2270.89 726.885 mo
2269.87 714.766 2267.24 700.168 2261.78 683.108 cv
2261.78 683.107 2261.78 683.106 2261.78 683.104 cv
2267.25 700.163 2269.88 714.768 2270.89 726.885 cv
1 .843137 .745098 rgb
f
2261.78 683.108 mo
2260.65 679.597 2259.4 675.98 2258.03 672.262 cv
2258.03 672.261 2258.03 672.26 2258.03 672.259 cv
2259.41 675.981 2260.66 679.591 2261.78 683.104 cv
2261.78 683.106 2261.78 683.107 2261.78 683.108 cv
1 .580392 .372549 rgb
f
2280.98 731.89 mo
2276.98 731.89 2273.59 731.291 2271.12 729.905 cv
2271.06 728.916 2270.98 727.91 2270.89 726.885 cv
2269.88 714.768 2267.25 700.163 2261.78 683.104 cv
2260.66 679.591 2259.41 675.981 2258.03 672.259 cv
2262.99 669.18 2268.3 667.257 2274.38 666.031 cv
2281.9 664.509 2289 660.973 2295.96 657.867 cv
2308.96 652.057 2322.77 648.607 2333.25 638.43 cv
2343.72 628.269 2351.75 613.216 2358.51 600.468 cv
2361.8 594.25 2364.55 587.878 2366.53 581.128 cv
2368.26 575.282 2369.35 569.404 2371.51 563.82 cv
2371.72 563.54 2371.92 563.276 2372.12 562.996 cv
2371.8 563.515 2371.56 563.977 2371.41 564.396 cv
2371.34 564.61 2371.29 564.814 2371.27 565.008 cv
2370.28 574.293 2369.09 583.55 2368.07 592.865 cv
2365.36 617.435 2363.81 642.427 2370.06 669.527 cv
2373.31 683.569 2353.16 703.64 2343.54 710.771 cv
2334.34 717.591 2300.51 731.89 2280.98 731.89 cv
f
2368.07 592.865 mo
2369.09 583.55 2370.28 574.293 2371.27 565.008 cv
2371.29 564.814 2371.34 564.61 2371.41 564.396 cv
2371.34 564.612 2371.29 564.815 2371.28 565.01 cv
2370.29 574.295 2369.09 583.55 2368.07 592.865 cv
.282353 .239216 .223529 rgb
f
2153.88 581.497 mo
2154.59 588.907 2155.98 597.821 2158.55 608.043 cv
2160.07 614.237 2162.05 620.937 2164.57 628.107 cv
2166.7 634.24 2169.28 640.736 2172.28 647.508 cv
2172.7 648.485 2173.15 649.459 2173.6 650.462 cv
2177.25 658.479 2180.75 665.493 2184.13 671.646 cv
2187.88 678.49 2191.51 684.239 2195.07 689.005 cv
2211.14 710.478 2226.12 712.091 2247.95 705.099 cv
2278.98 695.206 2348.96 660.04 2319.95 641.611 cv
2290.94 623.181 2298.85 564.168 2298.85 564.168 cv
2280.79 558.206 2228.39 568.059 2190.16 544.732 cv
2172.67 534.056 2154.13 555.622 2154.13 555.622 cv
2154.13 555.622 2152.29 564.859 2153.88 581.497 cv
cp
.329412 .360784 .521569 rgb
f
2294.09 574.824 mo
2295.02 574.73 2295.89 574.184 2296.36 573.289 cv
2296.65 572.742 2320.07 522.143 2354.48 488.777 cv
2355.63 487.664 2359.7 482.796 2363.39 481.516 cv
2364.91 480.991 2358.62 479.265 2355.47 482.31 cv
2320.33 516.265 2291.53 570.04 2291.24 570.594 cv
2290.49 572.01 2291.04 573.761 2292.45 574.506 cv
2292.97 574.779 2293.54 574.879 2294.09 574.824 cv
cp
f
2321.21 648.55 mo
2321.86 648.629 2322.55 648.495 2323.15 648.122 cv
2355.6 628.192 2371.34 570.828 2372.07 568.451 cv
2372.57 566.818 2374.44 562.424 2372.63 562.569 cv
2371.66 562.647 2370.69 563.727 2369.01 567.497 cv
2366.56 572.984 2350.45 624.125 2320 642.832 cv
2318.56 643.719 2318.09 645.622 2318.96 647.083 cv
2319.47 647.929 2320.31 648.442 2321.21 648.55 cv
cp
f
327.173 635.931 mo
346.066 631.927 336.158 657.91 333.056 668.61 cv
330.807 676.369 323.338 712.68 308.952 703.418 cv
286.501 688.953 283.505 645.185 327.173 635.931 cv
cp
.317647 .337255 .439216 rgb
f
520.044 896.154 mo
500.287 869.605 479.191 842.492 451.976 823.093 cv
439.949 814.449 426.093 811.066 417.45 799.425 cv
407.603 786.197 395.723 775.262 382.081 766.275 cv
367.926 756.995 354.738 746.367 341.288 736.119 cv
333.369 730.086 306.643 726.016 307.652 713.723 cv
307.905 710.644 300.09 708.138 301.146 705.048 cv
304.196 696.117 309.803 697.217 314.738 689.142 cv
327.462 668.321 332.771 635.114 334.097 615.313 cv
334.092 615.003 334.117 614.693 334.143 614.384 cv
334.776 604.287 334.772 594.975 334.348 586.413 cv
332.291 545.518 320.571 522.204 323.129 518.015 cv
323.159 517.922 323.218 517.828 323.31 517.765 cv
323.463 517.608 323.646 517.481 323.892 517.415 cv
323.985 517.382 324.077 517.381 324.17 517.379 cv
324.231 517.347 324.325 517.345 324.417 517.344 cv
324.51 517.342 324.635 517.402 324.76 517.462 cv
336.488 523.11 351.02 529.916 361.889 535.919 cv
367.386 538.95 371.95 541.75 374.712 544.084 cv
389.81 556.821 413.117 584.794 433.474 608.424 cv
433.569 608.578 433.695 608.699 433.821 608.821 cv
448.749 626.108 462.058 641.01 469.408 645.742 cv
469.533 645.802 li
470.41 646.406 471.16 646.857 471.816 647.248 cv
472.722 647.759 473.44 648.117 473.906 648.265 cv
473.906 648.265 473.737 649.226 473.273 651.028 cv
473.183 651.216 473.097 651.619 473.102 651.898 cv
473.072 651.991 li
471.156 664.831 469.737 677.757 470.048 690.652 cv
470.057 691.116 li
470.066 691.673 470.076 692.261 470.116 692.817 cv
470.403 704.197 480.39 714.279 483.855 725.172 cv
489.093 742.098 505.712 754.532 510.718 770.503 cv
514.852 784.416 516.768 811.777 519.112 825.907 cv
523.861 854.072 519.274 867.271 520.044 896.154 cv
1 .690196 .501961 rgb
f
447.739 845.237 mo
443.351 836.807 425.051 815.805 427.611 805.76 cv
430.921 792.772 407.845 758.952 416.069 759.8 cv
425.38 760.759 451.536 781.416 472.522 773.021 cv
485.114 767.984 496.369 755.342 495.607 741.122 cv
512.862 764.865 526.237 824.008 527.487 851.993 cv
528.616 877.24 530.364 902.796 529.059 928.194 cv
517.145 930.077 497.536 904.672 489.94 897.475 cv
473.186 881.601 458.478 865.868 447.739 845.237 cv
cp
.372549 .396078 .529412 rgb
f
470.005 687.025 mo
470.007 675.334 471.336 663.628 473.072 651.991 cv
473.072 651.991 li
473.635 652.094 474.274 652.22 474.966 652.325 cv
474.274 652.22 473.635 652.094 473.072 651.991 cv
471.336 663.628 470.007 675.334 470.005 687.025 cv
1 .843137 .745098 rgb
f
452.004 700.838 mo
449.391 700.838 446.431 700.621 443.048 700.177 cv
408.68 693.089 358.567 651.65 334.097 615.313 cv
334.097 615.313 li
334.097 615.313 li
334.096 615.284 334.096 615.255 334.096 615.226 cv
334.096 614.945 334.119 614.664 334.143 614.384 cv
334.489 608.862 334.644 603.575 334.645 598.517 cv
334.646 594.366 334.542 590.37 334.353 586.524 cv
336.522 561.949 328.527 539.374 326.461 527.145 cv
325.908 523.875 324.984 521.178 323.795 518.722 cv
329.484 525.027 333.671 529.701 337.865 532.775 cv
343.186 537.533 347.848 540.101 351.2 540.101 cv
351.844 540.101 352.44 540.006 352.983 539.814 cv
353.03 539.797 353.078 539.789 353.126 539.789 cv
355.771 539.789 359.717 564.869 367.472 587.966 cv
371.238 599.18 382.695 615.753 393.905 623.667 cv
423.468 644.697 462.45 649.542 469.595 651.215 cv
469.595 651.215 469.686 651.333 469.896 651.333 cv
469.899 651.333 469.902 651.333 469.906 651.333 cv
470.682 651.506 471.738 651.735 473.072 651.991 cv
473.072 651.991 473.072 651.991 473.072 651.991 cv
473.072 651.991 li
471.336 663.628 470.007 675.334 470.005 687.025 cv
470.005 688.234 470.019 689.443 470.048 690.652 cv
470.057 691.116 li
470.066 691.673 470.076 692.261 470.116 692.817 cv
466.35 697.995 461.461 700.838 452.004 700.838 cv
1 .580392 .372549 rgb
f
555.52 470.131 mo
555.517 469.945 555.484 469.791 555.45 469.637 cv
555.416 469.452 555.381 469.267 555.348 469.113 cv
555.078 467.818 554.839 466.492 554.632 465.196 cv
554.598 465.011 li
554.459 464.116 554.32 463.221 554.212 462.326 cv
554.173 461.863 554.103 461.369 554.064 460.905 cv
553.92 459.732 553.807 458.559 553.726 457.415 cv
553.642 456.117 553.589 454.849 553.537 453.551 cv
553.536 453.52 li
553.499 453.181 553.493 452.81 553.487 452.438 cv
553.452 450.397 553.449 448.386 553.539 446.404 cv
553.708 441.823 554.126 437.299 554.761 432.802 cv
555.257 429.236 555.846 425.668 556.561 422.191 cv
557.498 417.287 558.623 412.473 559.749 407.751 cv
563.448 392.405 567.414 378.199 567.546 366.008 cv
567.591 361.336 567.083 356.951 565.746 352.921 cv
565.03 350.86 564.286 348.893 563.42 347.082 cv
563.387 346.99 li
561.685 343.306 559.65 340.093 557.344 337.317 cv
553.648 332.832 549.26 329.473 544.516 327.047 cv
544.495 327.037 li
522.668 290.912 476.783 262.018 441.467 253.204 cv
364.676 234.038 291.628 270.12 263.02 342.52 cv
239.828 401.218 255.178 452.083 300.645 494.824 cv
321.101 514.052 329.468 526.621 337.865 532.775 cv
344.209 538.448 349.616 541.007 352.983 539.814 cv
355.628 538.876 359.577 564.45 367.472 587.966 cv
371.238 599.18 382.695 615.753 393.905 623.667 cv
423.468 644.697 462.45 649.542 469.595 651.215 cv
469.595 651.215 469.689 651.337 469.906 651.333 cv
470.682 651.506 471.738 651.735 473.072 651.991 cv
473.693 652.104 474.407 652.247 475.183 652.357 cv
476.579 652.612 478.223 652.862 480.084 653.14 cv
485.263 653.887 492.146 654.729 501.068 655.475 cv
510.424 656.213 527.15 651.906 533.24 646.234 cv
545.517 634.98 560.802 542.373 560.802 542.373 cv
560.802 542.373 562.942 506.325 555.521 470.162 cv
555.52 470.131 li
1 .690196 .501961 rgb
f
269.968 285.416 mo
297.153 260.078 329.402 238.981 366.131 235.272 cv
402.461 231.604 404.766 227.326 440.261 231.871 cv
462.032 234.658 500.068 245.422 516.4 262.676 cv
538.457 285.979 546.212 316.442 518.107 331.747 cv
492.594 345.64 460.064 344.8 432.828 354.343 cv
395.36 367.472 390.58 394.473 380.407 430.271 cv
374.876 449.74 372.97 466.06 372.051 479.172 cv
371.636 485.09 370.213 495.585 367.705 496.538 cv
365.197 497.49 362.485 488.203 360.785 483.765 cv
356.468 472.495 348.871 464.661 347.003 459.442 cv
336.959 431.388 297.055 452.373 302.912 476.499 cv
310.705 508.607 323.594 510.178 326.461 527.145 cv
328.571 539.635 336.866 562.914 334.201 588.096 cv
321.43 570.729 302.747 537.389 290.486 521.022 cv
238.733 451.936 194.555 355.707 269.968 285.416 cv
.372549 .396078 .529412 rgb
f
481.297 326.129 mo
501.821 334.015 533.766 331.93 545.708 351.467 cv
554.5 365.85 552.213 387.339 552.093 406.171 cv
571.746 372.902 568.57 333.385 542.027 305.666 cv
529.38 292.459 516.892 288.377 500.237 297.035 cv
485.555 304.666 485.374 315.727 478.544 327.565 cv
481.297 326.129 li
.176471 .203922 .352941 rgb
f
405.227 382.684 mo
459.057 365.555 507.643 366.412 553.118 373.906 cv
559.932 375.023 557.405 335.301 556.977 332.685 cv
553.598 312.025 545.169 292.092 531.607 275.972 cv
466.918 199.079 332.429 206.343 269.07 276.866 cv
242.529 306.408 222.052 345.338 218.401 385.178 cv
216.548 405.404 220.092 426.209 229.089 444.471 cv
230.538 447.412 257.081 488.623 263.672 478.554 cv
289.266 439.451 339.732 403.525 405.227 382.684 cv
.898039 .207843 .321569 rgb
f
349.602 525.554 mo
343.996 525.554 341.183 518.402 341.203 514.759 cv
341.237 508.35 340.605 507.563 338.836 507.563 cv
338.548 507.563 338.23 507.584 337.88 507.605 cv
337.529 507.626 337.146 507.647 336.728 507.647 cv
335.544 507.647 334.083 507.478 332.299 506.661 cv
319.365 500.733 309.545 478.171 315.486 466.049 cv
318.417 460.071 324.823 456.547 330.807 456.547 cv
336.755 456.547 342.284 460.031 343.561 468.053 cv
341.547 470.168 340.662 475.146 338.632 477.333 cv
336.017 480.178 329.714 478.674 328.059 481.884 cv
326.305 485.287 331.038 488.971 332.458 491.486 cv
336.109 497.955 367.133 518.823 352.719 524.875 cv
351.598 525.346 350.56 525.554 349.602 525.554 cv
1 .615686 .376471 rgb
f
538.7 1026.82 mo
549.179 1133.03 545.989 1205.36 549.648 1254.46 cv
550.456 1265.32 550.357 1278.64 554.341 1289 cv
560.124 1304.04 567.969 1405.68 574.18 1500 cv
673.417 1500 li
671.04 1472.76 668.669 1448.03 667.51 1436.4 cv
665.857 1419.82 663.59 1399.4 661.201 1377.42 cv
654.933 1319.77 647.987 1251.31 649.998 1212.99 cv
658.216 1056.93 616.866 913.703 592.984 839.339 cv
571.734 773.166 547.068 746.5 525.067 729.833 cv
512.954 720.657 502.44 720.311 494.401 721.167 cv
492.43 721.366 505.261 758.331 505.261 758.331 cv
505.208 792.866 528.862 927.099 538.7 1026.82 cv
.298039 .313726 .419608 rgb
f
220.705 1239.27 mo
225.102 1375.07 236.048 1331.27 209.76 1460.5 cv
207.934 1469.48 205.28 1483.49 202.228 1500 cv
615.871 1500 li
612.857 1470.5 610.037 1442.01 608.388 1418.87 cv
607.572 1407.46 606.815 1396.06 606.119 1384.74 cv
604.786 1363.29 603.671 1342.13 602.716 1322 cv
598.776 1238.4 591.291 1154.65 587.948 1130.91 cv
579.968 1074.24 571.986 1006.18 555.489 970.854 cv
544.724 947.776 534.556 906.163 501.903 858.646 cv
483.155 831.364 440.068 805 438.068 752 cv
436.97 722.939 376.436 725.557 336.225 728.174 cv
319.007 729.295 305.516 730.416 302.014 729.05 cv
301.078 728.692 290.446 717.483 290.446 717.483 cv
290.446 717.483 217.82 780.768 191.075 842.516 cv
177.98 872.723 169.524 942.133 190.637 1014.45 cv
212.427 1089.71 218.477 1169.64 220.705 1239.27 cv
.317647 .337255 .439216 rgb
f
602.716 1322 mo
598.776 1238.4 591.291 1154.65 587.948 1130.91 cv
587.821 1130.01 587.695 1129.11 587.568 1128.2 cv
589.247 1129.64 590.894 1131.03 592.508 1132.37 cv
595.851 1156.11 597.801 1172.05 597.801 1172.05 cv
597.801 1172.05 598.777 1238.4 602.716 1322 cv
.262745 .278431 .384314 rgb
f
602.716 1322 mo
560.311 1315.05 526.8 1308.52 516.91 1304.4 cv
493.289 1294.51 366.429 1195.06 312.92 1161.94 cv
258.216 1128.07 228.386 1093.51 209.422 1044.99 cv
204.925 1033.47 201.025 1021.15 197.562 1007.88 cv
189.92 978.57 185.125 951.486 187.632 927.786 cv
189.861 906.274 198.099 887.509 215.571 872.286 cv
227.388 862.004 240.397 857.944 253.78 857.944 cv
296.936 857.944 344.002 900.148 367.743 911.966 cv
398.866 927.448 456.972 990.469 492.015 1032.34 cv
506.68 1049.87 553.3 1098.83 587.568 1128.2 cv
587.695 1129.11 587.821 1130.01 587.948 1130.91 cv
591.291 1154.65 598.776 1238.4 602.716 1322 cv
602.716 1322 li
.278431 .298039 .403922 rgb
f
309.228 648.37 mo
305.061 700.039 356.347 713.036 406.039 726.708 cv
430.969 733.567 437.086 742.291 431.809 752.035 cv
420.896 772.182 422.984 830.047 432.985 848.381 cv
446.319 872.827 377.704 816.712 342.146 796.711 cv
306.589 776.71 270.381 753.248 276.068 734 cv
282.568 712 290.477 705.04 290.477 666.704 cv
290.477 655.372 309.979 639.052 309.228 648.37 cv
cp
.317647 .337255 .439216 rgb
f
506.541 766.403 mo
506.324 757.361 505.732 748.301 505.895 739.253 cv
506.043 730.991 506.456 722.397 508.749 714.408 cv
509.557 711.588 510.664 708.451 512.421 705.924 cv
513.545 704.307 513.293 702.117 511.835 700.793 cv
504.223 693.885 483.044 675.335 469.974 669.563 cv
469.094 674.85 467.721 688.934 468.213 698.641 cv
468.937 712.95 473.287 718.44 478.221 731.107 cv
480.826 737.863 482.596 742.801 488.472 765.466 cv
493.004 782.945 518.382 886.996 521.236 890.968 cv
524.68 895.761 515.335 827.166 508.619 786.872 cv
507.36 773.861 506.608 769.194 506.541 766.403 cv
cp
.282353 .298039 .4 rgb
f
569.176 531.211 mo
569.207 539.208 568.678 548.886 567.029 560.089 cv
566.064 566.872 564.664 574.247 562.735 582.182 cv
561.117 588.966 559.063 596.186 556.573 603.747 cv
556.231 604.836 555.858 605.926 555.484 607.046 cv
552.435 616.008 549.447 623.881 546.491 630.82 cv
543.224 638.537 539.956 645.072 536.658 650.549 cv
521.783 675.226 505.944 678.555 481.859 673.421 cv
447.629 666.17 369.055 636.079 398.089 613.269 cv
427.122 590.46 412.341 528.224 412.341 528.224 cv
431.012 519.915 488.082 524.832 526.451 495.799 cv
544.002 482.511 566.127 503.578 566.127 503.578 cv
566.127 503.578 569.083 513.256 569.176 531.211 cv
cp
.329412 .360784 .521569 rgb
f
418.578 539.104 mo
417.568 539.104 416.577 538.613 415.979 537.708 cv
415.612 537.153 385.154 485.574 344.799 453.595 cv
343.453 452.528 338.575 447.76 334.491 446.788 cv
332.816 446.389 339.353 443.87 343.049 446.788 cv
384.253 479.318 420.801 533.716 421.172 534.277 cv
422.119 535.711 421.724 537.641 420.291 538.589 cv
419.762 538.937 419.166 539.104 418.578 539.104 cv
cp
f
393.018 629.045 mo
392.347 629.045 391.671 628.83 391.102 628.385 cv
360.701 604.592 351.768 545.445 351.315 542.983 cv
351.003 541.293 350.668 539.314 352.482 539.677 cv
353.454 539.871 354.816 539.677 355.399 542.011 cv
356.866 547.876 366.401 601.15 394.937 623.483 cv
396.291 624.542 396.53 626.497 395.471 627.851 cv
394.857 628.635 393.942 629.045 393.018 629.045 cv
cp
f
553.907 459.507 mo
553.836 458.803 553.775 458.104 553.726 457.415 cv
553.642 456.117 553.589 454.849 553.537 453.551 cv
553.536 453.52 li
553.499 453.181 553.493 452.81 553.487 452.438 cv
553.452 450.397 553.449 448.386 553.539 446.404 cv
553.541 446.345 553.543 446.286 553.545 446.227 cv
553.543 446.284 553.541 446.34 553.539 446.397 cv
553.464 448.396 553.466 450.395 553.501 452.423 cv
553.508 452.798 553.514 453.173 553.551 453.532 cv
553.598 455.522 553.716 457.511 553.907 459.507 cv
555.632 427.149 mo
555.757 426.418 555.886 425.689 556.02 424.962 cv
555.887 425.688 555.757 426.42 555.632 427.149 cv
557.576 417.213 mo
558.264 414.019 559.006 410.865 559.749 407.751 cv
562.816 395.027 566.066 383.089 567.163 372.431 cv
565.816 385.692 561.099 400.937 557.576 417.213 cv
1 .843137 .745098 rgb
f
472.703 478.752 mo
438.822 478.752 406.674 455.09 378.929 435.725 cv
379.391 433.935 379.883 432.118 380.407 430.271 cv
385.102 413.751 388.649 399.102 394.789 386.827 cv
422.078 380.031 457.824 374.709 502.689 368.922 cv
519.576 369.36 535.985 371.126 552.005 373.724 cv
552.908 384.229 552.16 395.617 552.093 406.171 cv
559.809 393.108 564.006 379.085 564.651 365.188 cv
565.612 365.451 566.573 365.728 567.534 366.018 cv
567.517 368.098 567.386 370.239 567.163 372.431 cv
566.066 383.089 562.816 395.027 559.749 407.751 cv
559.006 410.865 558.264 414.019 557.576 417.213 cv
557.022 419.773 556.498 422.355 556.02 424.962 cv
555.886 425.689 555.757 426.418 555.632 427.149 cv
554.557 433.408 553.781 439.783 553.545 446.227 cv
553.543 446.286 553.541 446.345 553.539 446.404 cv
553.449 448.386 553.452 450.397 553.487 452.438 cv
553.493 452.81 553.499 453.181 553.536 453.52 cv
553.537 453.551 li
553.589 454.849 553.642 456.117 553.726 457.415 cv
553.775 458.104 553.836 458.803 553.907 459.507 cv
553.951 459.968 553.999 460.43 554.051 460.892 cv
535.001 469.913 511.237 478.107 473.934 478.742 cv
473.524 478.749 473.112 478.752 472.703 478.752 cv
1 .580392 .372549 rgb
f
378.929 435.725 mo
364.064 425.35 350.462 416.207 338.538 412.6 cv
339.238 411.902 339.967 411.216 340.724 410.542 cv
355.301 402.304 371.257 394.873 388.404 388.487 cv
390.477 387.924 392.608 387.37 394.789 386.827 cv
388.649 399.102 385.102 413.751 380.407 430.271 cv
379.883 432.118 379.391 433.935 378.929 435.725 cv
.372549 .333333 .396078 rgb
f
552.093 406.171 mo
552.16 395.617 552.908 384.229 552.005 373.724 cv
552.377 373.785 552.746 373.845 553.118 373.906 cv
553.212 373.922 553.306 373.929 553.396 373.929 cv
555.595 373.929 556.761 369.463 557.326 363.465 cv
559.764 363.942 562.208 364.52 564.651 365.188 cv
564.006 379.085 559.809 393.108 552.093 406.171 cv
.176471 .172549 .262745 rgb
f
340.724 410.542 mo
351.088 401.32 366.846 394.341 388.404 388.487 cv
371.257 394.873 355.301 402.304 340.724 410.542 cv
553.396 373.929 mo
553.306 373.929 553.212 373.922 553.118 373.906 cv
552.746 373.845 552.377 373.785 552.005 373.724 cv
535.985 371.126 519.576 369.36 502.689 368.922 cv
518.22 366.919 534.835 364.862 552.583 362.666 cv
554.161 362.888 555.742 363.155 557.326 363.465 cv
556.761 369.463 555.595 373.929 553.396 373.929 cv
.898039 .176471 .239216 rgb
f
661.661 393.701 mo
575.84 366.018 577.463 427.021 473.087 428.797 cv
420.571 429.69 372.053 422.504 337.606 412.076 cv
364.317 385.427 432.908 327.414 551.731 312.723 cv
614.142 321.534 684.17 400.962 661.661 393.701 cv
cp
.898039 .278431 .376471 rgb
f
971.339 1209.07 mo
971.339 1209.07 996.686 1198.35 1004.96 1210.45 cv
1013.23 1222.54 999.275 1373.16 952.813 1330.52 cv
906.35 1287.88 949.367 1219.51 949.367 1219.51 cv
971.339 1209.07 li
cp
.282353 .305882 .411765 rgb
f
846.078 1207 mo
845.416 1233.05 837.569 1263.57 844.853 1288.37 cv
915.99 1273.71 923.584 1300.78 943.344 1297.26 cv
959.741 1294.33 1064.4 1349.47 1124.8 1337.49 cv
1159.81 1330.54 1185.72 1318.92 1199.46 1299.37 cv
1204.78 1291.8 1216.86 1288.44 1209.46 1283.27 cv
1206.2 1281 1218.78 1275.31 1217.33 1271.59 cv
1215.39 1266.59 1205.74 1264.91 1197.77 1264.07 cv
1176.67 1261.84 1139.9 1269.77 1116.48 1264.42 cv
1105.18 1261.84 1097.64 1252.37 1085.52 1244.84 cv
1090.7 1218.3 1151.5 1273.68 1162.71 1234.22 cv
1163.85 1230.23 1148.42 1233.08 1132.23 1220.64 cv
1119.73 1211.04 1116.04 1208.2 1075.98 1199.89 cv
1049.62 1194.42 1023.13 1188.35 999.438 1202.29 cv
999.333 1202.35 980.507 1209.32 980.414 1209.39 cv
956.825 1210.74 944.577 1217.38 944.577 1217.38 cv
944.577 1217.38 904.359 1208.66 846.078 1207 cv
cp
.305882 .376471 .603922 rgb
f
493.824 1005.24 mo
458.302 963.394 399.36 900.357 367.812 884.884 cv
336.264 869.411 264.122 801.762 213.503 845.208 cv
176.185 877.238 180.451 924.926 195.221 980.787 cv
213.509 1049.95 243.531 1092.96 312.211 1134.86 cv
366.471 1167.97 495.125 1267.43 519.088 1277.3 cv
543.05 1287.18 666.566 1310.21 760.307 1320.81 cv
854.049 1331.4 931.763 1341.36 967.222 1339.44 cv
978.394 1338.84 956.17 1324.05 955.631 1285.2 cv
954.994 1239.38 976.951 1213.06 996.726 1204.27 cv
1046.13 1182.31 681.895 1148.23 621.702 1123.06 cv
595.047 1111.92 514.164 1029.2 493.824 1005.24 cv
cp
.341176 .360784 .458824 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.1
%%For: (Ameru) ()
%%Title: (grocery delivery.eps)
%%CreationDate: 4/1/2020 6:31 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!"hCg@tL?>hAlaEBul]m'XD4:ru$<"[PCna,i+ha^u<$4<L00rOm])<@8fMON(.]E:V4oAtZ**p"m/]=NJuR[8OPYQDsnj
%RRl/\9dEHfpC`d/\-^W+rqasX_R&f^cl1b<Uti2TST<+<="e`s6*7iPX;?Li.pK4,S#t4/p.(gBfI<?<?ODX66)@KZ4-?KVMAPnZ
%HHSIsQRbA9hQ.LH$'@!Qd6?]R?ao5L)?<!C]6CnfV5Am<h59klf]^&Rs"kC[P$7[R`=Mj^=h3(#(>@krmF)]ZVRM3sqB0Gce/rA.
%eV$No/CGUR\_sjAWO13GM-_k3Z+ZC;&Bfpd#$P4.Q(Wt-rl<CcW8C:`gCX@J2"CUZDM(14B.IC<*&Z(!?4M$YWe2u<%\5TX@h*n;
%)eb?MM%_u[Wf9WE*Up1&f;7e*$JUL:(j;_Hk>&0IkO0[Zde$Ea9k+Pmj]Q]cY0^I$2]R2u#Cip(ScsgGd*rl"DRL(us.p+04G-\p
%)M\7/I]!f8?e<G;3\rXX<4B)10*N*E@rHmFV82gDfcpH#pGa]\c[n'kAA-F--*/HkmOU"Qea:57!$Gq>8Tl%=mBHSEQ^Y8iPO?CH
%]S)EQ#]+?R,c""%.X2<DV(M:eG&L=jN);8u3'%Oe@?9>c[okmFf2aKWD,TYAGfNULj\cUUkl?/)0A]4AO8Me.s3o/fc*uFn/R6&)
%*G9R?Y\p7[%P[QfXd#qhE=XZ!RNX)_&HYqsBDSgF?heOr7&QaQ_@=O=lh!KRL4TC$cV*pis*1`qTg(_XeiSkng1gMhs"($?oogNg
%-7H=g9tK"U@e\q6rN_YiA3<O*2@DqlK7<:_8JTC-V(i)#5+=i)rKY+Y?g5>'phu\k#t]t[oEJ-oS$h]NV;@":gheLi8r9<0ZOpj>
%]h4u!BI<Kbh6FH4hruct3jRW+]s_%\''M19OSC'gF(pL^3^ir]CT9_uS1&2M/%)s`X'[M3?8]_?o&*%2Ug>LZWnd]N/`!%/Y-&d%
%CV)I3b\!bqSiEh'/%pR3*V>tMQeZDXDl.-0DWbFAcl]00n8+dr.A&I*NUq11f_@i5hOS>u\$;U)aJV4<`r82F-QDtmRcXp-BX:Yb
%i\pq@YO$?"GG/;)-h;<+/2YPd(gP#PSsF01E>&SJE]`L@=2!=<OHqjc0/V%7T(tq'hRMu.0o.4[81)B_#1HCu4F$I^KXE]Trkn0M
%M,jE>mEYDuioU)ZY$;*F/i8':q9rMVnXjQm7Xn+[+Z7FjST[74CP=gHS'Ah35/m,6V:5oggqu`Hg`g4_r?M<lrdhc3*uBojV8U7R
%)R=P;hrT3Yda<LB):>9]W2^o+>-2C?\*tW^(4Jqp$`4MK'7Z?AmIM/6dJ]qh1Zq("m(=?K2ds`uD(!#>S?=]o$chE)9pJ@+2M=hh
%g.\'6dYO>QISZk8]3$G;Z+7U*/+L&'D)ANRBqCD-<\"C7:Ifgjp/nnY:M`DY\'b[gUsI*69\=>_gTeceV:MX6(>FQ35oc8OG+KNa
%9,[0mD4MAE6,"4alO\$T@;2)):MOsYqE__edbFO+[^[FG/9*;FYBNZL1MR0W<BD$n,_O!S6mK#,X7'JS8OU*I$MXB6*-t<dedgu9
%AheP1[&uAMMRB/"m:YJ],FbVjJnBRUVANP%Fe(5#YThY-eLUp9r2*JuYVLY.%s,R$@Vr9j9uRn1WnasuB(f1aB<KDUDl@]SblUK1
%Q'_/aCTbkjh9;[[\JV8)K?@F->L?]BS*P*9?#Hgg?/!5%Q^d;]s&i$!2aEjj[u"hNkFA$;cc+V^/Eq5Di-S9\3%pN]J,a6gh(7hQ
%0r4&7]9E];QT8)&Q<Y3m5,k#8WH:VWp/t@@P[MD;LgM[`9Mu4B>3N=sj[(OTqQ?]"DQ]V'[Y"2fbF_4"Ma7qIETDr("9jWAH\`n9
%PU7eK`1p_HK'U%-.PlqC(!%q^jstHZ`8BaQop.eEq4eSC2Q6LI$H`qX]\=<H0saEc9I%R=d&oHq6?Daj7_KSeibWE"PDO-1rr04r
%>,tr=f)Buf9PT&3_HL-6k%UM+*#&eNE3-8?rt[nm2JS\&%3l(3::m@>1h(<3b&%kb/)E2`)e0ieS[aW`="i1Zg[RrL/&-!?#F^fn
%CUmk#Kq=b](L0mmSpFa6ll2C?3@7.TY34o62@<80[lFQ^#*FEQSF0jNF<00B3_cmOIppCNK0A%;LdQYF-:iUG^sXVe<8SaeR:%1:
%cOOl^lbCdt\'M*@43hI;VjZQr.`'_V*6a:oG:.'q"ZXUC0(%H<qtR:oQq-uM1?7')m$l:0Kp59AiQO.A5sD&e1Bg'.fm:>pBa2D'
%@lWc9GoJ[cD^1!2De@3-EU8n<%^]gt7ac^k:b$\K5\SeiZHD9I#euhLDG"IS0>*]fj\EMB3(Jh>(]qViWZa;M;(GC6ade;a)e59L
%Y;u.L=bMiEf:O)KFVCd!-#Z0om*2fWc#=B`%8;^FM8S(\KjM`SR[h4$p_YqH:Q)tC/UhFhC[.=#/.#]R(se-W-o`(Zd5$WE3mM?7
%*]`q(pn>"VKj$(,*!@"*_'"bBC>b:Im4TKt7<SS-%=U(3rPa<'<o!&!$)^eAiAK(+^N>[L9s38d<!pSEn#5Re)DfKUWWa:nL9#/L
%1n>J,JD&nR2k_'qmqJc>^lN*bO5i1B5K;([_N%PHq90,(;iba#73nb"^;\2<S]S_j0ao536gA,sB'Mrn/:)`^ZX-F;"s]\)/!Y>k
%4-donBVG!@iQ!?qduS,.68Ks[WLf=-;DV^3Fo7g<V,A1l`PpJ/YNr!-ji4g+;OlH&Wn51"V&7rH$-m#-&D_8&>D^0oUVIX?rfVIZ
%*od%n:MQ(J7#TN+]c)[OEOSO,UK4S;Ta8VHVqS[*.&$*a,+U)N'k/T!of+F<I<'\5P\WQ.7e06X:atBMg_ef1Fe,IC;5fb\Z!_;-
%GHKd-'P8lPUe$_0S!eRK+R.2s;5VH_0on_j-MqWL-:OZI.DRioTd]Nqp1?)r,n=fe4o:0a"3_&:RIOCDi_>;!M6iVL7uhjGb&#+m
%`)$nT,Sh[AYF5AlPafU.k-6>`VX*$5=Hke7R<nim-33.>`hLD7HtJ&Oc!sTTjFF4c74I)h=Hke7R<haIMdF^8f)J>qbq-la_ue!t
%\]`YYSeinND13/)=5dS20&j@C@Zi7O;=t=G>K8b,hf8RPm>eNo^Z*n.B;MoX9rkujY;.o3CHk8>`14!L3.a.rS("c*?(2/3[b7IB
%\[XO6f;=t;"TZt2<LZpplVY(#YVm<Kk#?1meSY^oMgC&:IrT#9//#E/8+:Hqatr,ZS>4L)dE%fP;2c`eUX:'@/u-g#q4F=c="4&,
%^'P+)J,C%QalJ0q#rb><T3CQ0X?aNkh\i8?c(J5^=n-"QMRSgcV;S^c)u]8<?Yimj.("'#.YL4d:24S9\hl3@Qc=t_d:HXOk"fl+
%*(?LuW\cZARS0]4=t&Dip9U#\-:8mgk*fj,9UG`q,j9_noJ?GiNW,%74\5pCdm1'7nR^EBUHbCi:*u\mf$iD1'>#?)4&`>8rO->U
%B?L-+D)@nfY;YYt;CH]M0qM15)4\7G2ehR+H=Kj(Bm5Jp>i:S<`3LO-brc`N8_)F%=Mla\m5MTeFIJRV*FfVT_OLDq?r-M<i_\Qk
%#nl/UYVaL8fs_3!dVLYH$o[cPnTrX,e2,-3ZeRaJ#44AobPsD_S4,rd20nPiBL)/_^Qk;Us1J^Rpu_S5\c6mAs1M$#S,7\b#O'G2
%^N9GDh#I6ZG'HCQ^VBXlN6-o"n,Q\4>"k&hmdm"HI-3]N\^,IH/06V9o.?5':HNQfhj>:'M7o[`a-[r7V,I>?r'i0tZh$(t8/>&d
%1rcCFIkWVM+YMCf`2jm6f6`C!V-u2bYE<!lMh>"3?VF.fM]jp!R\utI`kAbYmShDBIkb<!2Kgd`ONf@fEsp[)A-VY'H`,+T(/%o$
%S&sf)Z9Kr*YFRP'TXI=Q8?bRrX*drTqd-F,K(`A(.';$hL"])4p=t*T$/4gf0P;1#>HW/'UL*$I_lg6,UnCQ&fM58:hdTak,CLqU
%VTG*+CYB!ST4i%5:8r6fRK^q]fXDbbOdJE*An;:9E>2Wjo?Db'`*?g:m=V$)CkFIH4'_/1$kn8c9MU-UA^J%$[^*I&ASua\)d_Z]
%Qau'dDKr_!NOe"ZDKqQg?@J&9_9AV^0A6cNp6W>KAVr@laq]7#/33Lg#,Jd1l'_u?d-C>[Ji%TcUmmZHH`^M@qL%"BZ&*1j"I4"S
%Y>?9SBUhLH&?!7Y[+C_%;r;!:lV,7M_n=:51r\KM5>/Y'&!P4q9[!QZS6'-f0((^&_DLG9'2l-5SjUL6ki^1[VD-%noXA1[\'@Su
%ik5-9b$R*3qU33*TiD&=rq+L^P[9eIaqUVjeiYI4nqtXRSUDDVk5+=V.qiGgc(GdBEb5O:@_@:q)F[R$igKe6mQJL58sVP52^Oq.
%SDRnBq-VVPIYLtKb,nuG)47k%q2KRkft!?XL,KDX>1.L/`^=DZ[QHjY*,cL1q!nR@ZKW2\2Xu"%'J#PGpRBfIlo:Ip&)mbgFZW?5
%4$>[F]S,qWL`Jk,m231&<6jkJdjP4RBKLru"7-kEp+Wscbj?7r8h=T9<p+XbRD4us*FflO(spX`Kil/DF8bGPk\$g<6Esgp]W@I[
%"D=e(`Z@ftpk`gd(rNj;1K&7`H9JZ2FdF`NH`XU7B]hs(b"0K"@rkO]"o2d"XV93AEFe9+r?o"^>5b+"DAPe\(]3P?k]^.3`4EFl
%hU@Ee;pQ8;'8Z@O2R5P#1_blAcO13\%a_hEKnaJ9SY8#:GP5hD`0*>[S+UM9d`:/j-Z.Y[.RQZT`iE)+H5oq\5.OtsmTN2G1]CXW
%Cs_W+r#BmK-_1UlWED+dhOHVMYuH?i:\L6D#Pj>rH_V"GET2#94PVI4(8a7IbIC-[?ElCE9>Opt(4A:p'7Q5U7rsGPN'h?@'?b"4
%SU_1*+GW:BOHg^U-Q$o[_S:4A9N"'FlZ*)TDN_S94H_YTk2tCQ>aq3uF)u3dInlJk+`5K3\XT8:h8&Na)lCs#.&AVMqHStbc.0A8
%3]C.'k3C`,SXZ[$QQRSgh>i6^hBo+*V/pR<8f)8!Z_Z"iea''<Ag%XqSa1>U6(a&Y=3o&E9O=]VR?Kf$.!\/n?fuPXVAXUC=&f6f
%-1%$9qOAACq";Skf+c;nN%qn1ii7;_HM+(3-siu$<)^J-.$iUP<b'el>O<Mt3*'eMDc0CJo6'Df+j2V7Euh8C8MnQln7E;kDD^s'
%EI#CeYD9NR\Z-OO8&lnZF+a*qB\R@<QP]OqadF;en__W^G(TG^H)r:iMLO,=Gnm03mcj9IPM0C12]<3aKigZT?gfH#Pm5WP^"-p7
%7_\cNVpSfL@T'gr&^/\h1f"Lu+RZ*!GQ6Pu>GmH"0P.a#<GP8i#+ub2>HW-Y\^J&P-ab$.UTd`pU#0>U+X2=^/3`1<9[U</\H,c\
%k<bQSDJSAoPLA6o?:LJ'M(VP'[rCN"s"s#K+;R`nr+([RL2aELO;S6eR1$<ATkH%mrKL,8Q\ji[dJoe3FJ)dX>UZ%%U$/A-?!lo`
%k/Qfq;5W#)G)$U\h]OZc6ZomUeL.p=FIL]#@droG;&+*Ip0^\j*obQ)M[>R)3-uJW1=EW:B6&?Tn,8Z'QM;C$675^'\QNgB=+aWD
%A^$S&S2pQ\Ji<#?0b/i.G30WS%s-kmFZS+'1W]>:CX*l;$?)G'$hF5#_:]WNDWZBFelBp>7,5Qr5%=tZbbAp',G0:O=(Z"uFnVDQ
%]9+b`cZilmC4V+t;:f2&B_YO&\ogI2a@qcdKVAD`p/AG3r/UTn34'mr3")7$<i?/!O6p2+CXZ!)DJG;p)k+*X,<>/8f>uUXa_A'&
%Ro!<5)+1`tqVi,HdtBWs74)En`MFR2X>7UV6dB;Z?ZHT%@d4s\o*DsBU^(M%[t86jS;pLY(`AJm6gCgE_.SIucFcE%CO(7F2"Thk
%9euPB-4Vkj:>pBT,gJ-gKQY^8`:1e9L>Tp,eb/U,0K$srC;p.>,U55SaAQ?]8DJ;@HTDD<8V<FVo8-U^U;8"SiZR:\YZ[p4:?0!_
%0SM3A>ps4T%?o2BSTZ^[G)tqqdrX!Yh":+M\&';,kt:(3:kDj"E3;hWB>qA7CE]"YBa*+9"DK$mAK&UY[8Q`R,]7\NFSrFNgS7WU
%QqL>dB7dI1/c(gKrq!Gce)*^h[res)J5XoL!gFM/qVO10%FDEUJJME3I/?<YH:dF8?of];)jR)Na[kdX?X^#Crcq^5b<GkTjgg+7
%dUPmo;YW0M?s"0na!k_i_U5!h:#gj[d,jX*r:ZY0qFYUS-VPbiPPFXh8<j+J5ORQtBT<]WK`dT[P0kM>3/YeS`h1O_Tb=`eJ_J-#
%8c3]aIb:Re>O<bA@d0,]M7<N(an>\mYQ*r(l$o,XC:\Immuk+nd(YDUgp659P;#;laF?>I;*Cm[0\$,\_WdoJ;)@E)kN^#]Q%[jr
%ThQ*'E;VD+!8QMa5,u56Ca:(i#DGcZ0iJC1dWTT`Ia^_<l5h,$6TuPcrhsn)!</s+IaK^Akg[K>Q$d3&Gk#+BFo8r"Cor\.1=R1k
%(ot#d=4?I7Flnab7[dDK;l\?*(W"ae7_Fngl`UHHTASQu\V;K6`eP"$?\4\uT`($t'4[fbm_9A_rr&NqaiYE[iuLQ+<f1"H&a-#=
%%LCZ6$EN(EP6LTL%Y2S`Mk*n\?C_/gpKKq*[8h`6"qF:N(`uZU"Pt,WO5Ti_la^/sgcGC\$K-78.!_jk0&@R'T!Y=59$3pt4PkK^
%$,oZ.[P(P=G;V8sPLo;68p4ckL,!jEZ/2YF7J'oiSc%&42oaG.]k#<eLqI:\"e/.Ibgbr[mHgY*-K,"El>EqU2Vq'HM])G+C?,XI
%ONK9!&)^3<+@5pB.b7H+g4^/2=MJ5unm='4:.ZC%@_l<F2`DV#rq)Lj-G&=VP)MG]`-.hteg[*mM7n51e*)4QE$;n@WQ1'mg!Z`J
%ouh6T&s?JRl4/9Bl[Jg$B71&7)5V0p>Zdt&:?c)FDCX3fc#="%&tMLc<4]`\C8#ci)22:SHM_`t6DYY6Eme0KFJiD?lk`jmTNV84
%0Xu0bX7.)B(H'Y.l^`4YXBG"`P&!(D+5)(9fflAOR\^.RiD*M)3U">qfZqaEkob;HD7G<>KdLi+BtSI8dHW=7*')l[HYaB76'FL9
%Ft10BdY22i]!a\H@:nMp#DZgd7X$u'F)T*/%k"Z;&N<[,eS/4goaKL@&K[(=IChR]#lE:Am<bOLd!(Y862-g6.qjAB&r4:fmDNV9
%gb,+]/*6Jc!JDJJ;0c>84/gP0o/Q,*`)+lnT@i7#coUUs+C@]L5G2k8,.H%q_/?1,+;c*iae7jD\RElVftoOnO8(a6?\G:EcC$`(
%^?[c,if9-rd7^?C65kk1"cjG`e[o*R2uD^[QYGojGEd(Xdb`CN95i_D91R@6<i`]T5HQjLk2j:_Ab`LdL`2#[@cPp0rM39C%iV!2
%laIjc@7rsim\N[F%RJfH3i9e8J+aHIZ3M.XOm\Km(I<-+.I;\[7aIb5\O=_HL$rU4kJsc1_,dNJjFU"_8+4))&k'<:mPAsdS\dgW
%.24GHA8a2*kl!MeUAr_1M9*0k]7\DnC&+C%k1Hc7^o@=&NV;!LJ?KL1rb.AkTN\L`,+QdJ]15@uUZPXir&o9s2"[/2EV#fG+,c)J
%Ee]:V5&_H((hC7mZ$Ks6[#PZQ'rf^@H>+3&1D6TkH9ht:;Q^1[2NaOR>t(Q)U"1hDLnthQT!i;n.3fR]]o2M`^/M"aeEIDoS)Bq<
%3YFmXjj&LOnuU38caW5Z63TcY`>s\+WSQF<oq8j\lg#Mgq]W*\;o_"Z<kDMLkfUn?KM,uFMp9!$'L89(gVNWW15)NOM1\Qu60,P@
%35Qm[M;@VdZdC=Jn'!OVM(sZVc-)j*W&5AAjTb6+)!ClAp3$Xd2CO2H^M#AS:OX[9,">(UXM@Et!um&Fdg4W*4krG$YTXi8esiM/
%1usZ1%q!oBrI5>\j#/J6XdSTXmUsL.1Fd:llFlj:au)?u*S$kap;9X%.X.m)#52c1O0`!rP1%?hdg0tZU]XYnJJAb'+OZ*:bi4ek
%qNCRL/nq!IXp2aq4s2[OFZ\q5Y3/9Q!;\+HrU>fXl-/7Ymd%K3q-qAdQC6C\41N:EU%c(W;Id^/0@b@GJbAaVEFPqHbTkR]?9Y]8
%Yhp8\&>%t#Si6S0K[39+6UX[(S2]0,eZP]?C+N[WQZir^(Ys5KLu*;DhaXS;bbJ'o^PYKpm&8',dd(TU)3ROfmWZX_kbRANRAG"(
%cjLT']\GG\dIJ;6,tI[qZO`I1b&BiC/6@ZDV(0E?_qlUC<F+APXqp3r.8sL-],=b,Don75YO8TQ4sB>,Qk?9`&gomV\L'lWbn9H"
%mqY:4Kg(m:I"J,?SR:AYUB[db[-M_L?1'WO#i(CSegie0Xe-03[*!$hW"Nj)kfILYU5`)QNlaHMVr^M^VdlEC;JoPDN@V7:^&.8.
%E6FMYWnJiQ%II&pfBCrC0M>ZY%s740b``A?cW>7,Q;[BfR94L'?XFf,o9>(+H+j%29A72CDTnf0BV0njT;A]F5i!m]%\(JZDO^s`
%*GoW5mpgOp.Q/cq+'6f>eYuYd>m\^(WD,F'QS4BU-!aWLd"lZ]]&Qd0BUi'U;?:Q#=41Z%CE`-38c\!kMLJ&,j,1PRna1A/LI*H5
%*D5PBQUj;"pa'*#I&SJiWlB022X??BI2YLZbI,gq\:2[n+PtarTq._gR]WVCYdY&cK2G)OUN\f2YAp,.XCaFn6MG5gH-s41Or1lZ
%.uDY6\rpKHFBWIX8sM-\:N^D/:[>D=8K[f:3[\4'["mI<MmhB<h[Sml;MN,6eYT`Q[G\+drVc"fcrcqrNe&?q,h>m51Kqc9G_PPi
%LXS9KfK([MJnAuPBq\VTL.5:?p%?U?k]iH*H,F=q5E/XWmb+qk?g?3Y?FDe]mYJ#Y"'nE=eEeo!p)%t^]oL5\0W$?T]W5\!$)Q"P
%r/BiBD\TCL38C9Oeb+!E;WeBqLO->7Kn<Y<m3:g4c0s'tA&OXEWS*0F?F\a(VcLG;Z;`3RDg%gipr^*b!B/g)h8\_!`G/B5>&<Rj
%bp9_UZbhqn,d!:k8t2lEkSFsFLKt")JmMJ!YiQ=QUeEJ]lAmH,ZsM()q`JWA*@dL-R<0:sN8kh)$:bNYhUd6*+mg5_dgC-g,+D(!
%Ht_jsJUJmdI[Q!op;SQ>US[D*s$OB9ff46u>'cl*Y#gf(8$`q<p8aI"<Y7mFLe^,"J9n4`jXQ"<DQSh;K;A=s7Ej`-h%)a8kOk#j
%P(4/i9W2jT;R]a,-`HA8c-r??PA,1':f=a!Vp.O7>"#)].qt@"AH7\YWpm'+(iRhsobG*\#/9Ap9,VHH4dl-t`ba\;4^41DLLn>K
%1\!8eT4+CH(%12Sa+qo[FU,u&U[K6if2eLP4,C"IhpCs0]5K$RfN51a5<+QRGSj,/?*d]EU'ldjNr=e'\9N6n1b_d?"plK*$#M1b
%O9C4&O]LK1o:VD")i(Si:eT`<Q5"&b[frLs.(&KaFK'^%,\WXLk;SZNh;X"Mh_"M,hnVJASOA+702\o!Lm-gO]F6[]=eT(nP\]Qr
%6j,nY&i=TPJ/W8RdB6uP@ZW"E6+`5W'\%=k&/e;X1b.U]o#\=$`H*STX-R6o7rL(=Z_!4QO=4n=IbJ"&\WuC./s)0[)?H>C5TDS>
%>\o]FA#-0p;Y#NBq^=FL;\&eeET8M`VgKf0$N"0'Ug1;7G(aH'<39SW/VR)EU0TKb`!RJJ$-eoJ"6XjG:3a_b%ba<gL^mc@&r-SX
%e8+a:H*^g':AK*."_\F0`%,Fuc@'r`C@+/1W.=[0eHr7Y11t^NMAA#m0YFC#4^2Tupk<a-V%R_Vf@24l^h%h:'X^55%F8ehfm9c"
%Nd5)e!OP#0\@tl[M`9Tr0?75Q_f'X'hiGh`6\VTo:9^]S:XD?`oC%"s+st5_IUlU'BjKTGPq5@L'6)rd]st?[?X2hb(0A_3U/fm<
%:Aghk)hX^H.ni>4g>R=TH;Z8X.rfg0p1#+4U7YnV$t9?e&r0?%S`Pmd'AcE=`WBG&k6IOk>V0[fqgbA"#=)5[BL:e0L=nP\4I=(V
%$Tf90B_Tp*ldMGf`%/FGiO4X=+\C^S-N[<%PQ+Q`egLB#IIDPeQS*a*l&LVI(pUR?TaY!7!mL_RC.0?/f;!7/pdfWZed0D_%#24K
%bY"MW^],;$lcH8Kpf=uYXIg3\.eZ2YkJVu*iABfaSb=;i^dbLCLRC^5&r>BD=n]@*U?aD'QFkje$o#=<3ot,)dXP@$fKC"rL0r:b
%/6eIn!rZDY2amW8mRS62-dHc!Kb#JgcBZES#e^;Z&Fl+1X,UZ%$Kn'SIo,n]m#](`VErXs9EX=^hI4SPZ+eY$Vi(.B=(Vsp$sU,t
%";:[.`eA)fnYIA$7\SD@`\7$B1USMgPNo6@Zn@.,4KkA&G1E4Z!@j\m+#FYu2Cqo'EZj4)Xm=>^Qmmf'P!6s)D>A(0cDAIe//Fa'
%]D"K?Y9,p=^K,Tko%^sgS'5\*T2s9>cYBq\kARIRhTqJqWRbAFqUqaUZb#]'l/NfIam/T?q`>bA:=77'>!)_8kr<kqUQt_F4'OH-
%DQJ7]4kNkDBs]d%0<Bpcc,SK2X_-5OGrp*@m+(gL\e?&obE!\\F/d[fZ[oZq9CHO\0:-$Jp"hoMkIuDf3:E%]l"YXY7?Gk[?[aQo
%FRhHTmSW+^jo,idP<1XnT*ub-Xs[#Y2m5Dm9HRkFDar%kmC2q+A,RVOBk+Q9W\3I8(-;91Vkm=\L<hCML$2A$o[AqhWGGPjY+B7N
%gY$Z:^"ITR?gd$5k4Z9DodBKpe3LD)<qc.<k;rQ`mos\1Zumm_oY96W+!g=)e0<`b8fa?iIU-22DAM&0MqN17G\oUW@,G26]Nk9<
%]TKo-3hHjB%j&K2Icl*\==d_8Vt0E@l1VZVg,'id]Oq!-QdtZikG:j`iQ;%/F89;n]mXkg)`Fq-Z1e+NVJ4!&Rnk!f>4I&aq9dLA
%6a-@V;;(O^[SH43ZaaR!?`]^P+cEnoXZ(?BhYk5OZAm:I3W$$GQYc(P>"l(%R>SIT<I8u"]s*XT>/,-c\KY;n+j"SL&9f1Bg%smn
%of&]XX4GC`:H\(*g&c-UZ$:3mfCD3IM,uPSe`4lmP"9<fI8eiXbYNG+EXrQDp[YeZh`!9L^`Pc3.,9NR0huV)3W.(kj8?LfC&M`:
%L$G:9g&.R6Zeehh"Mo#9ji<E@=012@ZU]>7UIXWcV6;O:o5/YP9]PMPgi+1sQ$M4l_Pc6'bf**LkS6)4k2+8ANqp1Vf6ZG4pYosC
%I@0oCS3)/oinJ(=E;sfFS@j:spD2W":@DdNHb%UXo!aTsT2s9ORZ-k+n5p^pHVo+(H#,+JaZ+4f]D:76UZ61dX*D-t>$X,2B29V:
%FG>jkGi!nKhODkVpf;g*hVEYM,+i'h]hkU?T!^lcJ3^`/HF<\3:#VSqdUV5P2V&Am\'p,YgRZ1*>rpc^8VEH#[WsACl@:R%2iEPE
%S*ruXB@`FB-TNFOEPlBJ=T>[ucOl*u=BWr!jlah]eUP*Vb7-*lJ^9PO<eo!-]87TZoBiI?j6%c,c2)Hjm7VouoL16HX<50cQL93.
%="EN"&^f9u6%8?1@juaWp+J=j[o<)D]Fl9uX#%"@fIR&"2[I$qpLnVlQEk/dRk8Q\pj,0l]sj"Sho"<Wb+$,]Da3&OY+3RAf-2l"
%(Km1RICN3Z-=ZRKjtb][/r$Kp]12W[IHR.6nn_Kap!hY4"J>BoIVH!kQI!,1Xl[T!^S#15Del_`ib<itkB\#.gjR)I-Y5JgZbj'2
%*e%fcaF%ikWgQKH9g*oLrq7t(nRB$j5\"l3rmJsH96q].qkrWOl*F1[11GP+>a*I0h!+cMK%=-j=!VeWc.ckS7Ah#0HoeY+)eY5g
%K&2"!SN,e&l.6<^<e%l2l2AL1(&r%q\^&^,`tpF(Y=&9!Z(AL.Cm=PW:X-iaWIM\_TFa7%i[kbjD&Odmc,E31Nd@5YdU*%%Mf%pA
%()S#"FR[$rYAL[BM1-90\/DVOq2df8niWuQ.aq`_et6MPeE+jmU'KHI1?SJZEVc>Lkk+ksSO(`'V7P&*Y23)Y(.H`.n(+,tAo""4
%U2\.thYs`f]ND7Qd_ABlj+UW.X.PuuHR.jR[u[MjYRt_.cSGD%VMTIJkV$9oSn5em^X>nNE_h+Z57_C'"0'ZdH0Y-7T76X*;dFM.
%L7Y9S5kKpD`7%\,QcFn5^\c"AMc*;'8$*)uj&'J%4H8&D%uFjLAI_\/*f]p5e)9i@Vpo#Ej]T(Ep$'hJC,[6+6p?+WhHd$cYFj1V
%5,=sOan%07h?XX4rDhnie<.J[s"YSUF1QS*R&9nlL>VHB0B:JToVSm24Uo_qQE'h3GT7c)hhe:\]jDN$0_f&@_*s=:9q6"X4fG!i
%+n]4>IKaQWh2D>p.q%E9XmP>dHLN\7?Mk&"B%VC.mIF\=-PG)i3Y+AT#*?p/obmH5mIJ9],<]IZN;hp,YZ5Q8_rJI60qOj,m:1i/
%]drE`>'530;Y?s*(ksda1[u@P+:>,2f2mAZk]#A<*XafPl>P58,*:BhrSC$O+4%5W"cRg\HGf$p(oK+cP1U4ni[nR`C9R@rp</+"
%dYDaIeFFRQK1"&h:9>rEOQd['ca3$:Q^r?$q-+A-?u&5NZKd2X5k6PL1V&F'UH>[*ZK9EQ)k4g)DtaraMoZ`QHZ-:&'9u"PO'(4h
%[aqYPn5==?ae^@W-J[?ZqUf;(IJT=NBB.887@?=-m(^l[Gk!@!h,<Ap8FP/N],M!IRjSbb.iVKpJ!sqL/QQ3sQ/hPuQ[Jc&?Q\-2
%qETr'S&T&[jmZ\JXB<T#C2%9Tc>paRc"B2%MZp'B*SELn/Y.=^G9bgI<3dYF'ah1HjQi^9C`=5LX[A^,lOS455Gk\>#Z)ei]C5cZ
%ne+<2@0,Y#.PEM5QV\[g!br@;;i5^iLA^kAVnr.n<:cNlLXunM>&8N^4MqeLn#1P"h)NB+p$GT9HM0)f+sZO)$qht9<uW5&A6pj8
%C9sjT4F_*l6]NXrW\F'0(,&RrXfl')GB-MBE-V3dd^<`ES'(G5HM@(?!dd74"f&brN7'`9OZjQ?5o1''Ah)g,"7$.J9i!nh>\^L4
%H[;q.&>$R=L\[]95HV;b2K#-X\\.(;llUFuKFY>;?PAp,l%@-u14=WFbq/9IfsN_Ehi_064a[gfH!NC>N!%Z.M`]V`O1//(`Q-"B
%#^f7lL/X`HR>[VI;H3?bSM$Y<6>uXh\Zd.2lM[Cao>YOE=tstrchfP5OiaeFIS=lSna`;:4h-^5XEB&beq1""$GKR/55a>c`U2iV
%=*km5f$_1q9>/j#]7omXQNqH%P)"NHqJ,>+Y2;%JMpBG9Z/%rNT!ifpk,#%EoXm$XYF_2[ksB!2UY.bZmB#^q4lI:0N$iCJTE&S`
%;jlI!%)1K;4Nf^TN+&m%DVaTiLC^$+EpZ<$qhIQ%>H42og=k]37e??FBDDd*.h7]E,>s%m8i:'Zqt^0[d]ITWe_XCmq-;Z6HF8-=
%omHS.9\`HnAT3^Wl2ai(ZXiKLo>)4PBnLAGC\+grg;W-edGgk)-.;OT-*kd-*%'E'46>"+**ETpR'aj/BsueH$T:3p5EJ^Hq(6r-
%a;EKYaLJEk&MjsFfJ]@6?W=PYWp/De#qE1ODQfU[n]i\b]6s81ALU]\b*<M@(N5Kus2;uiTA<Ag.9XFY32I#fb1_%2aB]7hg^EaO
%4kk=NWMK5^)YB]BZ3X1"k'[!Ys0R(LH/SiWs6S=V\'4$S/djc066FT_EHcsD6Z.G[SSar\Hsc<.Cm][$?km%TnEi";:u9Spj.N$:
%X01<j]btX8hE<kGM.I.'kB(FE\86Od4,`YEOhr>MaTm-@qp*4XPLoPL>Li;"N;MaS.fJYKhH>1)E&eHA=a9ebb?UF2AlO:X%-GsT
%gt%8J#EV4E\I6gMon-\rpCH`K4ie`&\b@_#8k52Hpife[cPMo`=legE!>[?6(+okJjR'A(]*ILdAp&p3m^G*@+,JAo^VbIWN\d:d
%hV;tW]2NXs24r\;mHm$#_Mii/9(r5Nr[hXG_p``k7[N5B?$GJtl02sYri7'&oiBN:gq.20L2F)sT=[eGXF7*upiofB2\3Qf`O4Mp
%?.OVR9,DDg>CCe*<o.)\^Gh!C\n:fSc$t%CD*POkIUB_*AcS.b["u3XS1F-lM0SnSq_J'2aX$r7^5qEY%jY&&gS^Otp_FG\oh\,8
%:A>*[UtL5Qj;q3PW%WgKPlLGn4]g<[HNLLeaNo'Jj\??#e?e8kG?of=B/a+C]N$$X8:3@H^"n">+a6['Rd&YYbnh=7R7:.,f5"St
%gh8$G#8DJ/m<pItbalm0%l`ANm<b1[<.8]@59sCio=K,CI.mXOXWM)b;AB0-Z+#*aes!3AW'#MSlsW^70@H>FBi"0'4F*GYIFSC_
%<`DGipXu*b2Z;kkTA;K]Is1RK\WrHk0@IbMU`Y!?G]UApaKOd\Ol[-[^2nX2odDfSn/KV^2J!AdB%'q0_"U:%[!*R8Y=ef[+(bCb
%AZ*-;fR*H'r8uc2[<LH]ZAE=6[UA*E754<*hSu&6_bOb3a5V@lQeF)=2ca:7]nf5IoWLW%4($0Gf1d'"^SNNl+u30XLOE6C^[gkV
%q"uF#m_F[NaKs\tmb-c(/%9P^hcsO"]C;73o%gcKFn`.&#W/`&'0EgNcN;Ub\O]-7=WeUMn6tbWYY"\aEE\?pi`>BoQ_t5e>;%n'
%G<WKWVtFY:#i&&3UM!5=%_^,":S69&1^`mp8.6Q`[n?;8hgPC0Cfp,EH1'qWKn/4o.?rr&pu["*476:$EN=0a"nX%<`S4Y%rY^S]
%B=XobG25R[K>f.oD6=nAYk7R'HIpBnUl@ULfN<XY\._<R:cb>C8e3-OBs^ptMoW#lc*WsfnHpPZ*&7utih_+L>DGS6eF!0WD6rHW
%B^0,CBukSU:O<=.H+JcTHg,kQFE,5UFS[Zg;.D/?:h?0!mO[,2>7^2YMM8?ad')nM'EWCDp-tOuq66/CX=*gF"Bo/kc/Q@4S(i2=
%p_J$ZWC,#G$C[R#gSh@R0bcX6+$G,R4E<^*L-B/uhSrjP1pfVL^baq4k^[dAY9m&sS)(bID&#.YQAeM6deIiSc]:=pKU&0GSf$ef
%U[l)>;Q)gU.tmseNB;+Q)!V"qG!!1=qlLP>:`#\jZMXD+:NLH\G[#P>:$5P5^Zk2O].AM\Ha^]6lL`eEp"hj[m_=XNLbqLLfHL+)
%RGnUp1fjr$CIal;]D%ZV$pQ,ClM#OYnF=J'RQ@&Z2Dn4XSc*53]ol`[$L!gH3uEs-^u]LfQ^dOR1RR:EXnT+k-p]o!X%/)OQJOo[
%H24[lB6@M'\m_f?ETNl:Jgi/ghV5B][/[M`L*JjL?[SGmP;Q]K>AM(?]diDqIjmGOj)7p50:>-k.0faHZ]k)Y)J9Wl_;t@hX26Y*
%!pdk[Bd[S#-H,Q^\VH;#\is_\**>58RIYl]nUl4<j,ANeTQ=3R&&s2Y@m134#s/8W7huC[lT=?`Pmt<oZNmnPBc';uMk/VCBg8#s
%%8fu-!]&b2[34L7PY0r[lVDGHmn*4UpA@;B2H6p8)sa]ocaaiFeo,d2cBgbJS<bh`gY>p.oU7%'n("^PXaDW3d=6X3D"tB"hQOFZ
%I3cAmG,)J;p3,lCF.8j&:8Tb)\qWKNHgeYcj%^%q]7W2u8%CEWgg4@PHn:2rh]?TsRe5NBIQ_&f5hVu6>r!.X-V`&n>3FPM\,9pW
%]:Iti"BrpFXERL@Y<u9-h#3c0=[Z=aV;gI6<Hta7W?fa+Vf1J-XjPt31HkW-lLON;8LOQ";s,,4*;<T]9%I#Q*PRKrKcBs^LUrVs
%LWLdPrRZtlg<!Ku9BZ/+r+oB$.n8MVqSmqNEp`$"S`.0a,&seI]t\;Q4%^U/p'uGi-SIBlDU[aK7t"uESFi-mi`Q_cPr@3#2BmlT
%5-N3/ou#R;o#'J`b.AIX[(io#na;[I)ogU7S2BO'_[Fneh^6HIR::L:`A@9pcedV+XM-R*\kTg]pomdYWdf_[qf)/m6@MkabF>-]
%T"cW+PC,<brtk3OpVU',CprpW7h2+tC9Q/HMdjfQlms`R^"V&<AQIG:S$?=_/?k>Q:JcK6rFYVkJ!P)7lsp5%b+Db\dYGBa"7bbI
%iQ3=mTGL2s=uZ=+m#LYp&b+pnp#8j:;u,7?#e5!^@eH@<:j(8)p8dQU7Oab[Waq/CM#iA(lJnH5ierbV]@hPG;NDe`T*8MBBg`h"
%Wk3Os\EW_.ADbo*+\Y!KZ)'N=VS&73IUPt)2G3rARFTR!Q`hq(g65`fq(IYu/0MpPh"+aJ7W3k:i5_JA[W\;1Mq,;?:M;[Q?H\?3
%E11Z,2ddb_r3o'MI#QeT`Tj!iZ(dOhH+^f#ZRcF[Q<+?Y%U5FAa3SFtfCp2-jm1/%GNIKi1hg.J1YD=uT@8SY`AUcmIues(JGo"^
%3Ne%9K*;M?$mUfe?$cN`!A=^%>4A`:.mtB<X.FDgoa=Uk[jMidjX2V2V-dK7DP-k"T1/1=0UEF,23.&s2qu6MZbPA>,ut\ZpG)>A
%gG"Yeqs/,o1G&/8Da*^O;fD]U,1;Hd4[`l7L78HaQWO4`%p*?RJ)AhlS#3<:j50aL7J`&"OBuRTs520r`1's[iE<lD&ua)i>986t
%%8mWtqSDZTj8*HZ*SY]"#KO%p5@ETASo?f@UeA3uMS=1G*JWON/Bbp`>h;P-6;jkKDT_^LRBWNSo$QAt.G(9NI4&UY[\+C?VXST"
%pt("3=/J*<5IBgBiODq*2J=\*7S*BY84gi:$!MCBR[-ZB[[XR.)OJ1G>U*gk3"h;7'!<l#VXMpZ5+6:Pjd;'n0SQ'</CULDe#0`-
%M/Q+WNOD6=#\g347q^i'PV4RkM83^3>)5^PVSQQ>PVdX1UmH+81l2N4l:'I$Gs']U[<],O_f-W"77p+pkZ_psctVK4LX*lX?2G[X
%LY;mB[[".oKd3m%eC@.'UJ4<O)mfan=#qdE&LuJ"Og8p_8^fM0h6q#F^=1aqB$.JDDDp`[k`?gSY1T!t2q]WYdK3_'9Y$b1Lo+b3
%$1LDhPNMC?LKeac_G(:S:cK4ubbR>kV+468,tsf?3<TVrBdU-9!W[r=@?krqSnHL'QCrlmjVW)ZZjA*7"Bt$Tdnt(r8/LR=&CE',
%9I=$jR]p/fX&Pl<r:OFsObq&R`7q%.[+"96TIaL*EErW*1s$<+4U'!8Hq2U*"/JY*3@W:_!?s.%TdL^69jbC5)'5s5FAh`k&Ju&*
%N8'I)+X+Z]2:8+$/fd2T$7BE]2P7/Z\2#)AXJDX*E[2dT,uCrp^@jre#QcI(`Mq80d/fXf@*;L,.=GT^jMQ*':?hIHJsqpGM8iC;
%?%ukd4uM>SUr,?404ds]S2%DZ66fFolQE-Id$_ZSJ^W%=9-A$P(t,h(QC:HE,:u6Ci1pXE>hs9*lk[K"`$TT$!P!E1mF'i:SJ\gL
%k1_dGR-#Z/U;4^B7SidZ>a#Ye:s8%IK#VkG7<EK45pR?pD;M[V!^poqdQ*^:dAQ@#$eo9t\c`Os%"_N3gU:r[-r;qgRLC.R@VKjJ
%M\LmN]&s?N<*)6<kL.a5C_-lK(j'GjZilFbJUrI)S9!05=G08oVR(:+%"(;TY(EUC9?0G[6p)IJlhdrTlqsea1<IG^0alrr"?0Mu
%`P=`G$/bDT,9`K"B17:d"HY_Ih7IU*'mKjrQHu,d3,G3g!%q\P*nI0_;_UZg9;eUVTQ\XiQ9s4q<(oj5g%KP5OI'RP7YgET$OMnb
%B;\6BRdDlkd#.'3e-L^<9No!SP;^uWX*%*)KW%`bdT.S0"E6cc\_X(G%%CW5,fLCB2Hh_m$:Z1mU25QSgq_<n!^c<8MW1$`8<O#W
%TNF1Bin7]d7-)/C%&'YsBA%#"Ml*nXRS9T/#"7^3nq06eaD'HoD:^UY>>cr4,qA111.ofu/mj/boe;('0n`:sJFoecN^lT0$h-GH
%q'')djAR'C/VMKp<4>VeJd<KAVYg*NNP.Mh.,&@8VXu]iQs`:s"sQ5[hb]Y7m*RN^$nNO!j@7j`n3DLTU;;MI4;AHQ!NO,.OJ%\M
%$,i'Ukn%:.L`S9Z#DbHpd3a#@bgSDbU:\6iWD*AsI"`n8+q;mL$Z(?l*tpTmq)g.:T>?%cJ017Yo4&cS[/"f;3Y2[3:/_eB.``of
%-QJ4U>Bg9XlGSNJdg`9tZoqS2$OM1h%!;\fZjjDr_@[:mbe[2)L/4Hpd1iti@XQ+fD7'O.-c._*9ZQ*0C,1^?'&jajE$Ef?Vb)Ib
%?&d<$>R;WS43il6T)dbV;T5PI3$]:g]HO6#4UH9(&dZehAM)_5qpib86''N;ZmddcPUmQQiiG_?d3gruqAIjFK[%q+*=8_p%(ZVh
%;;[J$%;Cq1Rd5UF'"KBQ)PsP1O*^/XY)BI1,]"WTL^Ae>\giMR>)j5ZF=U43i]KUl9U>_B/(`c]E#7C3J.dhhr_0h]<l,(;REj07
%`8T/H[K3$h3t4[$^1IF8U)B<<+M\*8Z-E7SLTS,1G?F\pd9?DXWm_]r5sTk\1PAd'01h8R@\.+%%pDWp_!%Ld-(V(Ypr#GFD%dP^
%lN.4u`JG!hihctFOO0O.K]G)S.3u:IDJ?Bj8_k0R?%Zg`A:!VS=TZJ`H'J@H&4^b!@3%'h$0l5UBbT)BZCoQ;![Y)0UdJTD0dVsD
%6ofZ]<%R8PTN83i9ouSm@7cX]LgDSTh^=iC,pl9e%dL82IA0RFo<8j`VaNre5L>Iq#3\a]L<O-SUe0a(*BOg\#Z8?H-1j,,<!?rG
%>6Oa7]7FLbFD.(skO?cQ)d%J=7%6`5<Cf^f#UpK9j$<:1[1Y]TYf5)<8khS@O5]8-\IulSN_%'Qf0HTL:o!!'Q3I+Y0L,u."C_\l
%!lKdUlheVfq2o+;?o0-<@!f<`'S9/C(IAp(a!""??pK:W6(hk#58"S0YmG(M9FG,=E?.U^cYrs1_ZKudV2bPtj?k-B@Y,@_U*1rg
%?q/5rfnA%#Qm=2.T&PS2U^7h]WC$gBnORnu]1]^,J#^VgSPTuN*hBQNEp3[\1EYL0$rAHG$j6\Y8K6#"5^4k-b6Gcd<"Y_R+u*-C
%9,-*&I!)hT<&eK2,]9?9fI2l,U:pi10@LA\19k3b28d+<E-;raUk:?%`AesV"Tu%HJH^cbE4Q65M6E^(L)(PpTH$7u`oe,E2*)"@
%Xbdc*6hiD6IV&Yc,SXI<_1E5M1inC%BgCMIRAeJDfX)S(+jkuN&,7<170'EV$s7ln*cjrAnEBu[.X]SN$2MtCpk4TX%3;Ur@[tOc
%KV4Bn045UUZ:S!l5,#@ndF%W$?Kf]\HY_"o(m#/jKI'3O&^XX9[Ls`+;&gj76l-s>,,(;60dD-__#?XOkL"9"IYq1;CSE[3=OL%X
%r?E;U3?XlUDLmgA/0kfYhdu*SBoSqdfXOfc872m)&0-kEi6pck7gqLF3.`nSdV+=MekO!eR&!FZdY>Dmh%>Uu?r8&L0'Ph*:c^L$
%B=0hVOZI9PGf3Po6gj3ZDhkO>Wg@=DKM.'Ap*RgkmcP6Y4$MDg,ci-,0M"/;pq^t6MSTiU,qgZ,!Rr(R4C&AH#\g21b_Rqdhdl$]
%nJ%_m6HT2C\"pkk\g,2e/Ed'f,:S:'^`<\tC!TV`>`p\;LSIDSK9HC2_$FR:cNQV?Tgrh4co5Q')Z]=?:s('$1'qkENM<0OR=X=K
%po@,2$.^IJB-p2.,WDPF_'ViHF<!+e%nIttKiXG6SJ-N@9I*&_aKTE3'M3<eWPCnl*/k-g&M*o5Ia`=b(4&*O+p]"i"qU.r6UC2'
%?/h@q/1s=S=MJL>g[UOpOjMoM$O](i4Gn-H:qQeO*\8qHd#?.5d<#Z+$B=9'R+r<(K/o.F5Q[g`3#>,IlS?e@k%?&DUQH+Akdp$(
%8EXTI=\9M]?j8FVI$EV4-Km3g"jE\8R)$pf=J.rUNsDI*-CVoP#qb"4MBp[haVH`H(Vq6!8j[@&68B<4Cbh?OK0VZ4+]g,pa#]!V
%ek&+tT\ucFqeRr1nVLZ+ju/s95.?X_8dnjD0,l5MDMGE\/Q5Inkpuh1YR?NoRUBil`3#,K)1$<7?0ENM#Jjp$7nPb30-H8HD,ShF
%`Oc>XkYLb%!Z\0&1oTjMa&Gl(=N-.&30rMW5EckagfeTM;2^DX*a:H076q?6)j2(iYJfNc.!.$8=?nhH>H[EC$,@/"=+pmA?(6o>
%D^;=ijrf?/0WD9FNM%?JLB,+t6U$/1U3D,0(q"`]Inmk:kArH'c7l@sRfO*nWll/3MQjH[f)_$F_kZPOqQceO.NV1:Lb;-6ZmR`$
%$d!64N&e>$F/E5GL/b`\_5!GQeZ$lg4)!7oO[kGOOs0TW"R?9^ZT&#OLOdl9^)t^Eke3Pg8Y$X3Xdb/nBXkFBdW(bq-P)cp,7u7W
%m+/@@OJbOgK#DCRRF-O/`d4nCjkc>-?i`D:&jU-U@LYmsOB`o;Gm&AL"4Ak-e8T*$FNldbckSUu":X$+6k<mD4qqdg=>!;H%)0R\
%q'21PJ7pL_K(&KY6$r][,n+KSZChR,5W^1ZKKU![\h=2q9"GJ`jGA].&>-GA'qfBL9P)&smrROI[f6V=l.m2U26aARAqB2ROVYfX
%Q:OOkJ]qiD!!fVAiX=Y;P#7$YPGDqD1aPa8asaW2f/8h8/)a:'BN(8Ub6.pO$n*qJTo6g3#hNL?J5i6NWP+V8C,3F%UqOSI(F$W0
%p`q[N@>5'G0k.[IK+^4FfJX#n@Xt+SBur9O,fVs>^OuS2KUU)>i!iNeN("WtjusoMAG/MI@mNV^jZ=%#=XULQNj"^3#\5h4BVA^X
%%WKd,3SVN7UiV+%nkt5_f9LOhgnB5904H)bjZ#.kR6I,iI*\J5I*\K;l?_e<,Ue;@U)cZJWk]PXQ'E1T<u/3"<>t6"@RGqPX.9^k
%"5B<<9fcYdht`K>/e<^B%E27O%;=M!ZA!PIVCgFjUn`VM63kK-l)87r9N=XmO:WdJVo11FN-tk?$o[Soi@<g4<N7nW"!!t1^`XkH
%5);>#15'ke7V5JI0SUnungmQLQR1'u3sqD\pHKl=8!*!kc8^J5KMeVX3'np\2buMg:P$dI,[[h!kJ4G8*tMid<(dTCP!aFY'HK)T
%\2Sfm<[&JgUJ`;/DcgtEd4s*eZ^>4L/_[GiZ+f1Ja!oQW-DUrJ'4Psi19k%OGT]Jk,\QB]+gOXTQ^&Kr@k4^R/R-S2"H<!jLe!0Y
%b`6+?!2,uX.)S2q,,Er@[L@Zmbt^&T$9]tk:/S3%OQ`ApE5@P\GY^G_#n[qFYbG_gEVac&/qD$n;!'5DWC,H.$78n>$bF'X`He92
%W%AJ8ar^a6@UZKEJ;*f\U(to!o`N,PAZ>*P5%me+f-kK/)n\ks7N%4+\/lo"Sqn(GS5[?BNcftkN@n'j=6aC@]f=/tL<os="Y"PY
%Ku8Pl$OX$'_&:?A%N*h)n^[Tt[[=00YS&UDY@Xq4E<TI;4BkYf;d#QDD;u-J]PSU>j`P%*%L8bR">`6R%cF*i(G+Mt)p*q63c$*]
%oF2XjBs>.qOhch?q<A/,$c7kH7NN)K*>0\E`"TT$^rG^hS27"4EnL:[asRcU;leH/%ffV4BgWd'JFoEDHKX7A%Jm&u=Y0Y-"BK2p
%(4_1$eG#UIpomn:rf).2RrK>FELSVH?+Z&PZp9PfD`u^f`b+@.i,rROYorb[[Yq/?BZG\j!I!Mu:p:0"8nanAIG%TJNr\^FCVl(:
%m\3gS,-Ia9.75mG9,GT*>BM6Lb/0@%E$A#^9m3W=p>I-\9SjmgYd6`"5]3PMdGPN6i8O\Dace0S-^\-.CW!TH84^\j[*]h#b>K9@
%_MKh]?YGg1*e?o=B9ruHJ]icm$W%A3!8D2kNgOKj9!X5jk<E^f'<-/0?pg^-^%rj>,Ri?WbrB\*QjiO,=G#cc$-/-^r`m6_&!&;4
%_-lGlbJL*RI2'C'L'WOn0Uqa.N4[e^md`<N65V'$e->Keng^.6K"3]OBA:r\YT*H;#ndQm9uU_0CDh*T(d'm.Nkd6ccXDT@fc8nB
%=V5IJFaZH"T&8!0pY_&/8Ph0EdtN-Li,"Y.bpSba&/<i"]*N4&WC[K,,4s\/J0*]STl<YfJQ2C.#acoWn#ie\QnT=Kis5q<Y[hlb
%a[q.>BD96t+F"Y,iRgj545P1/)'hau/BR\nKi=RGC*mqQbqC>G_1BDL+WsEM"K.;?88$$#a2FtUqb%kD];A7,;SnA$_j1[m%Q6ca
%:s#R:)l?R3d.O@g'.Vl_aJWe\FqK7p39h"41U4`CfQ.&/3+2lS4[abi0bA'(d0>Ger=JIdfKrjfZrcAZEf%?\E'0NOi$]V3A/OD2
%0c`;YNcdV>K^XP4E'06dZ%aB]`#_Fr*<uYPa\niBC!6!GTS$YPU]VPM#GD]\K5q'qi:97B&dM%E*G"\_,9W.D[IA92K;C0p+!GNj
%%bj;nauT_0*GpL^]IG'K;)>9ge8r^QNO+oi7'*LtA1k_$n3/'I_&hC6I+^gi.3^I]+I!&H.d]\K/A\u0:R&`t;k?H\k_&6+E7cS6
%76]ZT(5JXffE]_l#8>L6N\]].Z.8gd(e,)t9'd7YB1(6_K-au1L!:23RP^2]j@aZVd-3>0W+^J/1,[%Y#qA2okt2EY1a@g.Zs5JT
%,N7*,eQg%Q61<e!;"Pf:`"kOq80Y=8!XjBC)]bRc6$cUE9+iE;\MB1gh.09Z57O.63!7X5]O1e$MbSUHJN,bgMD3e.T?\pnecA,r
%.9kL,B#E)/l/2b[HJ5kSFAN.0I>FXd7>])/Y)F)F"'/ZLTcb-kd/bs>nOh:8-,\f*$,iGjq]hro@imk<e$VLhDeaJ$4*+-))F-]U
%b%-(M0YS_6PR9<6e$TK9)#i<C@ui'mbG#J.lG+n]m,^R(K=13(%`WKKE#N>!$#<INp]:<7Rr`$$!#6h@^_APgcJ[9/9gW''Ka#>P
%qi+#132AbmAPH>.:Ttat*JN=0A)2+`2PRr[g^MSTC9nN7-^;g0[+S$e\tTM;43M(=KAaNOpn(gKd5!8)2IPAffpW!g'5T:ATQ[Ue
%K)V^cD_7$F.O"X*6jO)B7jC"8n:K[YM(1e=cs_>,a'$3DiHV'+NDN1mD7_8+J1f?*H'os+XMj(jG=:eDT!ElT*Yl[Di84SqHAK'f
%_iR[f5Cf:A%^u`I,/[rBT6qKk<:$4\Tn,H3FuP`iPtAfR%`CQS`/'^?V'/q28'-959W>\!dPaIrW9#F?BIMh\r3=6%hLa3G7j8Ui
%GW%np6<4P,HZ0PgNUYu(9c)t9e>pI2E6`uigD2D52-Soe(645R\tcD"-H79TYZ1s[Zk,H:Zh)3J%@+f>'g*DE$&-P<;k1SZ)2e[X
%FtCU'&PuOH^A'E\Z!e<8[XXDq-8b$*Xp+WS`<09f$WI`o0FM%;ihI2?7=.V)FV.JHTT3<'g>E>DS^4GO"D:&SL:8*Ib>[XL!qFIk
%[:X-)Qbh?n3uj*9W)WQ3PFhE3O-MS,`3joq$hsp!W/CE`La2DLD%M44RgkDk[W_AQ!(Zt6R`J?UE*qV7?"N@m5UKhCpo^:m*JSCs
%:SP[$?O4`;mjNJb%F*?+38\>t;K`3_]Q4oK@0f?H0;#.XF',0?.?.b^8dZ_u<7)&K/6SK0!KLbY/Z#VW<g1WAoM7CceT@)08=A%G
%As+5%3#khLA0_e/'M0>#_Mh;6)ZfXBq_XCVJquQ9M0SOD8p-j4.'72.5K.9#_<+,l"ej"F&V`(+\;6WpM:+-3**LVQ2.R"?eAN_^
%RirIY"@Q;mD<gDb3%7DfVQ5sg#P*kTm+m[*nVZf@GmZf,KMB9;Y/nA<p>N.Yj?XG/"A>?9"s^,gZ<h3-Caq2J^-IF-8n);]-_N-.
%m;G@a1a-#60#G,O%S)9ndnh)KKP%0E*+Tnr\rAt5I:Pll@3:m>Zb<(()W7%H4<'fu%3tAHoDb"8MC!*VfcY9up^V8*n8KhXotlM+
%0?gdIcq!_jia%1_)"T?c+rmtAHmdZkTZ.9@-btfN<pa)E'+/@RpI*#Wn=d\h[BlV2ZB8X;>Wgd]9^XkT%[r)D1I:j<2`hM=.HoLL
%#RqNq$tU()K=8\^'2gPJe(#Wno'[QN<FpDc4H;9DJP%?JY#&7i9&/tHa&]QJ3'((CC)-h65S;u!Jq4+MZ6i<Pco/97$m-GtDTZ::
%`&gEkU,06@^O$Mf&sf:T$a^\"Z%)qmecF*eQD8PBP-oSuOEV8tZ9A+PrZi)]>YY0n_d]uKe6g6cGT7^>JV(&Iij0in=LMU%TF(G?
%<cN=WJrjMS6cjj(BX2/8&uWk1,IhGl)KqHDgIN&j!E($b;apS)Y)J>O8g#^d=.Tj;WX\-W@u"`S(fmJ*JThK5/p5feJBSY`ihS[M
%g,>Es=d_-hOpg8R3;q.mHlN4BdZBjU.+kgNHN72%B1X.)Qbr&<;D'>*+Vql&*MI:P/:Jb:K/7ldUZa,h!rZXkU$%ae'#Vd]jPeK;
%3]WJC!"bZp5`k3;A?q!K+:eih),\1ha*&Ff*"j&;_s_(d*0F>NYEO]]PoLr-3"I"Qoi_7a?/Mur+Mgo4&OF93%LgV*T^O;d*20sG
%6Oe%'6uji$R>-4tKf`@mX_]S@_fmq^>_44ZG;@+I?&3QV!2nrs6bms9JD]VWYWW^%%q$R7`sF3u)7IF01es"jCcWh/Yo=)e;bhHV
%[ehTBS\G=+7i=E4rV6MgPm4$<7#Q-/DDrF[U^5\Bcfl?a\bA&m^t%*Ii8#_Ajb2&SE?^&iFCejt6quneLn_1`f]E_]*F;HV%4X%5
%De5:V_g.0t[Cb#Kpi2c:Z5H$gg@0&3hugE#lSao)l0`!Gnf8=2:E151ctmqV#(URUVVn7=(usQ6V`*VoELI]NG!VLbe^cjH/R0Y#
%p-(RC^i;>\$k].uBBjUPn@/re>:KW(PnM"b@SdTG5nH\O=2=nI(.c406a+644"RgnFE7M!kS^VI6\RuP(oMt[M1$N_-@s[FOsn_8
%`M8irrD]7)OP5BG,N`)FE)O%TgX=c-S>QU2ZoF;B8_[Y-47+@@E>?McLh@sLK,qWh-W.cgi-Be8k_7k(@1CJEK;['c6ih.frG@>o
%kG22s&'uYbd[9.BWS)pm5W.kd0d8VC>mJUW3J[]IVkhSg8OsE,iMm/Q'E2R5GnO9/*[Xf1^e2PiaRY#3P+-IY/caNnhB]2N$@i`W
%Mef`r[\[l\P*A'3eH`R;8d?,YOP*Z&_N-_^P"I$%%rf=`^p8cVP>(CX.EOu0%^4JQg4lf#?%d"`>TBr?RZWZq41a*7k^ZFFZ+DN-
%\_M^Q7G+hY,5KhH['X;[3:I,8dHjtDZOO5C[onT.U5`i[lH7[h>L=sRF4j8-22aQg7iV4g9aJRZ2;<88q8kq#NhLQ6c=:I&1Z=hc
%BN]Qs352"5#[NT%;r!1C-j1l+M;SDXE[%OaEH-+"FS2"@+abWW`R2t^b$_o=g(!S051LgE#^3O6/e2a$MX*OoVSPNVW,`G^ecS$)
%QP%#,%TcJWM1mN:SCGb[#HVq?#f5KcZQLHu]#pE`6JiGE(?S2EfCM"ELGPT+VM$"#OK,BI`TW&RKABaZb_W3?]eBT9JKAED=:qcn
%DArL('j&W(CkY54LIH.qqg#]nTIJd^SoD65f`urCnO$)NG'fie*seKnH,F(:5('GN)KH*=MMsM7fFIY:jCi*11%:)K3JS;4,8EYk
%p(,F^Z(\_oX=g"6r=BTWRCXjKRKZ=)E0.3`F!;nC^cW*M7391\6.s[a8g_"RgXfSH+S8>GOoHS!n:'GUOdKOU86[$i4k/Vl%$d.;
%X,nkI;!oJQa\pA'S>/\lpo5SG]0tF./>'BX#Iu.6$L($djliioitC)$0`QbZ<IaE,H(rPMXcMgFNk5/o6_t6D,Se')C&leHjA3Zi
%72cTER1]7l'4SQXG>l&jFCsmTTi?1+Yk&erB>+t!i(>V-Ss:/*A@i3[IMX%l+<:YI$t<NZ`1/G:g(A!LC;BMpJ?(I79EjH/,8^Nh
%_+>[\b,MT)VP2<a<4$d'4IQ`Ss-]*R$>W0X'HRo>6q]N[2J*nur)2$,:8e9r#WeXR/0?QNO^<P<D6?E[E#Y*pR9Bu(=98sp'?4VC
%3!)s:;ACkS@;TW\?J6qbECqRf-GWOEO't67$3LiO\U90Q=J2HT&q0nu3V4*b">H[fl"/Tn$lFN>!5^WEj&2p<!\uXRh;L\&raO>^
%&j[LlUSSMD1_7a<`A(oi[R@?t!BhIo#UcKa24sL<-1X0G<KmVQL<mFm_T$CnabcOg%*8VV6JoFJ:)kHU%MLu1V:=K1JQBt.+sQp`
%(bR7=L(]&p`Z^\nV-Su+D>$!eTT?SkUHsOnlHbS.l+7ua>$.kM0hENSc&-1gN\W6fqH70)R:q3sAbFr=Pc-J!E]bM69m6F8Xpi;n
%Zl(@]'D?i#3\sjd<\+W0^RV)%T<)[H?nmLK2Q+9..0Di!MMEo`\&)3!7LPJn</;rL-t"[:&NpbQ%89`i+ISb="r/HIF+"B4*<[o3
%K5uHb9'-$i!3SUZ?NCs"79?Gl6KrD._T6%G_'2%O&Ml`r4PL@!)4H=W('2fcUaI;MS>.YfNr)\^"5i1d/JAU/3$m5CB*iFMA<Oo$
%$<X?7S)\.<Q@e`pWNg9"ZlIS/ZIdW?B&J+B'qX\*$4jf:OomF8UW.o@CAK@G`Zq/=Q`H?=U<BP`LWde9Rao8jcQO5UE</3sLVBdI
%H;`6T%]_EocF-l4J`jtY]8F)+Q6U"ZB0Iub&5g(C=UgD3)P>(#op@$ua=YQm"I7AY=Z*LpBG]7aHC>:`?jUY5__f9t8Bl)X/pL29
%<>Q)6c.-7mU^9Xnp.6"a65unO>(+*f#heNW^,'^nK*n2B`-1(\@%SDK8?u3/BHldu$]qH__BG^=LJu(<Y`:tdTei#U)/ANVhkYF`
%+GZ2HIG\Oi+@><ebq*hH%VrNZ0]eI$\-O:6lu8(lnVK>Qb2$p0p70VJ!#FZj'cZ0uGiNM&a&^"AJ4O/ajtKe,$.SNdD2fhW+V4HH
%3&STQ_DH5!(ChlhKrbfbnCcJmiMRbQ#;k))W]*>tN@0a,ZYp[a-^PgLX;"+T;f+_9omid8eRp)9Jr>3fQU@P^$o5\->CsZCaqt.X
%P#O;.@EV"D(A/@jY3siB42TU**&>gHK;N:%!JM]IA<_cM3PVYY,)-h0ZND\RZD%dg]AHDeLXu_*WTk$7edH:a69+.#<OJE88QFjP
%+d&9Q:O`VX8<p4#ef=i@)4$]lHULRPe.,=6Y:)1QOn`[46C`nt)N&E(\D&uL#EdFMl3a6]VlrGF$qo-I6rl+eg"[i]UqjI<OCU=3
%fNc3f,WWAtb:jg(?:WniQCtn,W'$au0-pW%0cZ4!Fd:Dc'h5%'P4(\9"LXm0%O^D4H7R0j&ooq#7R:8j#q1pdUXB\;-PLL0>^je*
%!e:mgVGPg0?oI-C-VPU!R#m]Rk#9'^A#QsS#)\,.+7aXb:#Jke^gj$+>osR0^f=JV<%:ka](.VnNl%Z.BVlcc>8_n-J$c_=D)f\F
%A>9L0W\%Xu3X+f(ZHHG8Y^9*(!#gG&0TgN$?0-u2Gt*EZ3XW=E_ddAYm!F_>7'CH-VTn)r=X[asc=h?Z65OnZ(-<:bWZ'l:#X;"S
%#3Tp!]E8a=Tie$&f!46(11nsdUK(7s/`K#n`A`@^&u_QZ'8&@/VJB!E9Ka6o+T%j+(J4fiS1Tc<Gu+cCY?:X0^9\%XIMQYr9G1(M
%lI$=/>CidX%-e>&qH0LhC]G3*i9LAH(PcN#&1Di`']cco"Lc@:Hk)tT-AThUQPC7VFQOu+PgNK2-3U=Rfj%m#&-2]#Q&2I2e=bjo
%FCH(BPdq\m!]lGZTj4U+NXolJU40V,,!RW4K&W0#)f;Ii7L`9cEB[1$W<]=Vf0=po:]g9pq@6b;`?"fTY]"am<kM)89I*U2NZoie
%A5`&139=#eI=OitTk0R)Su[`rq8d#TOU:_]pl?]klr@X97R8^URL&a-fmI<IYmSFOU=UkGe^<Db6>gi9[skO&B!iL&T00:"bAl$*
%/[5a6]Y9:@]X-V=U6F)=?7JGE.k<IL(V1\Xg_lUfF<h7,Li@H4dme@$1)?3B'22D>&EQN[(D^>AaSG=&Fkop%"j(10MU,:gC`P7u
%3P&H%K(9<s#6n9'ZP+C3_mP=>g+<3`U&6O@jas^]3[DnD2$dD(92T;$U*EF$_d3lU!eg<4GFcLV<>#tZ"lZgf1),?78^6jhZmo=O
%0E_-r7nfSrV(pZoTa]s0D.dkV)RL'YVMS2fP3_'L%Ms`1KQ=%AFs+ES<X$<:6ekQfL<;o?_ZN[npnW_t6Vn%]QjqimTB)[MaVLbq
%M/'J1l>-dEFI7uL1rR]rE7"iI6OAU[M,<GIe"FkfpJGO0=5$\mD9GiQg5]R;'D7D\V?.%<Z#q0;*50eN-fR_#j_Or!\_s&/hPt<s
%.P_KYJ\b>d-A#9tlF[/'9M<"d<1AN'dHlMU:kdTMV0FOagLcj^\3(;EC+FaefH$#/:Z4c^+iBL++PC-Pi57Boq.'S].##Rg;J;Q!
%aTVbAGlnGq"5fedUIlM<60>]cd8$[\%dNPPWr/=i&(Ii4r0-7"$rh[`D%7<rXl5s%51]ea5.n,@6D&iW@,BsB7rSQgO@=GPV'WVc
%&XVA6i`[t4VF#[93?$6533p\-?8j8(Y2FI,P!uqF&/X6B3tWn\2@Sa24qh.("se%>."cqCi;k/.JpejlIfYWW\:g(n*$leJqD$9c
%0&0=5bLQXG!'j^HaXg]=b2>c$\DVn[WqB2VMbA/bm'tt5C(FdG(G;7/H1M+O#[LMCl%[!3!\I28Q4\G>TeVo]bN+goLS]2oE&&E,
%i6kZfZ3HBg:R90jKG;HB>6`\f@&U:8:0@9$CV,6k<iSu^oTaEPDqY8t6(oidoNtZ]5(SfYX#t>u2k-l+8JZblMm[UoRB*nH&p/jc
%.0r$_bYo/F\]6"YI.0cQ\jT:u?R6WCWfd>f4).0p*4he8N.R+QFJ9-.&k4)4g*>l99brIXcDO[DLrbFVb!)1tQH:FR"FGd$6O8g=
%80>@*cTW8CHoXaVaf99%$EqQK0f%^oq*um#51l5B`BK(Hfg0L<KP_N\1\d)i*bpi&<#&CO>knn=.K`UWYdCs<\\ZfS<:N\YnoC[`
%_1?68*^TRUb5[`G_b&tBa)r%Q"uQ*-928#3,%53lHq^eYNd@n#b@psT#\^7M#*aMC=YNpS:_+k\fmW:gN\3.68XI5hM."Ji]"im(
%JF4m(*T=[3HbcGA]&&L!Cd40WQA2@@RCErL<`q"RM+K]%O`!\K5O,k#`0+)Kl@/mT(6j@N!J\9W_^(d=OU)\#8SN0E]iB_a5mTt\
%<mOf8#8*k"(cgY^J%qO1Q4tBo'B(s3_%:$qkrT%rW0h?\rNS!R'"AIt@k^u;:kM;k.ca9&2e!'uea$)q$b5SFeO8%'%EHle2qMDu
%b"h/Q?E$8c#[C,NYWkE<iG+]/Gf*$bJ<kjcnHfC4Pi[[EP"UDE-"Q$NS"u)f&soBTq"hgZI$><=]7G+G@tfG#/MP.j%&&[oOHHMq
%C@ik9+=T`Q5Qt\E$S)E/<;:\W!S%_d%Uts8j,rQ`)8Af/2:P>4d1U7C_@%$=E>68oCtM0OK8EN9K_J%JnQ8W(!tJ3P]FRAcE##2'
%Yd*s/-"*PR6B4HALGVjdb'+Os1b9A%_[gE`9#P.BQJf@L[]27QEc;8'51Ff<1.?H,_U>LreK#YgJuII6M`Ws`M__4t$r%a:K!,qa
%T$YfEnG>)O&j7Or.3Z3a'/#FN1pH<#6XW/L)YJ^j7pul/eHkph!ig]O;5=HE6U78d0pEYe*-(c(*Fd]HPfZko;>_14C5`[.dP%L>
%EV9!X.Tsbe[/$Z_&[IU<fiq+7]cA@3WZF5L_a2@o?_XRD\O5Ih_h&D%=5'/\-l(3=\Iu).\4X;#9cWQD@p&j.CG_c@(b"U\&<0Z!
%*:2!b6<R_skT5NGf_RT6P[\'`^u>b9.ktRcIhI0Hdl19]LdfadV3P'l:3I>gd`<A.c-cG-c56a$e*U0M"MFVtcrl,6ihh++k/Oe=
%,^Ypnj[E.?-ab7[e6,lc:k>5"2"oBXQE%A#Uh>T#K'H2,SkI?*g.'$,>%'Zk4(Tk-6pMP@#?6NP4U,n.8::*q`hc+b'8_2"0tYM#
%iaXkXk+dWXOG7FVB4(1@cpQd`Al1S;QE1PlSE.jBQcS!(M.=tjT[K9*HsZUE<&c6l.W;PAhMm],P-&GsK4ohKr(r>KL&Q*F'N0=+
%$mXFm9D8YLKMS"o6aBDuk!7ol3+X9D>`R>9[A>Aq>kHReN!JE70)nqZge;-r@7,[UKm3cd<u9Rs4C)bkK<Y_7>h=2(?(oO[Ad5(e
%8?VkakA,(!X&&f>0=Kh%OO32?id`up3^Fja*2TRHpF$;uoAtW-K`ntV5OQnVEn:B\!_6hV!4[a5Kisk5)'H[Za<`Sbh%!T[T*43?
%SM.V\;O:r?&grrp#+(7JJ&7nqY$sS\V2Nl,6GjcBChb?4NLKE'FC?X.PS:[=H2o#(n<d((GVID8&K!(/8TI_1WXt.VD6C&UTXbC_
%-p29IW"k/Hd=Z3U#JMIR&LL98GYN@D$I5qU)<j<l9QTh@U*qQTT',.m6hOKBc"R08#_Sg""0\nC0DI.n="J:DVMYCd,)k\"\Ak]0
%7kR(K<+;l=6Gj'<gAJmfXdGrC,0tK7_GJ5fIWgasFi^T'dK^qO+\^mG;+[.#22]Bu/l8l7>F#%Nj9-Z=^uc')C($e;Jue+=bn4Ja
%WMU/__Or,<Nkbdbhhh9)<#3[I[1A!/REl_dlVf*NKrPsn$>_/VKhK*@l<P+Mj%'Umc9phCL+I],#og5umpDXTaF\;OGnt%lP.'^u
%8i$JP@OJ_AQbs+>h1?#?@om$GWpl9PMntRp"m'AdE[\PT<FIe=q!`X'*euW3m3NY$D;fO)WYtmf]5cd539L!e&6D:<$WYNl<MeYW
%63nfsiU5a=;@%<?bK5<ubP\lmV!8:5YAa]JmBO/1Ijpt]i'_";$`L?Lj/BTr0#\uMV8:&]j/G-\IWnbb(1P-'.%hoMWN%,WWbYb'
%WZ0ng8&(&ACJ-\ij_]Vn%X#SZMh(u.pEr\os8MlR!o[O.2F%*8d:L`P_jkNG":6=rdO-$(W*#fO_c0/\"ejurU-5a)j7u4YCR@`2
%^#c<CCC"mBg,mX6jsp$Di@\@O'4oG!&dH3Ue:UGV2_BroMNMqQ63SXE=]bc(i"Z8NI"J59%KmQfmp?n[@Em?d30M80N\qo@Q7B-?
%os3*])#Q^lUI(W%p7`ZNNh8JnR!I<Bg_aSaLIFQ"\u."eike7Ik]3qoVjp7*^TAa&D.PlK9=L5QG/&4I6(.\"NbocKMa%MA8G?*f
%EsPE!=j"W$(qt$s+[n.a)R<Sm`Ju3:iBVf[=&"q@2Kd\<K_Xg_5tX,g(Ip<P1j'CW==\Nj00$Xn*=rD"Ue6&TU%tJd#nKH73(]^]
%nT9%Y02.O!k`VVInHfI>7%U(,EnVo)4"?`hZc&l8-n9[<rQ5+qj6HIX;Uref+0aG/%Y^3a)`UYtff.+nVLIJ;eMXl-+O`g%l1Nsm
%Wd6i;0"T+3*mmur:-a/.]E.N$C=aSa#1agFk3H(f(n(/E;U5ef]^U9Pl>+5@NbVB>q0[jErIE_NciNrfAYCSrU>D?B,>`6+FGsoS
%dRj7g'n1p(g\%Ch;cPt*_20*`9BQ)])5*:,WVA5Il$](7AP5B8X6Xi?3&mu3CIaZt)--K;W(`n5):E]p`%W=&e.Z<r;-+6;YXrnH
%\V?>B_boMn]9YCL*6hk4lpK3C'turg^-i9A)F2bO[R0QF]8ZKmMFTD3#WRcC.\tX.DmIXVa/^$)9bsL'YU/0$[B/k+@2lJggU^Zj
%]&e+!6Ti_M6k6R)b4pZ@`7!Sd\]o]qS]u"Bj^M^Z^ZK@mq-'01@BX\#S&N_XK]"+N.9uQ.Cf7t:KVsbT.`#?eoK,9U$n;c$]-YtE
%i&86#3\CeXD_Bfu&aBmoLM0*Z;CGb>6n,3]&Biu??qSO0,V=J:cfS&.cbiu>`8#ci+q^1LHQC9>g6aB%W6LBKgS"F-]?;4g*^dj9
%IEi#UE$EpdI:`!A<R$1NSB+/i]JH^L>'PDqd5R17I[NS9pIhWT^-r^0W8Hj"Asff<,=mlb\e"!9$hO5/7<&R!/VQCOe8]XY+u,c;
%TZOI'mg?\&1IIAeieM3Q>SZagbrN3FUl\=1YVf<^[SB"DiBDuUluRV"GHqsFi3Woq&CG@VfBGt)Iqp4GoUY8\HD)S.$@rED5gHfN
%&Iq-\jO,q]p^@p1\DtOLLML=<m8m);+!Qs"k):Sh`&Y%rj$?gD).7lAO4dR=.oJMi`_lL<g@0QncXCM$2GGCn&d!ib*/0")fp2/j
%f-e*c=SMk8I-T-Zbq<'c2.1sn*7OmF=2"J741S*ma6Ustk:01smDGK4ld.Wb0Q=?%e&8[)eFt8E]!>OAK[iQ]MQ3_jS\EuU&HVu`
%B@A)je*Rp&i8UXo(`s8Q_t(<#S1:Klm>`B7[cI"(,RM86!r5`7Q!bq_r8pR(_ST5kX#dP<bL#OI)1bkkebd0R>;:6XJ-XlkBE7]<
%Y=B#=EB"$MK7+R7&>$[_%XdPlB;S0?T!sK8J`l<\[YB;;#aG0O0S]aGJ`\eNcn?1RN9[hq$+<Z%oAQHiLu'lq6am@3lQGR/X?DN3
%6&Bl??[@;sP+/JPa43lr&,-%XHa=d>Ou#>k?GLrD]HKPp8C!&T!eN)$)@;KkgOa5R6Pp"nQft]5m[4)gL'#-'j*BK@=\E@-F`eL%
%F"TH&OoP#[cACXgIS6a?>X"IN@3)P%HtH(!g!1YhRK*u.4EPD0qXW/2mOEYO0d>RUT>#["0Q8^WEk'$HMU$enbiX)>gHgC0/AYrm
%="hoQH2%Xe-nB;B^oIg('FfF&>g)-aA#Si;8IN7Df(il(boMjG6#M!](FkOKV*M-22^q8Le#!N=8(&6lJs,6%,^FsRTuKFCEOafo
%dA*6$/`CfFf@oLV])lN.IH@+14Tp:M"7P+%2&SKJ%1H$u'[n2HPu'"^Q(r;$K&*.SE=Is!\fH`;\(Ho`7f,QG.ES2FY1^_W/@ZX6
%b]_o0j2pDEC5ZJ*F9n@RN#^;8HjkV4BHk-s:d.rf`#<mEha,jaBfVBsqBXM!dL'Iob>.LTB(iHkUOoTRh[>N?ddnbYLkRZWA4"2]
%ql+?lY21M]8A+g.BMES,S)9`04rQbPJ_Ddo:M,5Q`t%mc;?GrJ\V4"'Y1de'[!Xk#*.(95H,_W=&!%]VH'ECGKh1DPa'KX-,^`Hd
%B:^_tXd8*;S-"tHBt8cT.mjrU7&:2;JpSl1KeI;Q7cQ8g#`ZP`,Ckf1BG<&.[+D+[\L.lD8j-i?$oiB@2;m4^oa(6;\5_[':\'@B
%Kro85.o^i+3Y=Wb5KY-7HEt9f8BH7(AieW9cAQ&ZjFTul,E*m9>MM2PDc>Vb^#u$jGn]8!2Sp[RYtSS7O*QiX>_s0S4/o8sLNV+f
%$\Ab$qjN:*Z_U$q9AIf1cPUFL`j/GI9u&Z*SK![!6DeH":4g+P:,4;t%;FOghfCKaDFLJJTF8Lg21PHPd.r*f`P.QA/,SL`;bEP>
%`;f:r(2kq;qQ9uTh[`5/]ucq:G,#"W>7M'Z<0^Kd4U!(AD+T,Oeobl]7?7;j1sCa$)ptfr5K,@e1Si$,]M_HW/3Y-Vn#SX44XQa9
%m"BUa%tY7G65,CAX8r`K:JpgLs8<f?_+JdkQ8TKVUU8=/UKQVfW[%`U_2&DVEil*hnb-c"GZ8]#JqQMV*#6oIRBnhq2'kW)HY(NM
%lF3#V,,m5h0"HbZom73`dn*(=JG#WdV=*FZSi<ArIQe_J2)R,"Eem/D4?Gt\:l:M[&c.1PS.*Hh3.qR$kG2co$C@M0#]-FJJX/ap
%i\tMAGDd@a$c\e^K6"[A45"SEIlo_t8):qh>9hlFraSat)4j$O:/<:l*>aL#iAe2g37c-kR0Z@eVaNB?m5]!((+6TS:3GQ-9*B]F
%fJcPQ9JeAC-idP[e75N\K#9toMS?VE9k9E53*hNr,cKUH#%B'aXN]E\4;D7XG'.[03T,7T!i&B,,ATH.FS1[KHt&&9'o:7Ho',8B
%c%g\k1pDCJ5.p\Po>.$M4Lj!gq:k.-W,pfaKcN64$1Cmc=G^uI6B\n_X:[]GB)f^]HC>H'rA<u###fEk;M_V[EDh0\X>l`.rHV0p
%jOlOg@oeI)XNu0lGfWgm"+R1'3g?^@#RDLo["/e9DsgMl[3?fe2*q:eKb'!S],.MIYi:cp%9,K%lDVY#:hd@\<%I_),7o^gi%BSP
%a#9]^\Cs"t8rLP?9SB<N(=T5Ib(:=ngofZW7=?QQfHu2IOV1$'r6EKk,aDB3E=C'*80MN8j1KSddj3QrJJ<[%'"Kn8iM:#ZQE9g(
%`*5_Mdft$#HXX_h>k@;)]n^i;_XZcu\p%RZcL#ql%tWEg'0[]=fksc+L@?/pDldW=8rCaI%t/1T+mo?QR@Jd974-"FC,der5%atV
%^j[>_]0j<Qjs)k2<!UpS2tFC[_P>p[lAVi15nPU&[8U];4u[9$N&Kfq[+L0!iFg[YH8M&.ppLS`kDn_#+>&jo)"H,F3:1-T9P?63
%<Sb8Pau?]0h9VRidA0BW4$d:#nSAC,r-)J!Hs4PI2[TM?5UEB<i8%AQq63A'gp%lP5JPF)/nBDH%j((`#l%lh]qQJqHG:FoONZ;8
%Ea1%1H=0p-QekJcn;?;iKj*K*s$,'Iho)?aBFe6Z3^ce.VWiFgUimJFDBf_fB!<9Waj1#Ze%-mg39m4>__%YL.GL+d8F.LpKtPO6
%$,rhX<?e*gQcP,ZW`#8ZCPs3T%`esD$1bXgA0'#E1ap`#Lf@?ZIqgU'^7Y/$k=<'8*u7TU"r'Grf]B+6nD.sNn`0@\MpDTiV?/5o
%g2-?TaNCAA,$G`g*;Bko)Ps19n%2L(c%HeZA&Oc36%Ki=9?"t9f4(Q>0nSCe9d+p,UgYK.)L3$PS1l2O2iX2RIk%05j4p^NI1@T;
%(-Ti4%R'$,WN=BGpl[FA(,\,bi>baYTnU;UT7es%5UM*^2.i(.JtbL=nj;%#bo^ZQ&sMf2*0AWP#qm^f\_dgh*+G-M7tP`Z8T!>G
%V'7$k`!rom$=-&c2'*m*C&+d9nn'rHhgB42o'+COoW[,WHI,d]2KNJFjb4d9<!)+*(AsH-3rQuD\.uu;Fe_2#ZC<VFf+%!5'O+9V
%)]d+s500TZ'uFE^pp4IuJATKBQeY+'I&/WBZ+3>R"iZpZ2O4uX(^scl4=QtddNpO%TXRjj+6BI`ZSu]9QT?IPq!PQ1<^jM@F['5A
%J*NpgcJWr90TYK:Y/,-'Y)2A40gGc"eHc\MVS(2u8(CY.pH]eOS98B!5pHLJhL02GLTQa-HJMMJlmPEmi>Nk&;A&)R-3Mc<I#jEK
%)=%iSXJ5i/75Kh@[.f,7>)B$B`XZ?B>g?gD@W"tN5jBJ1c;?P$%I[_UjEJjnlHI)s2#X[em.S5^ACJ&Y1M*`$+A)h#g$/A)4'mDk
%dfGnE;#CbVe@J@*b,tP[RBjNEJTa?`"N.,+\#1Vq$=7,cLYZ9sdN4Dopc))M%+SM=osp\pM)U?]8l]d#+9=\1>08JhS7=@IniObQ
%9uk?m.`bdu=c=Sq>Z&ta&>\qIjMQ='C.P9i3]tahffs*ic99-tNe)^<dPRJZ3o(mQDrQum1E@l.-)FS9ESq8,PYi8qq9s#&^\>=K
%(ig5QE.dg,@"9XQ%E0[IUoa_SVb9"XJ4?KHe-IHH[E4:)XrrXNr$_PP/a8bu[AVD0qSAA^<.j1O\Bj8kqHWKp4A1Z6),SKAK+0(o
%DAr#D*3BErU@t7ffs;=?82ZW;)#>&Q"0C9qD.3k3hX$nY.4.+_YffU_\CK7-Afk\aT^,XQh<3O+-O";Wb[hp)O^QBm+.1qoUU/"\
%ogEZ"HoE:"/9t7>SXLHN`\'gon"-nhEC?5l.VDZl2]+)0#U2-0,%<TL[J&+nMi6og+*_cK_S[1!Zq]:a`$`R_dlrN"+XfAi3O!4`
%=[GdtC9n@_LO1FIZ0eRkKQ#L"l$[!OI'-K>F\.Ud_]eUO@iduW;PEu9.N6@BoZ;uc^I,C0K"aj5Bd&V1E^6BKF1DHRqbUS8_k&S3
%C)Ur%QiXT`mO13M)QD:%;Jq`ODf6^f+uC62i0Ycd>u&eUcG6/epG3=Us.]&jm337+B`Y=do$@]uVk*\7JC$j%iX3d.il5II$Q(!<
%3K1Y,0c<?rE["FgEP-o?hKS*1LL$RC?FVT%QYl(F-*4`25505<2l^<q.f?C1j&UQ8p)_=M2>:RXWk?>YI&Y0Ym2r^UAG%Z_d7AWn
%+N<Tg@tN*%r$:%hFX%K`P39BLmhj=`E-mECH0d-9aQ[l.D5@fQN:qQF7^=(VAVtKX(r:I$S["n7\'5pNYSfetrJ=HC)(-=ZF'0b4
%K.;)oAe`35?YSR0ZVU$GV'*U>#g'*_6$"Dr%80ZO,!VO/q/u"*KAI?_a`(P+=QO;;Adht6j&M(Gcd`A@7@f5i5-nTGQ0_Fgat#Xq
%=iE"2n+jVAo3-+2rbCA/Mu5HqT8H&Lj5!0\4nuIC$_Yg",D/9F,M=Ci8\>+.J.*opTg`a9f^IEiF!&W=C0fC!&278g>ms&rR/qt5
%\iaY7jZ%ha.Gsk'3O]]p99Z7V!#H\hpG9Cc%S=.41*"FT09b!3Hk^R$Gbk)'#*+mJPZS,_FlChF=CUGC!E#NbYtt+C,3<jR]5`_'
%O77AWT^o0Xjr`PZ?,.Gj@%?IJ?m!<^h`78=%93bKS:`-B$lm-7gV[.eKbuO0C8$GK8ZA?XGL<Ifd'BBUKc/b$hh9c;)ci%h3%;A'
%'k-Ae@2)UniU'5Rj.QJArW;"34IAflk)'oihbV#$!J`MJ"X3GqQ53H))5X)DLlW`7ar"cFmtHl<R#fXkjJOE)n41DaI1daqeZ<I^
%C<Ni.dg;Ho"nB0q,A'4_%Ka9RnV/Du-!8Of!s?,b*WfL<,&aqrLG(/H+;iY+@V9BHVcqjn!hd/e9qCkiN;"B#XmG_U-N]6=*.^(#
%A86tYeU^@qY;mn^),g@]CYDWEWO/jiT&E#Q]#<g./;`4gb5uI&6o::/94En6nfH5XaOPp]5u`B!k++-2/E0d2QK3W9a462c="6_i
%OFYY\OnN$]PKMZaPd./#Ne\Ddr$MRqiRY?bms=9up]&)Bq`"7m']MX-gMsm_3@j]";t(P>6k^g;Jj]rN-biV1US$Kc*p/R1R";mX
%jcf[#G'Ftf<l6r83JR,4]tI)Lr5@,cmnIUm^M+e!9pqXA,D%Ocg"*D.+#'QNV.2A"l'/C7H_4WO:38I':7(76/&lVZ]TLbR'h.]1
%db]C5AZlp\-[Wic"d!8q;aoMP9"Q(SqBRsVZ=\@4Hh=s''V^I',58K2,A.G\_u&.2MbF?Q#^K*jX@Jdi>bP\K.\)Ol-bd1[V"_?7
%ja?ipfB;G!3tl*Qh]H2$p$V*<.8bgU;6BC;e'-UPo-?H^@OTe(@Lg%m0#"p]aJG0hObm2hA4GY$L`q+Mi\K8nCWADF;C4i/_g5LQ
%.a!4V&Q4Uh/c,3?P+>C?,7!MM;BE_&@D;m;XN%&)DMPB<)?uRPepEKi>NI8X.?%k9W&J4?#[\);gX&9SC7'oRj]#cgS].n<W*pAA
%1SPHsA?C'HK,QXAMUH@"0(I*9d1)nggK8>d!U#a:)LafE]n1_H,U_<sUsb1MBqCY#A<p"crdI]a[I!!$h6gCqX["sK^Q(!Z.5cQ@
%5<GupMPL'1INfV>kh<gDUI/OIN)?aZm,kt\h-4P?XCr;ED2k2M#S;[@%Jt5o`tmoj_ta4QpTO1^<,\R:ZX)]Z>6<h#/]lA8RREpo
%YdC"Y5S)7flL.)ZSmOH=-"ItMg[WE@Zr6Nu$YNDKO+C75+6"j3IA4uBLoqR"MV8d4dt'K#'b03OFfT<:IWHN4`[NF++,_.[-q$Pk
%QKTj[UCc*gmWtWX[<L+H;eu+n#cW:3%$tEqT`.r`5g=0&<W@Z&Oi!0J@PPcr,M5@#!l[1%mK\DU=6+sc*<d#b_M!G$%%7bb.[XAD
%(nnP_JOhuc]&q*ZP=IZ_)6o[;.-B2m5<</cm]lMY5FK$I\al*6L-McIH(*`*T5;L7LD?a@g9Gi3g2Cfgl,n%HNZn147-3_9V6UW^
%+WSj2"C%B3QKXY)D/]i^ALTEm`1!N?7MgCAN)BWl,YrN\=Mm'NIbJE<)&'Zgms8>qC0<]'>QoB*-[lM_fcXA.a*k+=o?nS*f#)W+
%Jbkr%oV;QK&u0Zu>3Y2nbrb!3!kta[\5gW'9@sRDiH0_ZdTmW`XYnB5Id-/++Y;5"3P'7`fKOf6YPh,;5%"2TL$pCWo+nZ>U;14Z
%5(=J53RSW=+B<V7-eoD2Q0`g]YePJNkIg_O^ZpmHQUZ`E\n0up20W!#`f5%D+X.l?Q(eDL0$qn:OcsHiUKIMl8fTGWAkPaH+jE@n
%fs&J[@Z/V`*(ngIHdg<_g&E[sk4?.JKV`MFG"pMU=SeMNVD_dR;_>+ocf<ZLD,nUiIVHZKh.QQFqr\>Ob+Hhh1J*k0Pj84B%O225
%"OZ),2rNeeobDuD$X`&N:]hcU&.Fo.5$iRSY<TMZ5Og7Qm?_Qkqm3J)G-t/hSBNfTgfTC^lMF95*/Hp_icG8_m+jKc1G6s*frYN1
%"!<-p,"i&]aYm!p#%GphA,KL2LSI.tK@rlY@]/1LF]JiQ/2c0r;-Y5s>WBg1"O(0NPDnr7mW9iXUXlncQc@%ZUZdK9Tg:b&>F?m-
%5@GVf$@55TVu\MD639u'?8P-m'M=`9!+>u_d8a32'%4ga"!9q6<.k(^o:>UE_N"D&-(]'lT=A7F!r8'Q`t%$>$B9QW6HYTB:IjM\
%O%geL_3=9ORH,8O"#A8B)-d3(N4AW+:*^dai\1@]((;dlo[$uYR)'<0"2o>XetQtP<'A`.(?'^n7Vq?b;fA_Zd\qmp=c0&Lks7As
%V+)k.M(FKN*(Zl5F3d2iVf(C:N0nGDA3'/C3<X2M'Wra-8;MRSF1U#(rBjchN(KN&$IJ".,peN;TAQ/70%-s#0ImenX<i&V5#+Ii
%(?mpJ#d,:6(NRTTa=&)Y_!Xb_OW^f80[[/l]?Kf#qJU_;^bHW#egWhE0Eju6U%dk\G7e1Nefu&lg=V!:L+Ma6*jO8'*b$R(9u\-'
%RclR!*`F.+VU?T.(6opp)!rDsa;L0@!^ol1!J&A[Bn>qtSM`8aLeq(I(aUW)r6:-aq=jZ[g7DrBm5-'RJ+UoWVX=5o7bJ@thEOD8
%=rpZa&AG!_?_j7A(l+[L!`:$d0!okbZWTG]RfK]^5Ekng,V`>\1dX$<^6)jU#cWZ37ckDXKXoE:_Z^W#</og3o9/"LBpC8d%B-ed
%Q=!t1*e<8J35[QI,C$6b\Ve5IB0+H"=Nr8<f"f!9HA1)@+hJ>Y:K\nIqUgJ-a6ngOYltW[lfc@R@\h_U73kE*:!_U;e>Z&tqE!%5
%?'Zk0<Yta;Q,`7R@8^c1<7gmQO5TcCaEOMq_G=SPWlH<u8UIo\a-4qEg69:C<Lu&73X8PDb4c1D'cEaj)G;>6D(7u'7&pse.S'*0
%(3-YbK\^QUC[>aU@X3R_8l&kQ[gnXC36clU3V7M:R9^gjN>I>:.TaA("b;19./i;In,JgQ^4X[UI3h%b*?h5oB^N#IZr%V6_WuVb
%jA!1!jI5,),aL&YqopHDJ^@:qb/F@N@,K'TLlnFY7,`\#TR)u/?RttPK0J.VFM`o6-i?F99_gF$SeWK,9U*]1m?MgR!+Sc=A?'2j
%)j#]D652?FPG5o[l&gj-cg.ZJ@:m9&n^m[[kPk4)#0m#>31-!E7Y@!XQ763?(2n+^+.j7m>"ZqHY$m#n))qbe42!#D\3Nj"RiRSZ
%B>5MW8(Mg9qQDp*L8fgn9p_TL1hI,W[.kQi)LhSC\,MTDB=Nds1c0Cn\rLtrM#fe?KL&I^BFF5[j"TIfEIZ>o&!^2dFheE+r^1%l
%Me\(FZYm*IHV%=jF5H83_mVr<hB*)PctYmS\!3!%S@Jil_\^T:41ic'+s@Ba#6IUt#$RDYd0P_VPsr'4X@)sS/R2PX+$m^WL?_$r
%[R:7?jhQn;d-EUrRR%u:$7]7r7YRE@]\FPI4(=k(!/a7E#C9Sha&ij*h!*^+m]\X*/q<6A)g#,3]!l^Gj1(Y.`a-i^qDKRSGp,$h
%hP?McmQkoaZ<%TuTs]1D_er1li(dG)>:Z.KmR3%_.=AdG?3h'N'I?)^af_:$e#D"$nZbG"@#8!U,4!1!ELbMQk^hnu1hGP&jp6q:
%Sn2EC7ojS_@]hNT:*h)\2=(T@':mR\Vcm\\Qe4iaOTF,o^u?esc7F%*e%c_1gFm4ViK05Gpqe%2T:&A"$!(FL;FQRqBSAbfaVZts
%[ukU;C9USYQsR(k?[)Rca/pYsZ\bl#^q6@ils?5@;Q5@o3EniLE^oGSTOd4>8!Qrt?iq71WqEG<laZZfX<qaKkWjr3,u'gpg0WUC
%JI:A.dB$f7gnU#ACQf:n3OIQi&Op#^0DL_qIGkN$i<.(p5GYX9@,E1>b'p!m)eP*qL[InW;hG3dkp$OWkFt[(!CH=l;%GmRBg_3d
%g&L?%WqJI5k%UE(Voci4L7+,F,j,X]((=!h(!$AbcOWgHe;oKDl579!Zhdj\Ipt.JO:LV_oWL(I?V`uH8,*%)ZXu]=?dsDteD\16
%('P2O4X!LWd&/MZoY7)lpZ_^LYbCQ;&jD.6)=;Dbnbc:B]cJ$]?9f;6biq6#JGLopL,3Ptqi`A(ep)[ZbpRdtHOdc<A[4M3X$>KK
%&&q'%?5BLTQCXRp-6tG".^XE6=A$.pBtqBk`>=!mS)<o(I_U2R06=?72I?*>S0NX,.8MHerH;aE7p#Zq_9O9.9U.O+;?1]QQ%iN,
%6RUsU^1!6IZ]H[qn.^$#V*[F2@;Fk0N3^)a?7RdpRPX\l:]&jgmgGMRTi7$P^\47m]R+s32r].]WA!#jdRP15Sr:dDYA(dkC0/(S
%bWsp`8&'dj\Cc[de*Lce@PnmKBsuN&E^>DQ?rK%AM@P9<QFQ_CB7CETrFL0uOHNVs#aW\'Sad7-XrO.skm<<<\<+SK7_g;G$\C2E
%$,^.9acW(6<IbH2Uo';BR?N#t9\.LSq$F9WCQeaCl9XS;[_k&$BN[?ieE<"em&@_NpgKg1>\YPW%n54QoiSS!$R85p"9T=Qee-6m
%\qQ\_TLCT!i$RA^8`>=7U.JDr?<B4((S5:\#C_&+p+b&uU/j(Eo.HmC7H@\n!`H#m(Pnt6iW4XJkces).3sIBXVKJ;K]PJe$MYbP
%2Q^6i?O%,cUn[(.?!p"(7CU0(AHbI1YEF+,B@W!cj(hua-8$c&P'uG]Qob?6qtLJIh>-ebG9;jt/8$R:OUh]-5gGY,qL'k8*O>`&
%_"-_T=Y]n6keq0>`0,XfYFK_alr'QfZe,3aQ#C&"G#N*KU+0r>'m$.!mb$bV$Pu#cI[%mIh"&>FIr<lT%^MGiHB4q2^R3OV-$SFq
%F)W@4K)dTm9B;8/+:6g6\q!I8R'ss+-]UM]]5Dp1W?.eehn8_U?hpTVi,1L"XRr_,SSDK.6Qnkn%DZmXiIXU.>,%h0:8.S'rJ<Ar
%Bnq>_W?op+le"_Bn4@!_V\o1t;0A7?76;2"2jo`Y5nDo^;.;"(GJ9em_W]Adl4>%50D#SkU[i@aCsu_cUp'YoBQ9*4M"$,5H+JnA
%jMR;F>:>TdT\sq!d26ts$'?YA2K,FJjZr?K&TJr*ef#up?h6g"$'*\);N,cii'"(iM"ASQ*LrCX;K4+CQ\#<T%]0tUo0s1V(QD?*
%88*s3oAUS`\i9#o!%Th$.l*qDb8=K38;/2kH["ck4A5nbH4U%Cj8IQ2hBVH=g*jP&/IE,]D@5lNbeCD`5H>_daR&.jk7+g'oPgt8
%1<O7.geb+X1iX%kD71tP&dm2N*i[*-H(IaV7t8p2VTl?T%IsfM'^^A`H`/s5PoX<5U?F`KPG_*$!9"O1,<VOO*1(8lm'[5c=Snbg
%r-!uFKJn<YEE/-Q#XG2TQ^,E*,kgF0^Cl>:p9W`G'hMr01LrZ4Ql+MJR-/orX^ElDJ-;$mJN.r6l22#8Y8oE@%m-.E4cgt,hG/#K
%V<Z1tEn,QdZs+g1N:ms]L)Nt=b(i_rT#=`+K>#=g/8o(Aa0%?j;&3>'jt4rmQ`;gr;+u9U8hhJ:AW]r0"7-rUGWPC@_Pe^g].i*Z
%F9%o/KX;]^g6?Jon>t%QQqZeh6BOqrleue;`DNPU[]4tL>]2C6Q.IGs-UKI($djk8m5fp,*rJ=rb5+F!<Y2e/\GL4m][5oL7opW/
%"S0>sA%[Rp,m$U"F(pABKLc]b>sqWtGP()MEtUjdajpcHeNSiL@p*_+<(pgX_l#e[?b)Z"Q=sKkgZWIt1:S&6&3sAMe2\+b.9-D5
%0".&_25+h@"2*=h3]97D^($(Z0lHR+BO33SNm3+*+)O8tRefH,]Z.36G1847oq_+,+&Wda;1bVSNFo'[a_B`IT1VNu#?d(>Y_8-7
%"(<+O"4Y+<l&&$NcOSY]45X:O$<JP95L:Zi!OuAYDj&Cr/%ur]G+8ON+IlJUldEDISVQ0pU.ts_G%E5^a,"O"D+*LqVhP8!43,J^
%U5ebf\Dlk9"]O2Um^n_"5D0r5FXoqpI>%1Cnr=2[W04+T3SjN)I0Y!3Wt,e4G?b]/>ors@Y0P^=bGAg(f#+OYo<ukjB,aAtYJVL6
%C;T>:A94asA2ijO5M@tYKCnQhlI2)Q%]N)$9k\.8-d1\rd,AIX`n8F1_TXK)FB._&W,RH\IIPs5,=JR`<,74m@s@.,E<D.cW]+SK
%3r;$nKc1Rm=b;C-THZ@Wf0Z"QR/ZRa-jp:Lcu$#a\etsSWTdE&2_)Z:@KBdqhmB<pU:?._56F'BEhj?r>Wmgfksn7;*.f7)nU>t&
%pJLTlq^fH&k;#^sKqaFDkH+=\_b]GBUFIagJ(d5N(aY8aaG;'M:/oD7\M<k\J:dPtEgp?#p'cHU+t)a'/#88XT<Em`a,r"OZ-%1V
%)]s!B99^,kLFeK5/AIW?YPTj1!r!gJZ`n%iiT6i:3q64bb0YXhN`/+AIdcedWb^/5!=k7`/dUOhq&/9AZ11.74c+0F`B3*fR$&bT
%?II5l<pta_YJi7E:Uq3o&rCdk_27UHP*bI^@QId)ePkZ6WMJF9-WHe$547Wd0,H@gIGdu(GeO5CZRU00OfpE?PrlSF6<+]Y/Y[8e
%n6I9EGX$b68W\tToq4)=D7K3Jq\`)]IA/Yro.\"Xd'+1LjofP;!d.^2Rk[-T`#1uIGD7ECB=OG%0pagkO(W[U))UJ%-2,F%<]ii2
%UXNcdKrfis*ZF[EAuU8`3d2VhLqYiH]a^O3cQk`@UQcmI$(p]TZ*kBh9]Qo;EgY9nRUO"Y-\F']K*_1H,g[G%kr?'.4h%?&*=f$%
%?tn]oTX7p@lMGfmPJNhnL7OXUj&UrN]eYR#iDMHmM2nqi&-+/glc<*][E[PS]HSLpA>I(ukCJ:']N<ppJ:elOfVkI&3$CnZjTHHB
%hGP%=fqh<9kN'UC)MdF=I\Mpn_$I\]liG*s8#W=^&`t3Rf$c("#obso8X#SGG.iK&nf4":M<KPa7'`8$c,5G]\*Guc_=!LP!tUN"
%?J)h\#[9>0(GAbk^$/`?G8SuT@A&qu_do\PUOp;j;h,]0LhTiLT&L'REtiZZekhH$ob`UNVflTK\94X;2UJMhLF`i3q]%Bl3dMXE
%>)OO$?=9P<FBoK@j&OU#B\V.<-tcq>914C);#5pkpN$.*Z&,rRqV<pA.c=lQkZ5<YKE+UfZmH&Ve>>GKq&tb=L7qpHd>-gE-+>mC
%+`e.(ir%ARC@g&@'aMRGZ"F@pO<Bf9[1Tdu4V;G$i=()bV,#/N;?3B$#jJ5%(,g@8G-)[cKMo1944cOP\Gl!c0Z7#AXGPbREI";#
%=7^:F=&1r8_#2q8L\4c@bA_QXYqjsh:saqo%+&.F+YW61r?H[us*;K:N`:XACi]q9XYZ48]"=%.Mas4),B`OCidQu-AFD)'3@j,T
%_[-ZS<bj;*[+h:,_,th;;AC_H:i*OA+q$Z%14m7`fNIAY[o^Emn'J1gYHN<^<_kTG6l8&.@f,?tpo73N#IP2ih(,KL4/5nF/8Vrp
%D;B8D1ll7m?%.Z`$JLrp/d(l_7jUa'LiejjL?<Eqf!T\^_A]G3Wc%'/SU8"8=2";o8KpSJC//p":a/N:rO)CLnGk>O&D\K_P:BiI
%m>lWtC6u/i&9Q)p24-sYO8$-E]G(.<qfV*02Gie%^/)Jg*mI<l6<mGY4f9("LD&H3<-pu&!a;[,j&%SXG):m6937r<NE?0c+9/'_
%/AfL8PAWe@f8aOZ&=$Lp&G@dbDC,3e$>,rlC<7gf/M)QO)GMQPA&Kh=k^5>%f;H3DU?f4ZW8*To7QR*Y*na#p>2[C\r9_itGANdT
%hh:hq;q2%tDkiot:$??!-u:Ib@%8VhInK&AW_i[AqJ95tVV#GkhL/fJI9&YBULj*%Q(=[&[j,=ukI\F[7.$VFCM8Qo:=O/?LWV'-
%[O[p,HOtB()5s'g@-2ttpFie6&"#\gO]+6OapC3];1Y%TdkI73("UqE`T)',f4(A>Tu48^U?EN4'(OScb<)"V+<$52MZgO)Bb9Ii
%j`f9G'a')F9^$'I:)&:(S5b%FmAL,ZhRt58&KfF&7EOr$Rr:GL+m/=m<dh+d#PP0Iao:q$oMOKXJ`rJQY_bPj3t]Yjeh%\(j5n9]
%eU,Vg%jXMrF3\h"ehZg\hOs<g2*8H^MKR82jI#9[fW0TML`SA*q[Ds,UE\,,2?.YE0T7.R7oW>abpU>tiu#;8A#AI'+TqA)j`,/j
%E_^dbMLl'Cp#rPR"kr7P<Y9;O\'j61i`rNRY:Z<+/Mf^;\nT>+L2VmV2FB*/"/*?L/i@3POK3Lc5+477SXPA0<UlKPPT*G$eeCJQ
%me>$ZTtN^uGpsHhSV#n[d("/j_TgUB\AjM@4!3Wh4<N,\mP8HT^<3Hfe^dg)n9M4fKK"QdUZTVG9ueDjJmnD>Wft521^_DZ9T2cA
%6GCdIIfIprhM-:s4qU*m+LZPpOUSTi6plm.66DM20SI/7o7SoD(DqR+LK;_Ec&"bVL!H>]=c4uVn=B,U2_s>qg9OM.Soj=pdM5NT
%m3IKh42*0ZL`cI)4\daBa3j>iOa?#g8,7J7hg"AuEY_.Z/!0A%SjSaUDoN,,0?TrB+%*]s5!@?4$;Gk2%Y,)d&?GiDa(WRagAt:'
%.-E`Loa$nZGLggp,K`07HY@kO;FNE#fujG5^:u"2N?Q`s!uL>[![%'0<kR]qLu!uSJX/n?+TRRbDK&ZS<P,1u9*fq""UjWnmDp<=
%#23r,2MHM'e3+Y!*4KVR1FBIFBOnXtTL%u38GfDnA?(Ej6(nK#9$N0DA%[\XD@#JE+d[i^;d>`b(p;slV@^q4r,F+;Uo`RPW]+nf
%-i,f@"-Ik?APSM1KM[JBXn(!&NQPsmgJepCNN:WOXlUgL>pPS@/Y^BESu?CHcYc#Kf*rqSSa6g;etY5!1eP#%"jhjLK5gPI_0bS6
%`1gH,d5LBYFn%j?4j:8nV3@hgDE0aI1PD:odRe5B&0+8)qKL"bT*"++(1B+-XA:KA%$B3m4s@Ls*+KF20=9G((-+pCX.I3tmlr,j
%r*0rXDOHHWe&I2]6)Mg=CA!_D^hG?[jC:!1M>-Hh2%qn*?e,bFD)H"PP3bEjIGV^$Mmjo?;=S<lKUgfr?1kR3DoC(f%8_>2K>?0j
%,2,.=]l0\"0I^k<_I$'uRAlK'bu2^K2fY6G=f3373cIoX#?moCdJho'6p[;hfMUS:gIpZU8q-CQ^,#@!n'^2*%'6":nCsEudEG'Q
%aLM"d%,P%W:tg&53S!QXL6,F[_fNP:<=">M]q9LniR>O3cf(B"GLW[)#VmGigfjg6O/`kk6^Xe:e1Im2pmTgNlbG/SIaRb]jW9JB
%oYpX?LDT0m+Fh/qO^F[BrB&KaI/W7=Hl/X2Aqcm$N"(OXg.`i!d2E-DQ6W[Y]j0jG:nl'B<jZDk.OXa)^k]"_L(Yls`OO*H<?%SK
%juuYKWAVgL@^7EtiDnp@NCr-A1E2>$:>_(N.a*eCAai<bXcjp;(`8B,dkr$nZT-#A5d,@>EEp&Yl?Ig]&uGhK[<]_%"a<oo/ah"+
%0E^Q/MRcW-C*Llo+$FOk^sV`Xr:`2Ag-W0nIF>EpL,pYP02CCO;)?2G*LS0)\>fao?1i]7T<.+"qR`;aJD0H)pRbd2[:IZ79/7uP
%!X-r#k7g9b;p=b=4ed-fDpLVWep@@M"RSAKb!6=@ph?`6oH5N`.Gn6dA62niU(]VJ3#9=Sdb%n\jE/H)<U$Zl;?Dm\^#sC?b^S5D
%6Y\B6D"Q51r,E:-j-`E6TIl4(Lt#7e4kc?YS>U/ec1`VVZh#1H7Al,dC=Mar<DZ:o)"XKZ[>=c@EXVuSNl?XLZ\K[B9[5^\mGZ/I
%:^ihs+*TB[6!RQPD9Aq3F<TrK=ZLoo4#V\mN-+<767&YB^q0p55$,ig'"h#XlHIu'!9_Y`[M/P\nC*m)o]>iHl)QFOha(WJ?f&uG
%=&F.Pds3JCVR[m8T+p_+(T6HooT(6-mdI$3hs'Vm(0/<`RQE"6XKdAN%J&D5I4oCSGc?sn7%IjAkfN-=?cOuuFLA,B'?m\tI=`Y;
%0Xd+G*L-(,iM=tT9["J.UdUcKLsF+06^78*8E4h4I*@g`oN&qS_%P%'`bob7l6EMA1Pa#@W\WB,F-%,9/MRRW(k-T1(pt;Qp#A+,
%%oN?#P_>R"SZTJF&gd99NG@i%!hqJn#N@]CL!A-l]>J"^nJ36&)2F5`/rgOq^=Rdo'rC$d4(a`pQTmWsar'7-T0ut6^QL,tS9PE%
%41fnfQW[cDG$o04K8Z#(B+M*%?M?NZIGE_lk9*j6j;:ilE<Yi"JG[A7PCZ]Tb@D<8a0HQrXJsuQLB9pX[_E=Lbf[D@@u76808K+/
%GB95MPssESd=^fhL)CNr;T;!u?R)p.1A2W+Il3_VfZmHt7g_a,[Xu)Gbk]C9q8t8h74=],9p8>H]LLR-Xe)L^XKg6Gn_']e";5M=
%*bD[R^Q1OIVL'Nd%nlY]bBpd!5%'?K+`jTFFm!6O\Kj9-8_)B/-30cMjEFTN,>gg+]ls2gl-14j2"EWfB_Rs)M@Mh+a8khK4\#.&
%[-%h?oJ7KoP*Z$:($[tPDsgVtXQAi*?r.kh#fQ&f0Xpe"&>Dn0E0&8rn-[K2Wh<'d/r%8XD+a/`TjTR)))rm7X`<@jY;]_1$gj`V
%+4N>,R:@so]XWW5LaSi`rl.^//]3g%fh.3'?j2Q*]=!S@#ok$3_KNnF:Asp!^Yt9%oDj<,3!6))PA`HW2P,$&?d"eQS+U!c%ME,)
%KnM)nRo!jLCnP`b1HG23nKQ67s7A<YU#,@mWplANi!ep4a6uiVUFeC(V7KtT_*(di3_>/>SVUIs"Wf@K;`G[]FPr0)Bd0&VOe@T=
%;o@aP"Dsi<[)XX(I`8>OEka+3M`]_feh&g*->B#P&3%tVr(4PreT4dnE^uLm5??jmHPB9h>,q8tpKB&ea9Zr[X5(t"7FV6;`^&gp
%'Y08*8iAj+$]7VekUPdP_B)%.PEV;+nF'[RksX2)r)tNXqp^fj7dRfFLI`A5lEN.\b"ds;DG>V"k\;\=1B&6:3DuMZSI*L$"=PMB
%GH`$u%l\)B*A0pkIX!.`=E-/!rTlp1O!SO>^63dVosKBH',W*#,H*bFKMq!(l+VP[4i]=0RMq7XFd@AmV3qj3+pilSb`.LKfQAJ4
%O`<45n7bun:(\*d[lR0"r#10o)*/[$!0>kC5quOEHQE7X+XYR[>t&M*G"&DVM89`-^^@(fTYd;n46gE!ibgJuktX"e<#?:,q!c^T
%nsQ$Yj-Z.IlV<d";3,T4F,",I\'?Ep7k'aKLNAZ2S5bNs<sCdT!&*d)RcAS9,;U8$^0(A,-dMOH9q'W&b,X&oP-A,>#1&Cs=@T:$
%m/r#Q!t@<qOskU\``daHmB0P`j%3]D"XoHg^02^i\&0i%WgQ1%E:L:.c2rX6?%i4HR>iC_@g@[#S_O8-EP"qX'jMV$_ZSBRN"?Qe
%1DQuM'qeFCE';.BW,r<>1`C0V/Jp$aU4noLQ+7Mf):W/.GVm<+29n@FX509`@pr*KQn.:_EoWAG):$?`2ZLoS8I8Wl%.-#g`_\&D
%pZcJmRV73r#-mN/`2?50!A(MhOt?Glrg^*^A)ALs6AC4gP\c=-LHa\$g,#Xca.QW2lEcOU4<3^f(ft:g1.D4RqCbkTOCG'DoCEW'
%U`hQ!e2ZilT/p6'oHLE(P@l]a%dq!Ic9u9_Y,RYT__f]Q'<S2$XbLN>XZiPuA/Qi!iYiXm7L%df:++W2+8(FFQ)HBJ>1YQ`,!'Rr
%*C4"R/[Y(LKI=p4)-`^ua_4r_Z-ZPrjc&X?rros;S1%;f.PKkQe-3K4Knm4cc3)fP@S)b-ge1<<F3tV6kqDF;'1[]Vl<^i'PX]8b
%LNn?(#4Lf-Q5drnhJ#NXU%0nLHn$uK%@qG[.&-%$T[6]%>b)E+e4/U5@;!OIp@I\&5a^Bj*Id_1gO<;>q*C$$)@!'>NE_=po)<3d
%fZ7l5QlY"#?:UBd^2*N?0Z1p,h/D)0nqu_sUXmTGEoIM2Zu,N0"p]ti%#r:WqbDhFGt0GN.kbh"\.:>&kH(@gGEfS]j^-L@+o?VK
%P\$8WBBL87f%:/c$ro6X8jtMj8WhYF(=Qm-C-Xd5P&,oF.ooF0<d;"!X%7eA1=t;qLul08'5L-"ggalNELpq)fBX<VR*?t+=.:3\
%r%*)u#sj:S5Ed`H5WKU"=->c'T:\8F=ciKFmhCK,fi""Z;4=P*(Wht/WNrX/'k"6NiTn>5(]*FRmjeQ.)a?j8.F!X#l4ppRQ\J5:
%-P=X/<4&0Y=#AprJ\QJE(AsgS3KeW5F9DajPa[60NKL_>hcom=C"\2T?*$(pC-mVn/olAhCO!d0Z+NTbaG`q<4K!FmA<NCCaqlem
%gk."7Vn7,FPDJrH_Eu"]<?`nWNBGg/:h4nC0opB<h/Pgh'\!%BGgP"I_&!F^%+6^_71K93`k"R0'3Xr!'[TJh$?XBK=?>'gR=TgJ
%r8h7$GaqUATs_5PWlS&f[k8\5P%<&&Tinir/-WW.E`f>$ID)]<Hb49&5gQD5<sg)B95D7?q.sS;7'0Q0Wda1n)a(N@q+R>Y#8V;G
%0.`9#\th%?'<'V/eJAL#4806GdjjHMG:nq5$#_8'!cb?Xmhn[_Tl<<V:?u01P:ZZW(em77qk\mf>Nd4FqX:$HeH-!bJQ>Q/THM^[
%g^9Ou8l78]U5ca/'OZdc%O-H0-cWa8M2E77OU'173o/J8S0@:L66ju(g,PU>n7*iOL@KB_)C1d((<dtUVqKmj0d(qd`tPmFiH#Zf
%r=n':3C74WjC_,RLP=I7%]E_J5NG']_o6h(B[ZG&_r2m"kbT>tijHrO8S6/.[$&3bPl]#NmMIK[DG2&38pMRfPY47YqU'R^8C1V;
%WK2?[p,qb%d$@!0!]_^AdL\G!67/WLKXEHaqQH>ir':hEe:m*[[i>E*<tqelq2*d`r]O6k-U8$8(Uj#WnsbI_`dWBN!uY0sU7?4N
%E6e2;KiB9jr4#GUnU*QmFI4U1qjdOFQpdRP*m&]X!^1V)!IRT96^/K..NN_0.A"oL`*b[Vf/\"1\2S%^"IHjX4#qAP#jd[Fm2#FZ
%XU5_a>6(ki*?%eh8#NNS-,kUBhjs\fGGH?tNr,)fa8$3N`mFMg'6C7R]srEO;XK0FXOCR4E/sN(bj2m8gh5CH`!9sI=chnU.dcKA
%!]A.FpV$,\3+pV'&ho/IrP]ZS0N*!P5r5'qJ*DU'ZCAhD^g13#;s_n=!1BBFKl0?-IOiuZ<ZN=fT?jB1K!5<#hEK6us4dR9s*\aq
%m_A\X$+o*T#>a"prPD.\o/YQ,1q:j4=ranf]4T:)0NX&:"7Y<0ha>Jj*O'rOA*07V&;g):R5:h%fB3RWjbM,"mcb7N2a"5b3cfcB
%Mnf#Nrt#%r_iOi[c2[@s5Q3+WL`a!`0dD/27co'q^o`RipjnpfTC9_rp\2>ul]4!8GAm$'s63V"r8utYs7\bWj7TnEeaL3;H[l"i
%rEfNdf>%=HH(4R.I6IN$^\rq;pa0=3hZ&Z8QiHRLs89_U1`cGNs5*.Rc`XoeHcqKMnD:YLkZ>LrlX%*hMnUH?DP)BoBAWa^ccA1N
%VAN=9o'm+ep%)DfqQKnt[l_9H='tpDLTc$XZTc%Xp\+:6mCn&,\,178n9_b&q6dj2l5r4&h+uf&8$i*ZoRAd.q`A[B\9V#7g)Dnd
%d;+4'1$,gTg-.7YhnS!r$o*0T]@k+MW1s#Ue*ELFkJ$#<"nh3jH1!Ka.N]M5h(M$P@>Af=TDA8/4F[CU^"+fDfEaG9@:j_5mB42"
%LQ?'AI9M+[]C1CLcXq?MV;".>];r.7iM4*`%W">Ah04hLQeVJta3<0'lDoF0-o/?N^h9-n&`KA9mJb]J5CWLqs6e\QAHMhI2*\f^
%ZnM4-YMT9M5Q(A-Hi*./qLAJ/Dr,l;DXhjA8_:lMKR`dOhst.Se,Iu!]>sp*6b4?<kD0)ts1BEPb?sX$rhk#*G6':E67r!<,8]qt
%VN4+oj0VFu@:KV:a=tR6Na`l-K5I<;$.rQ#AOXL?gok3FT;I^;_/p3#Ob,JdBhg#J5]%7FH0f;ZR+YC*+u3JP^6DqZnmJm;>#9t4
%qliFaUP6Vr[)?cnSBInhdO$0Eb"HOV<VR!fP4$/?jpDGm(h>_J3?(C2:o<q[UV9<`JC\[>HT&c7TTpb+Ue'XAGHq!q9gW8:!f_8b
%]$KPqWt["8^F\5O#pn*$"@H%/i:p/2/D(,m0^H]jj0Bh5&0Pa)=WXFB$P5ipYW@L/>*9J.nm-iS;<#2(]fX&lMZ&,'ajf]4erNn;
%Z#k\OoOu"H$,j\p),klHrQ:Gt]/.;YT)#A3WM9JjOfiFoVQTEmkSEM>1.a6Mc.#Z"i/TR,2UW1R<`,k^_Z\F(9J""F=c"ll(P%'S
%GZ'*(mF=2pqAY?1?0f;>[+>D+gHjLZ!F$I1'XRLQ,8Yn:"f;j@\4%jB#6d9m-.7;4+M`a##e4KCVcH[bB$c`l:QT]67tFDpU8ms7
%CqjH[N]JGQ)o!,f?<%qQ4rD)D+t90e)B'KRKhZKNUO2a6d%utMfIh;L%s"caM2S4"aNip@_eC^55[:I<)S^TBCK1j&J):a?#P]!J
%RclPF[%/P/3me!rDWGMN+lK]Dfp[LaRIS]\[:fah=6ORV+DD@>6a"gI&jEoqg!V6ba=cj7M4to/f?i,j/DEV4^T3C\>ct3.J-^gP
%!]M:S8Y:)Q#.U`#0o3IdYjD-*I.0!>dGGM:0%^2>Tot0_8PE:WHS4Gk%I'tkC+*=SJ0)D7I(lL\8Uu$nkrf;_n/$>ZLdbSI@$>=$
%Q@'Io\AWU<U0[o2ARP:nchHPIJhQgLrn[k#*4eSlN0IRUP\MSjXeY9*K3!b??D--e'34k/:sI_;3`,;?L1,>5LQR=r^]q/E:3SuJ
%#[;Q!+PLJ0H.?"i^mU;5R^LrOq%VpQ.%@Wb=MoS]%,$_6;Jb>69FrXf:#97tPgI59V(l"J&csa=>\r(0XME81BHVTAc,G"3FEU:W
%`ek&LRR;If1$AtG]o$\lXP:7PrZeoZ(3HVI;V39q>T0o,Q3H(RrBC)KSe_Pmd:@meQRglT"2`Vhq5Jru!nLC>`Vcuu-@/!fW)?Xu
%_AKoP&.Qd+[rFrmQ<N^a"?utY.fJVk@=Pse<kj#I8n/0o#/<='^H[51TBlNZ[6Na\k2kptP[Hk-f69h/7:Mm&+FXo%qni]c\^eXa
%+s&eugV:G\Z,R2DS1Q:G1rAKWatn?=Cq@AAB\"kW=.D^0Y8u:QK-/nZ?6B:<S4Z>KrP&0^`cdlPoI'ON$.']D*dSh'4:;is@83Ii
%""^s`&8hN'!+C[p=7sZjA4p<,3$*&b`)b4<qC9=M##3_Jp<c+W_3Q?onZGq'/iom!.@d!r^]tn`K#:o91X:^0o*cgJC18?jUCYm2
%\jraTRlq"3I<dZD7[3&-h=R?>_144$U?lm0.!)-&hm[Lr2>7",8`PumiA!0COk.aX5bee%b9JHin&^-Be0+30"596b.=;nR!0)Z/
%`#*kXe1m'i;/^QcN`XYKOdTK!:k45B#$FYt"Tf>HC:dugdJ`;p.oj<8!*?4G6B&8Knp5Gc1BcY20pm#@Hj,+Znb^`;da/-&UpEEc
%.t\jcofA+LhVK1J;l_m2!J#XCl6]3/3+Tq3In^kYc7;n>&>h"&Vci3@I"lhXB/GuCEq;$$WNugIUg3l&jBB+?%h<9@m(DQsOh.-S
%0#pfp:N/s"MKe,_6uX8lW@f4kRV_X/JaDJi,8Oho6NN;V?\eQs31gX[k_LA`(q$Q3PLdo#qpD6,n.W-2L16VI5(;d6=bGa271Dk>
%;cd#AO:H\.VhWoL(sV]jKK)hbE)M?k1>JXE94>:[P.R(CqBu%;a%LHn(r'8TaOE)+!-38Ude?eK6<;sco_U06aWgIWo"e-ldqEg0
%]s!<od?A1'PQ19%HtP<`joBo9N;*sa)-TMs62(#fU*XhN*sqk/4JJ11NGg=#m/c`cOHt*#$rTm._8.38;A[D&=QoACiHmZF'G0H`
%db4#C%#,TU4\o`lf+<d#j3\2;#*_W;O"2./=oeu(i210`W/`Qmo)TX^hKp5'7(&">JAIts&#G%hn\q%Jj/E?27E"S1=E,/8>*kZ;
%/mR+oloV!BMmoAaiAk5Tk$e'bNPT[#T6:7qgkX+j-R_-k/R`()f.hXBBVLe(miZ-oe^JIX.!+f<RKG69ru%(,Q:t.Sc+-(oniB*c
%HUbhrM8nbU"7^h[ef6=3#XiuH7YNXq!%p)ij,m_^>d++1`7&&:V6$#h^PfIe82:ncd=G6Phll^:/s>cPPqD]S$7OoJ=!.JFe[PjN
%Bek=Ib^;V=Jh+eX?fWkp$;BlMR-gLR%q7O)eGuMJrO(Pm`]Fm6'Cd+(P4elL,&MiS7EVG%/VIt#9i.HL8F.][7ms*Il/CpL/!;$N
%3mI6#(Z]U?bjp[A;R<(Vct;Lo:rp37I#.)m&&B5B#A$V0F9ht?!+f'4.F-:Z1tMK2ot';fWHsS3V_J57'TbF(5,/O\TuZRo10A2%
%D1]FJcB80ZH+lXtG=&R1JW7iCQO\J-Mb5@S)QuPZ.X7g]hJn&5n\)91ZNA0EeMGQa;8'1mI1f<I#]t?ADZAF;mSgK_#-Ja&Lj>*O
%T,dA:6lGHeKKk?[3GK;^WpUt\8Jrt(B[c,7/Y:Xc^HuE\\q2<%U!m,i=Jb*Sk$6cVnQ[\Se$5XR/Rp;u*EH'3j_jaZaF/$BP<(P^
%honXGWn%nH+uQhg7Cl/Z)eS+*!'f#Id&(hs!-[opqJFT0oc2s2Y?FE(E-TUe0[U/8C+t4,_&u(-,/PV6GdB>B08X'^L&5m'l$63W
%0\Dc5iYi#aPaX9@BVC;a""l)[;L[<_LG>V@+$,=,==r&j'$<L`#'ASeb&,PYMQ,7r5YFO6.i]"\\P(MP&M.(<bf_0#nqmoen;`_=
%M-pQNp,k7^m:P2`'\"EqV+W]m1<->u2[!`#E(6qH#1]PTZ+ER*&Q!rJNH^],j^"-jM`>"=i?pIVZHJJU7e6XXhNl>`_)RFB%tVr[
%>@HCLZZ_\TRO#n;JAt9<nk^O\B%OT9RDL&jp<VXs^C2[j09NprprX1SWn'3K'j40/fD_8rRnm21P@[DqD715n>(h;kPe9W/$qlZb
%V]=g?i9"$!`%iL&$>Xe,d3o$VhIf+ap1p_je>B5@,OtH:P=7H',Nt_cc`=U[`EOs*^>lKlleHGj.qO]!LuP5Y"0\eLr6/I&l5L\.
%_:-0%)qbWtN!.[>Bg>6mqDqYN["XsTA'NFP>P>X(IDl1<,VseL%7KAEd8jjCH)M1,<1%;LYuKJ;3COE.Ls17VSCGNZ#eD@l,!$T(
%/Y-4MimaIbM5IF<4;;M"P?>iPP\,kmCib8OcH6a1")Zj/I3%mS<eFtq,Z8"o,*e/gXMs&7b%es#reZ>[3^OCL=&`B;_G7G&Z_o8b
%p2`HqTs<LL`&5oN8PgCa=at:)@]W@=Y":VjWb.E)mg%A(##\iE.$-OF;@.*EZB-F.FuZeX-T:JB]^sJ4lYjLL7I"6m)=(Z==n$_?
%hYJ9p[Y>&^]iaaPE25Na6ttgMZ`lKC0t_GTfg[U&C+nJ^R5HK!@BV7uHi)Tt<]]\Ko!+ik3,[7K21Os.!DeqG9qBguN35ZWYlda'
%i\c$"=1YGdU!:`LC(Xl@%]`cU8p!TnS9hP/'U.MHRBBb7!>Pq,P-F#K=OHPN0$;n<=uF<?O]^@uMpji$W`:H\]e/%n]o!bJG8#nY
%]+PNuK<HXN38u50ceeB3gsQa':,WX(]_dD<p:9#R91tPBB[-P7D)j$RGo]rT"g.OR1HMWYHU_TjY^%4^<k#U#F(6eKCf:8Sq;%QT
%+frKY](-jjW=?ro.X@U8n^SkY@W/bOF^1SX*,$W,2QSY!/%V&s]s9Wm`gN:6Bii%s4E6hHh[HDD:/htA9OkOO$4?.WZ$DR9dW'P!
%ATG_8WIB)E]#6m0Uu%lM^_45CDa6q0SBe9PU"UG&V^H7F8@#GB0t3Pg@nWBHL,:_-L:FnERQ\\^c,,fM"R;:uh_c!ormX+PX4)%@
%6.c^-e^l<$8,$iTl'N41]hl$Mm5"#i&Bh7M\YjJ$Ut(cF'N+-W_qN.+\h_.1SN*7`prEP=MdXTH()@tEN&BbZ[&d=sX?U\h,fiYL
%Nr6.L&60EpG)s7"JSR2d>bM%^.U9fHgM^lrd7[%8X1f+7Pr036FJMn[ep!+YSpfRr;gk>l$ZkQ5-goL$_PJ'\fc8OT;fW#=2>4g]
%Al2$98rr(AI('j`+<lW'a<r=3"^c.!:"ZES;.RDDE?mg9FZ4Mbq"I'\ma1$'94oOqcjK>raJQjF[-?3XGDhoo]\a4-^dC/kU2^&p
%+t`L1GS),e.@@N(M@`oO9_qsA0o"Bqf4o5sI+lBH.nAJSkP1a0?L^:Hb2=%p;=?D4WQ=-F:e<ch7kKMopkT*@5^F'1*hP`,F+h!K
%;-E'Pj<JrTO3&*nGQc4XOh0?l&n7WUUrjt?dcJmGFQu/77htJ%QSKKL.8>!-JU08Y(eX=_Xs<Sj6HALfAq#!<`Ebn)4(L")rqYJB
%Ea6Y!5O?@k\2NA%@a>Q./u>#l?V5tOj0GAM_Lu!iQBhUHi2E1Y7]V[[_gE`MO=iPrX1?NV1/+3ZD(FY*-:QY9O(s[hFlXB1g5.eP
%,3`Y19)%X`GQM41K6)cP#[!b#6c0IJ[+F/,iJos9L9=\R[8ls'qXY:$0bc>EU\/=P'GA97285Zp:VBTXcQ2:`=r:`0BU<o,^=C$/
%6pnJ=6sCi.[9nCl"OHZ'OZlZ.WpFAg)3JLm):#:Dq$R/drP$mI;SjZB<XV&e!KeDe7aK-'1gjC\c0nS=Fl\XL+<=KJ6JW7C9aFP<
%Lh;;q!.#.NLm4/E+;u#8<V",b@NXXm=,-PS#a@E<>+4DhhIW"t)\c?+l(81SNmGe&6S-u_5hdtL>kS0m0s;f4>j(U`mnK(Aa2(>>
%"q`cdF-<+(M/4a+,Gpbec&q?Bl_JB$A=utJh1BF;a6al1<K/t>OjE2jfif8i[)Q)FRBK6Qqrg<9PpR?;;e8LU\+,V0;,E<"j,8+W
%O^R`JEdY!^83+!I0AfC0@7OAN4@qO7p-^B4W/V3C3-qBJ9!;&N;YZn^^M4@=NLPaYA64JirA[,"HOsRXn^;Cfm!QE$Oq^<!6bC0[
%hQ4_`V057p")C?uB\A[VlVHiV\jD1T8'?a0brRhQ-tq)iPGo'r86m&>S0NmL+b[TjTa;FE>\dA)34YPS9ba%?L.cH3_h/+)n9UXg
%);aBhKTKn]85&Nj/4osU;FSd#+2+;)hS0=;TGJ#S8=,Pk0qW`WC6.RFE&a:T\OCJ5nE#G:,94&+mOfq\)ETnY!8&J.5e!9&93EWe
%jfG#de`l4kK\jkFBsd=9Ka=>eiiFn]NZb%Gn`Z5t8'OAX.-eFk/;RIHZAM+ESRrOH8$Xee9[J]#Y(@6H=18$1NoK(s4G;moB05pa
%M<[3*YmDR9BcX8eZ>qk$G*k`Y(eMk'f'pe3-2uB-+J#;7W@?87]pq>+O,r?S&*a25<5AmSk$s:QltasCT#^(3f,d.6CFOTUb-_cg
%o9h;Zdd.Ye]H(10nH-=MI9POWQUueapDGKk&QZ,\JaI=4q=B"2U^@#h7IPLBV3Io(eRQH_piX$BN;<Os-l.Kh^W9*56r)nk$e4;X
%YKPK,fQAr<1.EN>=uaL!!i3oN0kn\M`jB3k3B1!dk7f@X/*s2<I)R,nbtC.P:VZ(Q`g]Qd@Ri3_hJ]:PS+;+eV[,uj>.^Md#MjHk
%D?)=G=B($Dk=H&Ygm`Z]&H>B7pnno2^54r%XHO:?mF7]AUY\-YPjA$E[0#VLTRGo%AfibJ;l6Hrk%'?[Sq6P?pF88"'KaLSjQ9qg
%o*Fa.*P6ojY1@%/;rNWCm9oKd%HZkh=qJgg6%qfjJK16:l7,t;2)Z*('qGL48&#;.a<G#8bp,MF*/C,^bpr^^Pn4>[6R%+DZp.[-
%lKU,[.1aedC(Yn0AKB[>_rS7$]P#n6K^]hVk]C7135q,C'CHH7`0OGM]W;:?s7q]NZ`eZ,s6%_F!Im'?ONO$;R,HlHS%h+]>&Y9`
%Y!?oIM#m8Ljk4_rEa*!D&$r`bD=tF>'jg(OU*j4QI@D)$!Jlke,f(A31g^Ar?a-J)D$;!Y&^5kB$AQ.Ol*(G,lEbhP%_(jl3hS2a
%cVVO'157>$7jE04f7l(ndEj(DV_jKoKOG3UW>d>c*b+7rI;6(Q>pN8!3/:9OMu[=H)=J>mF:;17/m_3$&`bjW"f7b-R`6l^pd6:/
%V=>uUZ]P'\,QHJ0'G'mc0c;"12FI4<_9l(3A#P%bWNk7-k=1]t.$+A*0j7!m(;LV,4C^pT1:DDno-&=\MDrV3&lSUeEkmOh3$2B/
%Q[mkYWY5*+p&[q!:8<VPB3r&k6C)RQn>)d)oSGl+QD(!+m=$DZMk$4iVj&bl'ud0&1Gi*#/FG_Fn2f"$ll=*4ol]!?W]9gb>/hc/
%eb*l+:WCaXd12TXeIfZRdpVJ?2FoQSVB6B2W`mh]6sGuu,:oe*Cmt9^q7nE%jq6VC/1n$<VQ:f<>YR1-+do-sJq!7;W?/Wn_\b_J
%WiNi<08Z5>BsJqk]Sk6--f#DS5!j7:@j1Z,[e+N.man_51K5'pA#PuY3N7a*E.B4f";K!Qktt7/H[8oQ-d8<aI).V--aejm3`TWr
%&WZt>%DQqJpm*n']tTrG2Ir[c&#,._'>,0Y)<F[ipQ3H4,1HG;1?-nt]5lh.L?NoA)?AQF6NP@1J.3W*(B]E8m/_/iP)og`-VHuD
%"H=Up+r9O*+rQPk*3/q1',MjsqZWJr+_OR\Y5eeG1.q2D?<"5-S63-l5hWUdTohimbZ@b(kp;e>[f%L7pVg[t$&0j>0aTl2EFKi6
%Zc&'%6,(.*4p$q3ZW7eEPluW)T<SR<T4i.-ZEStU6VB\;.dF:l9>R5KrgBle"Mg](OT(uE'^hZF:V)Bf1/B_de\m:O2j/E7olPlo
%`kE5Wnik?5Y'_V!]OpI3nT5Z^\l)XZ[iuGLF\$d=M$>P(-.:PX#PS,pRGgOm1a-\L:tu;Q;oZCiOnLni34[V\H,`@b8:NX2_8L$2
%UNr?e%tac*b+Ea13>ZY)SE8>@4iY0sGbjqM4q=)<U'2WBhsaB+MWl/BOKMOu0mlO/<RCTdOgQP%jSg@G:e:r8Fi'hl97&OVp3oWW
%21us#K&ooLSDaB7b6*4+jehk$-WZT^<WJ3PZPOjBT>'omqSC^>7ggdiWO\eu7=I]:#FqYGG`m&)9<=Kqg6H'/ghJ:kXO)CmaZ)K"
%Ha:c:6VnG+fD`Pd'>R*LG'cPVR%iiXj9.B*-&k!2YCr)`*L/$h\1,dijIT\0s(E.-6ZI3l=-f'!@X,+)i^u5(R3!>JV\7p]7g*XK
%mDi(_&DCum-bKNc+XpB/!=W<3q$P4_>%*fN]DpTU[=J??CCOu>*%3R9k7qXbrgL*K.pY=K]^&G<?6^5)RO,Ch:7rSX=Hf:F)Ia^i
%qi?lZ]eP`m7Nm"ZH>Q)"eNJrqcSJQhKL<iW^<:Y2"AdN4o^44dCbueKS\GRu$-C-sS/R#a)$*2F_:`)eE;%6&9;=q_Qb)j4TG@_c
%p#&55U&D:p?IB,:A#@k`8&rn<_lSgcDU<o8ciL10,)%,Q-mV:M(5"Wo&(SaGQ96Sfnk&Fg(jA2reMC.BYHCtXJRrJdR_qjoD8.8%
%EqaEY]&1GOd/s.LZpZKX>qq!ZE!j3O9'%`bWL&mWFH3@B<c%cFcjp?(*3.t#IJ;*MICA_'Ic^4a'1de!c/j[7bH18>p+-5a6&"D%
%&q.=+"NBO(`BW&%>0\<dM<0u>6bt*_k=B4@EQTYeG4R87em1_oND4Fq=!6@'Vs8)mY\]h+HR#Bh.#lmd',n]m)+,5,m6-pBBL]#;
%)'lBh]j_.,OmHh7P)5:_"9_Q[,"Z$k?ZZ[n_S_3DFpL&KmPAo%R,GVfd@0cHpdjG3;^0.d6B`7^cA5:7S<X[CF*`epg^0o]0R2_b
%B0e\qHf'54BE,[fCKW!fa9"1-ca.$S:gN;$jO@Cm7m1IgS_aI>=P_IL8@*/oLjl9c4tW=m6#LnSBGk"<jBO,OVNSDp\)&j)'6e(%
%M!X)e"2Obh#iLq.#"1_@*"O_D%[*fO%nfu(U!VCgO\^T%31?PHG^Ang,D=TQAGTZ@qa=BP2tiiBngeKr.?[?D;CGD^P3-Va@l(L/
%s,U&`NCf'gH3D1imGq]DdMg1h0-;u"om=u9``E\ri+ej"C0^'Q."mUr5sF5`ng.rtBYQngGk.G^eF:As#/H;4'AZ@F0oW](Ou>_E
%*M1@'kL\CABM(-%RuMhAlmMJm)8CUGqXTPY^lQ('"H\S-)]4E%$4e2*>lq(#-+@LA6'$Fc\`G($'Q(ml&Vk-AHgdtD.&cB"MU.O<
%)4>kBL-EZAiBd%MWtN[2oZH>f'H8e/pi4A,Z.s)eL$X7QM+8e8F#/TtOJ9ON7ue;DKc*jLTbZ?e3#KJ-@<@sf^dDe5$k2EhIi')W
%,n&^[*&d:9a#UgE%ds:#C\^[=c&,,*"lD.H#5_p9T^@2Cc8N4CAlQI5FOQfn1CPEG3!*(nG>ltS-Y^6DA,[a15j`MHPrI>/=qcsX
%TBt=%Abl3HkrrP?/t1,;LrTendV*8,CIpKZ^:1KtFdAIaS\J"$X1&rW)"^-=/(Y0Xpona5/+hlSE7R/&c7/;u?Ipe$m\>uimc`#U
%6rR_SBdNlf@?6[0eo)358n'Y[/OFjr$C8FK>0Ja;[]$GTI,GEsjt]=o]lPIObD#da9cm!Ej0TJ[5HklZmF"?3?OFj3!RXfeg=F@D
%.Hk]Q-q(oBn[B]?h`W&&Elbi8MP;?5%Z^.A8E?"^M&J-NlTSoSN-7M<R=\p8LT\RE2WYatXde0Oi-`R4XfJo`?3jERr=h@AAEElU
%cBk=.<^An.jTIIHAUa>;R>m=%g!;<?#4U&4jgtI"nag8U9J^a(_24"?&CCKRP9]E;5R^a!/#b;a7CVbDpf-Wd).Zaq5ECJq_rg-#
%UjsnSgM$#@*h4T=W%2\PKl"LX04V\D%K%9F:a?BV+&4*\X[eD3C=;UQnX9-ZH#)LdK/7<MUBHg>Vj@H>lYJloXB,r$$jtNPgN,9s
%E#&\9]]SV:2o5gjh=Sr?%EZe?2gplr>4IV<%eat<dWG`$O;_aV<`Ja6qLtW4Q1Ii%:*#I)iZd:MZGSUMKrMkP<&Ygj6-&."cNKeW
%A\t`qL<0Pte6-@GR"ZmgILu"W7nE(O*O)]93=UG2Xhu`[EpT*GI[/R5@'Mf-$n@eH\4`[af!'q+6DW&5kdi*taE!o4K:dGq4;?"D
%90:@3C[Co;(>0;HnF2KSSsL=acs\52g"IG8Kki6O$!OhZP5U'"=kgVh!9ZMpo!FGNh&":+MpuW%g]S-X.WNspp1X\3;7:[4mMoO2
%MEpqOQsCrV$uJ\Bc4V\%GP#r(XWHX_O:9gQWV&dTX(I>KoFk0+l1/9"*QT).m/W>[;;@lVblTUO;%9nn-.P(rRl2$Rs7B8el?9,'
%j("i;A%DH4FnB#<ZsPhI"'ec+"3\q3A*GR>!cGoS>Dd48RLL\uk>Q^dT2#UtU:KFj8q\dX'o?0R%LW[j8gH/B@S72m]dJIP3Yk=D
%4ATYDR[m,m?I^C$\@&h48*U3,Y\;^8>DfSGVSIj>6"MB.0H8T"9;$Hc:`Ds':tu^YY:IQ"*q=Y`Z1N><mLa+up#(h@O(nYh=a-_V
%),V0dFuaAcHU-s6FH7&NqW0d"f'P_6"^31Dr5$R?eUlc",:T"j.N<%(aP9mH7K!39ad?^BbLFXtd&$[DJq5h@0-H@P28eO9k",l7
%LY;j4bKd9R3Eu@^f4onYCD*_OG<HCW(5Vs_#?-lgUj3cU7_$n"-J4/P:Bt"jfk4ujn;j$Fc/'k[J7=&:G'dBW7F8_2&gD;]ZDUQ9
%;*erX/S[D\2#D`F#CE)0;YaKMo+(p\_YGp(Yi(JY@d7g!!qal^gn;mHnj/9p]U]UZ'?\eo4Z\QI&69c<Cebeg%CLRL6,;@^/L;<R
%!^OVh2,\oJ$tU/ml0,AMZI)/K.i+NhcGcf!8e%c_I:55"eEf^P9?eQ6?&=VFPV)P<0-c.WE]R-KhJ*,JGj#Lrm1='f?OjKN:aVe^
%^ZJ&*m`I)\N_'dDS#`!$iiM/GIlGqNGfW8Wq(rK[bfW*aG82AWZ>2&2cj.nYmAo4spVb]UmD[QCqq_ah'DFuD/S"81bk^a'W:1;Y
%_epN7J#h0%[Yq*_2F^=LYI!7V.sB=g,o4p(I"i?]g@n+_hC8?^7&;VAP5@Z&L8'Mp(V4ZE?^$l-('r'*bJbbV\M\9m7IWSVTaP30
%fY6P^&Q.,\-(dL2kBob9YY&gKj,R)(;PC<"W2XR=S:l,H`,%FgW_-(T61d/1Rim&b_m>W&`4g<B)'Y>]8h8E?lFBqD_L_%S",p^-
%Fjh]@P;jA*@'-4T;a`&X(ZM/%SY.!q=lq$KY"!cXn/&@J/#ms&g")M'>j,uQetW3cHlS%?$g_./nDFTt\XSqH'>%E8&nUuh'Y%/l
%8u8af&`%,TSn&pu)e#L)a0mO;$unON+moS@=+MX)N<%a/A.B:uk1)dG]4Lu/#=f^:?4rXHkL8lu`S4nDnD]stnaAPTj6H(nDn-^-
%0tW.04Vc`Y]9iC-e$Re'8a9*^]g<8=a;.k7KM9AnMjZ!2:1rmK<UN!=`<l=7?[V;k\1dfpPOM)WpjU]]8&+iu'62p+ml_Dr_r#er
%Ibl1-O)m@2hi3l$^].?GYPu8*l!NTDmscs>_G]HDK9mQHT&0)9)N&ngg$Tqs..Z>8I.=]El%jN_Z.k,j)r1`XqqgrDEjNN`RE0e1
%HuQF\1ZHaCAq*<$Ohdd\<":_:I&6hia1Q.5;SV8:Y$_i*]\//UI:TbT#pYSYIDm;G8OeI)l=h@,XhA\[dfc1e#s_VcffLGb,l>BQ
%4,8:`a"R3[2u@Y,rDe31=9%c`s2>9b5.K3g'_+]R!/1mHC^jA&Nam8%nL&&)ElV?*h!7&gqQnjCr\tm%mbm_i%Ju/as)P<XWa3dS
%k<Fq%,-q6lSc8+gen[5:eN\Gkn_X)fqtKq9(&G8IfjEuW9Wt<FYQ*]efLNsV_9BWWa$6$1Og\Plb16&bFe@gRab8m.2uQVfU*!2`
%ruhS7?UmmgZW%gV($r_UKqN9t6PtQr!"PpUWouRDQ3H)[Gs!9r_4pDf,Z#MchF$q[GnQX<W"^Bi2V9HEfae80.j1d9"M)q@e[]#:
%_CiA*Co0#tKE[SQ#PatJ9@Zr5kY8&@-<pqNe:Oc-:k*aPb>E,H<kR=-WI/s3!TTIV]jr`IEC8\,UVfVV_c!_ApCPJO7ut#$G$@_Z
%jas+o&.VT^#Gt!>-<.qDJr;oT2a0.KXqa6W.St!`86OJpY#%F&MYd;aTa$AV`+?ai9;*RB.bGMa+NSG'W&Y);UB'*C+X4/D6f#;+
%>kl%N\-Bd#64lb#0%-9>m!cZU[GtV.J!a/6pihX?$XSiUo57pI#2B^5iVA.A\1RgHSUNeGCH0G1H]&?qR6hpunqJ[].L)i,k>Un0
%GH2cB0[X4Na*r`:+29VA4_G0Hi,R(H$kj]O!"k(u8LU3O-JHl3p(C6&s)GlJb;tq3_lB:?+J=r/@;lAR"Unp/#u,U$V0jS.p,[fu
%Q\086/pW_Y:bdnm?O%9GK*XGL4?=Ca,=&):KUWEW:$n]KdhR`?_Z(t:*qVFqi'&<EL3jEE-,F.Y5U8l7GoUHA6upeqB>t,"$*=^Z
%41`dj(V+0[!$i^?-isYu@o$rJX"X%U48nMk]Qpoap_?g&*YU)KTr9rZ1^i?)$B?MHF,rL#eV%-8Q)n>WkanQG2eN+C,ZQBCaF^da
%6>\+U"0JB*Uk!bcAVGZK7Iq7'l;BGL*Sf#["%A^*?(%Z_Eqi3>B._kHoKuGf(:A-qBd:_!JaRs\6>1-4MFXH,@_Wd&+^J9ja3.ol
%?7jK4K$aSYGGu4Y2Sofs.#SaDP8ZRW!alb\3KeBB*Z65DrUGISNo`She/3k$Aa=D);.>mQ[TD42s0b.=4Km(g(R=I'9WVEZ`7#&F
%.AUnHq?MHgCR$?P)$P<-2!iH&C6f/01Dr/>GcDSn**RPG)5SAm*W]+"E/09Hb(8R7]rhD?M4S#]0Q'dY&`+'qNe3jmdUp.k6A6;R
%b7t.tW'A[Ja^J;+^qc$[$++_r*/%.b([DIE/V/>"'4fs#bDO](%2FZ`)+*=C?%GUbV&o%o6Yu!]E,pjp79T#VE[]r&O\;a;I]1HU
%CfmT*+iQH$h6`Ze7`:C1CO+;"0X-g"/P8]#Oe,d]]F2#"o<=ug]GkH#E-\'?dl2af&G$&1=W5R^J4HnP2h\e"I<hHRE<F1?=iL!J
%%d7cuf*Vjg#,n?b&/..NmMlpHJ8M\%PQtj4BBHGS<eBe2O!HX1%X/BGCJ!J5=_T*-ga1\aXJ*llW82=/["7Z"@ktm45V3BuN+c8m
%RL=rqQr50A%s2h?c5P@W1*^kmc0XI**G#O[Y^\/1DD1q;pAfE=m3:V)022DNK81Z",q!0_pLE;4'9J+1I1$c;j\KOIOLY`"N($T,
%(l<M29Ydn2'%/GO$5aZ8d>fS8NQ2Z,#M^d=,T:thXI!re3j"1g"?t-6WkEF<IFpQ<o\brJ*Zr$oTl^<!&6H^Jr:]6UqTX4E-%DRN
%$=_31&A<K(jO-pol3_0s'TNJBk4]caXgnU&-\[o'!t;iq_C\36Pl`=:WJ/@rq?&Qn;4h`(HO2E79'e:n+DS^OVg@t9XAVn<=JbN@
%p/@j+=TkEFGl6hj%;Cou2IY,$jo_mmDo<>t?607:[=N"PdX2AR+S<qaCoF?:blk\!p=QYtpu&Y$8aZO@25_#YEdm%Hh'kYG(]jX!
%MMV"=P,^,/:>t<JD,!"Ja6>od_6JbN0sNqT<[B^qY0Jr,I3jW<4J?K0Ibi5#$8Qp67fkN=6b<Z:'91Q3iptC_I=-!c.>8HO,`%-a
%fXE)q/>,8h:jkgd/"J'+jlf_fC=Z$;K#mH:MmtF>dG>A#8g*Zt6f7\@7T<gO;*hGS:MQ=`cSH.GTf'FN,N\F3TrCl6@maHYhA)(<
%rgAS]&ac+q#c`!&S@fk!p<aaU2$BS'jBWue%eu#b$&:DA8O<,ol+F::nF\p;1[(V,R-8cb0)2&":Zcodd'p3jl>-0t?r>%Oo5Yto
%Jr^qDS7L-JS,'9]Gp7"G=;@MK@k7=N65&kfh)""75!*TaYs`0"I91Rr6tB?P]\ajJ5^[;5ISsC*89^%6DgcOSaW9ap6h%cF2A)M\
%Y2*^Z8C<^4\-'JfPh2dk'`6.D`u8MAK\2$i)([oc)CHI2pSQ*W#+s8'+;a:!L)(U1m!UkNXQ4qHfAhCQi0l,sE'5<?INW'q"[9Li
%Bib6#A9LjRVn?a:lI72:hV$Ba?o;#&M+BWq+9PT8j5?PX:SP:O#+8@4Y#1n:.VFMe)0U<WX%OhpRlh2J;1LE.E0]f<Kj/LZlT^o`
%13mfj8J0o%UXGr!=ocFA[-[CE'>!iZ-fE%"$NX[K\^&JZYXC:Y6=N#%hV9C4+V9nU4\--i"Sr5?W]:=9_KnKR/L/bL<gYtBLk-Hm
%o/M^pZ6BmjpVV_*g9F&oiZXn\FU;XY`RmtD6oZ$b(0G0F^ACE>7&pI5&34J2.8hNhRf6PAf#-%bW^P55Kqp,N&S+stU9Vc?_?d-'
%aqLce<A"j=W3$W-oQ!Y"3`G,8"T9#[OM9nL/aZ1ncsG5nIPkY!f0-h:VuLoNr1!`5Idun+rkJC'QbWLLY9+k\^lSKT0E:HAs80!L
%q-Uo4eZ]#<?iAeFrUMn^HMHUZs#j`J=9#f1o^I(>rma73o0<0L<tG?'s89ca@t]c30)3hTrn[VNn,MZ[rI;f1C@h~>
%AI9_PrivateDataEnd
